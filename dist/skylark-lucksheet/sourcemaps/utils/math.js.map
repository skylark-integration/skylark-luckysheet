{"version":3,"sources":["utils/math.js"],"names":["define","m_validate","isRealNum","toInteger","floatNum","obj","ret","times","num","Math","floor","strfi","dotPos","indexOf","len","substr","length","pow","intNum","parseInt","operation","a","b","op","o1","o2","n1","n2","t1","t2","max","Number","prototype","add","value","number","parseFloat","isNaN","Error","this","subtract","multiply","divide","tofixed","precision","s","toFixed","index","prefix","substring","suffix","i","charAt","fixed"],"mappings":";;;;;;;AAAAA,QAAQ,uBAAwB,SAAUC,GACtC,aACA,MAAMC,UAACA,GAAaD,EAkBpB,SAASE,EAAUC,GACf,IAfeC,EAeXC,GACAC,MAAO,EACPC,IAAK,GAET,GAnBeH,EAmBDD,EAlBPK,KAAKC,MAAML,KAASA,EAoBvB,OADAC,EAAIE,IAAMJ,EACHE,EAEX,IAAIK,EAAQP,EAAW,GACnBQ,EAASD,EAAME,QAAQ,KACvBC,EAAMH,EAAMI,OAAOH,EAAS,GAAGI,OAC/BT,EAAQE,KAAKQ,IAAI,GAAIH,GACrBI,EAASC,SAASf,EAAWG,EAAQ,GAAK,IAG9C,OAFAD,EAAIC,MAAQA,EACZD,EAAIE,IAAMU,EACHZ,EAqBX,SAASc,EAAUC,EAAGC,EAAGC,GACrB,IAAIC,EAAKrB,EAAUkB,GACfI,EAAKtB,EAAUmB,GACfI,EAAKF,EAAGhB,IACRmB,EAAKF,EAAGjB,IACRoB,EAAKJ,EAAGjB,MACRsB,EAAKJ,EAAGlB,MACRuB,EAAMF,EAAKC,EAAKD,EAAKC,EAEzB,OAAQN,GACR,IAAK,MAWD,OAVIK,IAAOC,EAEEH,EAAKC,EACPC,EAAKC,EAEHH,EAAKC,GAAMC,EAAKC,GAGhBH,GAAMG,EAAKD,GAAMD,GAEdG,EACpB,IAAK,WAQD,OAPIF,IAAOC,EACEH,EAAKC,EACPC,EAAKC,EACHH,EAAKC,GAAMC,EAAKC,GAEhBH,GAAMG,EAAKD,GAAMD,GAEdG,EACpB,IAAK,WAED,OADSJ,EAAKC,GAAMC,EAAKC,GAE7B,IAAK,SACD,OAGWT,EAFEM,EAAKC,EACLE,EAAKD,EACW,aAwCrCG,OAAOC,UAAUC,IAAM,SAAUC,GAC7B,IAAIC,EAASC,WAAWF,GACxB,GAAsB,iBAAXC,GAAuBJ,OAAOM,MAAMF,GAC3C,MAAM,IAAIG,MAAM,iBAGpB,OAAOlB,EAAUmB,KAAMJ,EAAQ,QAEnCJ,OAAOC,UAAUQ,SAAW,SAAUN,GAClC,IAAIC,EAASC,WAAWF,GACxB,GAAsB,iBAAXC,GAAuBJ,OAAOM,MAAMF,GAC3C,MAAM,IAAIG,MAAM,iBAEpB,OAAOlB,EAAUmB,KAAMJ,EAAQ,aAEnCJ,OAAOC,UAAUS,SAAW,SAAUP,GAClC,IAAIC,EAASC,WAAWF,GACxB,GAAsB,iBAAXC,GAAuBJ,OAAOM,MAAMF,GAC3C,MAAM,IAAIG,MAAM,iBAEpB,OAAOlB,EAAUmB,KAAMJ,EAAQ,aAEnCJ,OAAOC,UAAUU,OAAS,SAAUR,GAChC,IAAIC,EAASC,WAAWF,GACxB,GAAsB,iBAAXC,GAAuBJ,OAAOM,MAAMF,GAC3C,MAAM,IAAIG,MAAM,iBAEpB,OAAOlB,EAAUmB,KAAMJ,EAAQ,WAEnCJ,OAAOC,UAAUW,QAAU,SAAUT,GACjC,IAAIU,EAAYR,WAAWF,GAC3B,GAAyB,iBAAdU,GAA0Bb,OAAOM,MAAMO,GAC9C,MAAM,IAAIN,MAAM,iBAEpB,OA7DJ,SAAe9B,EAAKoC,GAIhB,GAHKA,IACDA,EAAY,IAEX1C,EAAUM,GACX,OAAOA,EACX,IAAIqC,EAAIrC,EAAIsC,QAAQF,GAChBG,EAAQF,EAAEhC,QAAQ,KAClBmC,EAASH,EAAEI,UAAU,EAAGF,GACxBG,EAASL,EAAEI,UAAUF,EAAQ,EAAGF,EAAE7B,QACtC,GAAIkC,EACA,IAAK,IAAIC,EAAID,EAAOlC,OAAS,EAAQ,GAALmC,IAEJ,KAApBD,EAAOE,OAAOD,IAAaA,GAAKD,EAAOlC,OAAS,GAFhBmC,IAKhCD,EAASA,EAAOD,UAAU,EAAGE,GAIzC,OAAOpB,OAAOiB,EAAS,IAAME,GAyCtBG,CAAMd,KAAMK","file":"../../utils/math.js","sourcesContent":["define(['../methods/validate'], function (m_validate) {\n    'use strict';\n    const {isRealNum} = m_validate;\n    /*\n * 判断obj是否为一个整数\n */\n    function isInteger(obj) {\n        return Math.floor(obj) === obj;\n    }    /*\n * 将一个浮点数转成整数，返回整数和倍数。如 3.14 >> 314，倍数是 100\n * @param floatNum {number} 小数\n * @return {object}\n *   {times:100, num: 314}\n */\n    /*\n * 将一个浮点数转成整数，返回整数和倍数。如 3.14 >> 314，倍数是 100\n * @param floatNum {number} 小数\n * @return {object}\n *   {times:100, num: 314}\n */\n    function toInteger(floatNum) {\n        var ret = {\n            times: 1,\n            num: 0\n        };\n        if (isInteger(floatNum)) {\n            ret.num = floatNum;\n            return ret;\n        }\n        var strfi = floatNum + '';\n        var dotPos = strfi.indexOf('.');\n        var len = strfi.substr(dotPos + 1).length;\n        var times = Math.pow(10, len);\n        var intNum = parseInt(floatNum * times + 0.5, 10);\n        ret.times = times;\n        ret.num = intNum;\n        return ret;\n    }    /*\n * 核心方法，实现加减乘除运算，确保不丢失精度\n * 思路：把小数放大为整数（乘），进行算术运算，再缩小为小数（除）\n *\n * @param a {number} 运算数1\n * @param b {number} 运算数2\n * @param digits {number} 精度，保留的小数点数，比如 2, 即保留为两位小数\n * @param op {string} 运算类型，有加减乘除（add/subtract/multiply/divide）\n *\n */\n    /*\n * 核心方法，实现加减乘除运算，确保不丢失精度\n * 思路：把小数放大为整数（乘），进行算术运算，再缩小为小数（除）\n *\n * @param a {number} 运算数1\n * @param b {number} 运算数2\n * @param digits {number} 精度，保留的小数点数，比如 2, 即保留为两位小数\n * @param op {string} 运算类型，有加减乘除（add/subtract/multiply/divide）\n *\n */\n    function operation(a, b, op) {\n        var o1 = toInteger(a);\n        var o2 = toInteger(b);\n        var n1 = o1.num;\n        var n2 = o2.num;\n        var t1 = o1.times;\n        var t2 = o2.times;\n        var max = t1 > t2 ? t1 : t2;\n        var result = null;\n        switch (op) {\n        case 'add':\n            if (t1 === t2) {\n                // 两个小数位数相同\n                result = n1 + n2;\n            } else if (t1 > t2) {\n                // o1 小数位 大于 o2\n                result = n1 + n2 * (t1 / t2);\n            } else {\n                // o1 小数位 小于 o2\n                result = n1 * (t2 / t1) + n2;\n            }\n            return result / max;\n        case 'subtract':\n            if (t1 === t2) {\n                result = n1 - n2;\n            } else if (t1 > t2) {\n                result = n1 - n2 * (t1 / t2);\n            } else {\n                result = n1 * (t2 / t1) - n2;\n            }\n            return result / max;\n        case 'multiply':\n            result = n1 * n2 / (t1 * t2);\n            return result;\n        case 'divide':\n            return result = function () {\n                var r1 = n1 / n2;\n                var r2 = t2 / t1;\n                return operation(r1, r2, 'multiply');\n            }();\n        }\n    }    /**\n * 做小数点的四舍五入计算\n * @param {*} num\n * @param {*} precision\n */\n    /**\n * 做小数点的四舍五入计算\n * @param {*} num\n * @param {*} precision\n */\n    function fixed(num, precision) {\n        if (!precision) {\n            precision = 2;\n        }\n        if (!isRealNum(num))\n            return num;\n        let s = num.toFixed(precision);\n        let index = s.indexOf('.');\n        let prefix = s.substring(0, index);\n        let suffix = s.substring(index + 1, s.length);\n        if (suffix) {\n            for (let i = suffix.length - 1; i != 0; i--) {\n                //最末位不为0，直接break;\n                if (suffix.charAt(i) != '0' && i == suffix.length - 1) {\n                    break;\n                } else {\n                    suffix = suffix.substring(0, i);\n                }\n            }\n        }\n        return Number(prefix + '.' + suffix);\n    }    /**\n * Calculation +-/* Solve the problem of js accuracy\n */\n    /**\n * Calculation +-/* Solve the problem of js accuracy\n */\n    Number.prototype.add = function (value) {\n        let number = parseFloat(value);\n        if (typeof number !== 'number' || Number.isNaN(number)) {\n            throw new Error('请输入数字或者数字字符串\\uFF5E');\n        }\n        ;\n        return operation(this, number, 'add');\n    };\n    Number.prototype.subtract = function (value) {\n        let number = parseFloat(value);\n        if (typeof number !== 'number' || Number.isNaN(number)) {\n            throw new Error('请输入数字或者数字字符串\\uFF5E');\n        }\n        return operation(this, number, 'subtract');\n    };\n    Number.prototype.multiply = function (value) {\n        let number = parseFloat(value);\n        if (typeof number !== 'number' || Number.isNaN(number)) {\n            throw new Error('请输入数字或者数字字符串\\uFF5E');\n        }\n        return operation(this, number, 'multiply');\n    };\n    Number.prototype.divide = function (value) {\n        let number = parseFloat(value);\n        if (typeof number !== 'number' || Number.isNaN(number)) {\n            throw new Error('请输入数字或者数字字符串\\uFF5E');\n        }\n        return operation(this, number, 'divide');\n    };\n    Number.prototype.tofixed = function (value) {\n        let precision = parseFloat(value);\n        if (typeof precision !== 'number' || Number.isNaN(precision)) {\n            throw new Error('请输入数字或者数字字符串\\uFF5E');\n        }\n        return fixed(this, precision);\n    };\n});"]}