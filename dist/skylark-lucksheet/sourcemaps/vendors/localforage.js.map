{"version":3,"sources":["vendors/localforage.js"],"names":["f","exports","module","define","amd","window","global","self","this","localforage","e","t","n","r","s","o","u","a","require","i","Error","code","l","call","length","1","_dereq_","scheduleDrain","draining","Mutation","MutationObserver","WebKitMutationObserver","called","observer","nextTick","element","document","createTextNode","observe","characterData","data","setImmediate","MessageChannel","createElement","scriptEl","onreadystatechange","parentNode","removeChild","documentElement","appendChild","setTimeout","channel","port1","onmessage","port2","postMessage","queue","oldQueue","len","task","push","2","immediate","INTERNAL","handlers","REJECTED","FULFILLED","PENDING","Promise","resolver","TypeError","state","outcome","safelyResolveThenable","QueueItem","promise","onFulfilled","onRejected","callFulfilled","otherCallFulfilled","callRejected","otherCallRejected","unwrap","func","value","returnValue","reject","resolve","getThen","obj","then","apply","arguments","thenable","onError","onSuccess","result","tryCatch","status","out","prototype","constructor","error","reason","all","iterable","Object","toString","values","Array","resolved","allResolver","outValue","race","response","3","4","_typeof","Symbol","iterator","idb","indexedDB","webkitIndexedDB","mozIndexedDB","OIndexedDB","msIndexedDB","getIDB","createBlob","parts","properties","Blob","name","builder","BlobBuilder","MSBlobBuilder","MozBlobBuilder","WebKitBlobBuilder","append","getBlob","type","Promise$1","executeCallback","callback","executeTwoCallbacks","errorCallback","normalizeKey","key","console","warn","String","getCallback","DETECT_BLOB_SUPPORT_STORE","supportsBlobs","dbContexts","READ_ONLY","READ_WRITE","_checkBlobSupport","txn","transaction","blob","objectStore","put","onabort","preventDefault","stopPropagation","oncomplete","matchedChrome","navigator","userAgent","match","matchedEdge","parseInt","_checkBlobSupportWithoutCaching","_deferReadiness","dbInfo","dbContext","deferredOperation","deferredOperations","dbReady","_advanceReadiness","pop","_rejectReadiness","err","_getConnection","upgradeNeeded","forages","db","close","dbArgs","version","openreq","open","onupgradeneeded","createObjectStore","storeName","oldVersion","ex","newVersion","onerror","onsuccess","onversionchange","target","_getOriginalConnection","_getUpgradedConnection","_isUpgradeNeeded","defaultVersion","isNewStore","objectStoreNames","contains","isDowngrade","isUpgrade","incVersion","_decodeBlob","encodedBlob","bin","buf","ArrayBuffer","arr","Uint8Array","charCodeAt","_binStringToArrayBuffer","atob","_isEncodedBlob","__local_forage_encoded_blob","_fullyReady","_initReady","_dbInfo","createTransaction","mode","retries","undefined","tx","forage","_tryReconnect","asyncStorage","_driver","_initStorage","options","ready","initPromises","ignoreErrors","j","slice","_defaultConfig","k","_support","isSafari","openDatabase","test","platform","hasFetch","fetch","indexOf","IDBKeyRange","isIndexedDBValid","iterate","req","openCursor","iterationNumber","cursor","getItem","get","setItem","blobSupport","reader","FileReader","onloadend","base64","btoa","readAsBinaryString","store","removeItem","clear","count","advanced","openKeyCursor","advance","keys","dropInstance","currentConfig","config","dbPromise","deleteObjectStore","_forage2","deleteDatabase","onblocked","BASE_CHARS","BLOB_TYPE_PREFIX","BLOB_TYPE_PREFIX_REGEX","SERIALIZED_MARKER","SERIALIZED_MARKER_LENGTH","TYPE_ARRAYBUFFER","TYPE_BLOB","TYPE_INT8ARRAY","TYPE_UINT8ARRAY","TYPE_UINT8CLAMPEDARRAY","TYPE_INT16ARRAY","TYPE_INT32ARRAY","TYPE_UINT16ARRAY","TYPE_UINT32ARRAY","TYPE_FLOAT32ARRAY","TYPE_FLOAT64ARRAY","TYPE_SERIALIZED_MARKER_LENGTH","toString$1","stringToBuffer","serializedString","encoded1","encoded2","encoded3","encoded4","bufferLength","p","buffer","bytes","bufferToString","base64String","substring","localforageSerializer","serialize","valueType","marker","fileReader","onload","str","readAsArrayBuffer","JSON","stringify","deserialize","parse","blobType","matcher","Int8Array","Uint8ClampedArray","Int16Array","Uint16Array","Int32Array","Uint32Array","Float32Array","Float64Array","createDbTable","executeSql","tryExecuteSql","sqlStatement","args","SYNTAX_ERR","results","rows","webSQLStorage","dbInfoPromise","description","size","serializer","item","_setItem","retriesLeft","originalValue","sqlError","QUOTA_ERR","c","storeNames","getAllStoreNames","operationInfo","dropTable","operations","_getKeyPrefix","defaultConfig","keyPrefix","_isLocalStorageUsable","localStorage","checkIfLocalStorageThrows","localStorageWrapper","isLocalStorageValid","keyPrefixLength","itemKey","includes","array","searchElement","x","y","isNaN","isArray","arg","DefinedDrivers","DriverSupport","DefaultDrivers","INDEXEDDB","WEBSQL","LOCALSTORAGE","DefaultDriverOrder","OptionalDriverMethods","LibraryMethods","concat","DefaultConfig","driver","callWhenReady","localForageInstance","libraryMethod","_args","extend","_key","hasOwnProperty","localforage_js","LocalForage","driverTypeKey","instance","Constructor","_classCallCheck","driverName","defineDriver","_config","_driverSet","_initDriver","_ready","_wrapLibraryMethodsWithReady","setDriver","replace","driverObject","complianceError","driverMethods","driverMethodName","methodNotImplementedFactory","methodName","_i","_len","optionalDriverMethod","configureMissingMethods","setDriverSupport","support","info","getDriver","getDriverPromise","getSerializer","serializerPromise","drivers","supportedDrivers","_getSupportedDrivers","setDriverToConfig","extendSelfWithDriver","_extend","oldDriverSetDone","currentDriverIndex","driverPromiseLoop","initDriver","supports","libraryMethodsAndProperties","createInstance"],"mappings":"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","file":"../../vendors/localforage.js","sourcesContent":["/*!\r\n    localForage -- Offline Storage, Improved\r\n    Version 1.10.0\r\n    https://localforage.github.io/localForage\r\n    (c) 2013-2017 Mozilla, Apache License 2.0\r\n*/\r\n(function(f){if(typeof exports===\"object\"&&typeof module!==\"undefined\"){module.exports=f()}else if(typeof define===\"function\"&&define.amd){define([],f)}else{var g;if(typeof window!==\"undefined\"){g=window}else if(typeof global!==\"undefined\"){g=global}else if(typeof self!==\"undefined\"){g=self}else{g=this}g.localforage = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw (f.code=\"MODULE_NOT_FOUND\", f)}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(_dereq_,module,exports){\r\n(function (global){\r\n'use strict';\r\nvar Mutation = global.MutationObserver || global.WebKitMutationObserver;\r\n\r\nvar scheduleDrain;\r\n\r\n{\r\n  if (Mutation) {\r\n    var called = 0;\r\n    var observer = new Mutation(nextTick);\r\n    var element = global.document.createTextNode('');\r\n    observer.observe(element, {\r\n      characterData: true\r\n    });\r\n    scheduleDrain = function () {\r\n      element.data = (called = ++called % 2);\r\n    };\r\n  } else if (!global.setImmediate && typeof global.MessageChannel !== 'undefined') {\r\n    var channel = new global.MessageChannel();\r\n    channel.port1.onmessage = nextTick;\r\n    scheduleDrain = function () {\r\n      channel.port2.postMessage(0);\r\n    };\r\n  } else if ('document' in global && 'onreadystatechange' in global.document.createElement('script')) {\r\n    scheduleDrain = function () {\r\n\r\n      // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted\r\n      // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.\r\n      var scriptEl = global.document.createElement('script');\r\n      scriptEl.onreadystatechange = function () {\r\n        nextTick();\r\n\r\n        scriptEl.onreadystatechange = null;\r\n        scriptEl.parentNode.removeChild(scriptEl);\r\n        scriptEl = null;\r\n      };\r\n      global.document.documentElement.appendChild(scriptEl);\r\n    };\r\n  } else {\r\n    scheduleDrain = function () {\r\n      setTimeout(nextTick, 0);\r\n    };\r\n  }\r\n}\r\n\r\nvar draining;\r\nvar queue = [];\r\n//named nextTick for less confusing stack traces\r\nfunction nextTick() {\r\n  draining = true;\r\n  var i, oldQueue;\r\n  var len = queue.length;\r\n  while (len) {\r\n    oldQueue = queue;\r\n    queue = [];\r\n    i = -1;\r\n    while (++i < len) {\r\n      oldQueue[i]();\r\n    }\r\n    len = queue.length;\r\n  }\r\n  draining = false;\r\n}\r\n\r\nmodule.exports = immediate;\r\nfunction immediate(task) {\r\n  if (queue.push(task) === 1 && !draining) {\r\n    scheduleDrain();\r\n  }\r\n}\r\n\r\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\r\n},{}],2:[function(_dereq_,module,exports){\r\n'use strict';\r\nvar immediate = _dereq_(1);\r\n\r\n/* istanbul ignore next */\r\nfunction INTERNAL() {}\r\n\r\nvar handlers = {};\r\n\r\nvar REJECTED = ['REJECTED'];\r\nvar FULFILLED = ['FULFILLED'];\r\nvar PENDING = ['PENDING'];\r\n\r\nmodule.exports = Promise;\r\n\r\nfunction Promise(resolver) {\r\n  if (typeof resolver !== 'function') {\r\n    throw new TypeError('resolver must be a function');\r\n  }\r\n  this.state = PENDING;\r\n  this.queue = [];\r\n  this.outcome = void 0;\r\n  if (resolver !== INTERNAL) {\r\n    safelyResolveThenable(this, resolver);\r\n  }\r\n}\r\n\r\nPromise.prototype[\"catch\"] = function (onRejected) {\r\n  return this.then(null, onRejected);\r\n};\r\nPromise.prototype.then = function (onFulfilled, onRejected) {\r\n  if (typeof onFulfilled !== 'function' && this.state === FULFILLED ||\r\n    typeof onRejected !== 'function' && this.state === REJECTED) {\r\n    return this;\r\n  }\r\n  var promise = new this.constructor(INTERNAL);\r\n  if (this.state !== PENDING) {\r\n    var resolver = this.state === FULFILLED ? onFulfilled : onRejected;\r\n    unwrap(promise, resolver, this.outcome);\r\n  } else {\r\n    this.queue.push(new QueueItem(promise, onFulfilled, onRejected));\r\n  }\r\n\r\n  return promise;\r\n};\r\nfunction QueueItem(promise, onFulfilled, onRejected) {\r\n  this.promise = promise;\r\n  if (typeof onFulfilled === 'function') {\r\n    this.onFulfilled = onFulfilled;\r\n    this.callFulfilled = this.otherCallFulfilled;\r\n  }\r\n  if (typeof onRejected === 'function') {\r\n    this.onRejected = onRejected;\r\n    this.callRejected = this.otherCallRejected;\r\n  }\r\n}\r\nQueueItem.prototype.callFulfilled = function (value) {\r\n  handlers.resolve(this.promise, value);\r\n};\r\nQueueItem.prototype.otherCallFulfilled = function (value) {\r\n  unwrap(this.promise, this.onFulfilled, value);\r\n};\r\nQueueItem.prototype.callRejected = function (value) {\r\n  handlers.reject(this.promise, value);\r\n};\r\nQueueItem.prototype.otherCallRejected = function (value) {\r\n  unwrap(this.promise, this.onRejected, value);\r\n};\r\n\r\nfunction unwrap(promise, func, value) {\r\n  immediate(function () {\r\n    var returnValue;\r\n    try {\r\n      returnValue = func(value);\r\n    } catch (e) {\r\n      return handlers.reject(promise, e);\r\n    }\r\n    if (returnValue === promise) {\r\n      handlers.reject(promise, new TypeError('Cannot resolve promise with itself'));\r\n    } else {\r\n      handlers.resolve(promise, returnValue);\r\n    }\r\n  });\r\n}\r\n\r\nhandlers.resolve = function (self, value) {\r\n  var result = tryCatch(getThen, value);\r\n  if (result.status === 'error') {\r\n    return handlers.reject(self, result.value);\r\n  }\r\n  var thenable = result.value;\r\n\r\n  if (thenable) {\r\n    safelyResolveThenable(self, thenable);\r\n  } else {\r\n    self.state = FULFILLED;\r\n    self.outcome = value;\r\n    var i = -1;\r\n    var len = self.queue.length;\r\n    while (++i < len) {\r\n      self.queue[i].callFulfilled(value);\r\n    }\r\n  }\r\n  return self;\r\n};\r\nhandlers.reject = function (self, error) {\r\n  self.state = REJECTED;\r\n  self.outcome = error;\r\n  var i = -1;\r\n  var len = self.queue.length;\r\n  while (++i < len) {\r\n    self.queue[i].callRejected(error);\r\n  }\r\n  return self;\r\n};\r\n\r\nfunction getThen(obj) {\r\n  // Make sure we only access the accessor once as required by the spec\r\n  var then = obj && obj.then;\r\n  if (obj && (typeof obj === 'object' || typeof obj === 'function') && typeof then === 'function') {\r\n    return function appyThen() {\r\n      then.apply(obj, arguments);\r\n    };\r\n  }\r\n}\r\n\r\nfunction safelyResolveThenable(self, thenable) {\r\n  // Either fulfill, reject or reject with error\r\n  var called = false;\r\n  function onError(value) {\r\n    if (called) {\r\n      return;\r\n    }\r\n    called = true;\r\n    handlers.reject(self, value);\r\n  }\r\n\r\n  function onSuccess(value) {\r\n    if (called) {\r\n      return;\r\n    }\r\n    called = true;\r\n    handlers.resolve(self, value);\r\n  }\r\n\r\n  function tryToUnwrap() {\r\n    thenable(onSuccess, onError);\r\n  }\r\n\r\n  var result = tryCatch(tryToUnwrap);\r\n  if (result.status === 'error') {\r\n    onError(result.value);\r\n  }\r\n}\r\n\r\nfunction tryCatch(func, value) {\r\n  var out = {};\r\n  try {\r\n    out.value = func(value);\r\n    out.status = 'success';\r\n  } catch (e) {\r\n    out.status = 'error';\r\n    out.value = e;\r\n  }\r\n  return out;\r\n}\r\n\r\nPromise.resolve = resolve;\r\nfunction resolve(value) {\r\n  if (value instanceof this) {\r\n    return value;\r\n  }\r\n  return handlers.resolve(new this(INTERNAL), value);\r\n}\r\n\r\nPromise.reject = reject;\r\nfunction reject(reason) {\r\n  var promise = new this(INTERNAL);\r\n  return handlers.reject(promise, reason);\r\n}\r\n\r\nPromise.all = all;\r\nfunction all(iterable) {\r\n  var self = this;\r\n  if (Object.prototype.toString.call(iterable) !== '[object Array]') {\r\n    return this.reject(new TypeError('must be an array'));\r\n  }\r\n\r\n  var len = iterable.length;\r\n  var called = false;\r\n  if (!len) {\r\n    return this.resolve([]);\r\n  }\r\n\r\n  var values = new Array(len);\r\n  var resolved = 0;\r\n  var i = -1;\r\n  var promise = new this(INTERNAL);\r\n\r\n  while (++i < len) {\r\n    allResolver(iterable[i], i);\r\n  }\r\n  return promise;\r\n  function allResolver(value, i) {\r\n    self.resolve(value).then(resolveFromAll, function (error) {\r\n      if (!called) {\r\n        called = true;\r\n        handlers.reject(promise, error);\r\n      }\r\n    });\r\n    function resolveFromAll(outValue) {\r\n      values[i] = outValue;\r\n      if (++resolved === len && !called) {\r\n        called = true;\r\n        handlers.resolve(promise, values);\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nPromise.race = race;\r\nfunction race(iterable) {\r\n  var self = this;\r\n  if (Object.prototype.toString.call(iterable) !== '[object Array]') {\r\n    return this.reject(new TypeError('must be an array'));\r\n  }\r\n\r\n  var len = iterable.length;\r\n  var called = false;\r\n  if (!len) {\r\n    return this.resolve([]);\r\n  }\r\n\r\n  var i = -1;\r\n  var promise = new this(INTERNAL);\r\n\r\n  while (++i < len) {\r\n    resolver(iterable[i]);\r\n  }\r\n  return promise;\r\n  function resolver(value) {\r\n    self.resolve(value).then(function (response) {\r\n      if (!called) {\r\n        called = true;\r\n        handlers.resolve(promise, response);\r\n      }\r\n    }, function (error) {\r\n      if (!called) {\r\n        called = true;\r\n        handlers.reject(promise, error);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\n},{\"1\":1}],3:[function(_dereq_,module,exports){\r\n(function (global){\r\n'use strict';\r\nif (typeof global.Promise !== 'function') {\r\n  global.Promise = _dereq_(2);\r\n}\r\n\r\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\r\n},{\"2\":2}],4:[function(_dereq_,module,exports){\r\n'use strict';\r\n\r\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\r\n\r\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\r\n\r\nfunction getIDB() {\r\n    /* global indexedDB,webkitIndexedDB,mozIndexedDB,OIndexedDB,msIndexedDB */\r\n    try {\r\n        if (typeof indexedDB !== 'undefined') {\r\n            return indexedDB;\r\n        }\r\n        if (typeof webkitIndexedDB !== 'undefined') {\r\n            return webkitIndexedDB;\r\n        }\r\n        if (typeof mozIndexedDB !== 'undefined') {\r\n            return mozIndexedDB;\r\n        }\r\n        if (typeof OIndexedDB !== 'undefined') {\r\n            return OIndexedDB;\r\n        }\r\n        if (typeof msIndexedDB !== 'undefined') {\r\n            return msIndexedDB;\r\n        }\r\n    } catch (e) {\r\n        return;\r\n    }\r\n}\r\n\r\nvar idb = getIDB();\r\n\r\nfunction isIndexedDBValid() {\r\n    try {\r\n        // Initialize IndexedDB; fall back to vendor-prefixed versions\r\n        // if needed.\r\n        if (!idb || !idb.open) {\r\n            return false;\r\n        }\r\n        // We mimic PouchDB here;\r\n        //\r\n        // We test for openDatabase because IE Mobile identifies itself\r\n        // as Safari. Oh the lulz...\r\n        var isSafari = typeof openDatabase !== 'undefined' && /(Safari|iPhone|iPad|iPod)/.test(navigator.userAgent) && !/Chrome/.test(navigator.userAgent) && !/BlackBerry/.test(navigator.platform);\r\n\r\n        var hasFetch = typeof fetch === 'function' && fetch.toString().indexOf('[native code') !== -1;\r\n\r\n        // Safari <10.1 does not meet our requirements for IDB support\r\n        // (see: https://github.com/pouchdb/pouchdb/issues/5572).\r\n        // Safari 10.1 shipped with fetch, we can use that to detect it.\r\n        // Note: this creates issues with `window.fetch` polyfills and\r\n        // overrides; see:\r\n        // https://github.com/localForage/localForage/issues/856\r\n        return (!isSafari || hasFetch) && typeof indexedDB !== 'undefined' &&\r\n        // some outdated implementations of IDB that appear on Samsung\r\n        // and HTC Android devices <4.4 are missing IDBKeyRange\r\n        // See: https://github.com/mozilla/localForage/issues/128\r\n        // See: https://github.com/mozilla/localForage/issues/272\r\n        typeof IDBKeyRange !== 'undefined';\r\n    } catch (e) {\r\n        return false;\r\n    }\r\n}\r\n\r\n// Abstracts constructing a Blob object, so it also works in older\r\n// browsers that don't support the native Blob constructor. (i.e.\r\n// old QtWebKit versions, at least).\r\n// Abstracts constructing a Blob object, so it also works in older\r\n// browsers that don't support the native Blob constructor. (i.e.\r\n// old QtWebKit versions, at least).\r\nfunction createBlob(parts, properties) {\r\n    /* global BlobBuilder,MSBlobBuilder,MozBlobBuilder,WebKitBlobBuilder */\r\n    parts = parts || [];\r\n    properties = properties || {};\r\n    try {\r\n        return new Blob(parts, properties);\r\n    } catch (e) {\r\n        if (e.name !== 'TypeError') {\r\n            throw e;\r\n        }\r\n        var Builder = typeof BlobBuilder !== 'undefined' ? BlobBuilder : typeof MSBlobBuilder !== 'undefined' ? MSBlobBuilder : typeof MozBlobBuilder !== 'undefined' ? MozBlobBuilder : WebKitBlobBuilder;\r\n        var builder = new Builder();\r\n        for (var i = 0; i < parts.length; i += 1) {\r\n            builder.append(parts[i]);\r\n        }\r\n        return builder.getBlob(properties.type);\r\n    }\r\n}\r\n\r\n// This is CommonJS because lie is an external dependency, so Rollup\r\n// can just ignore it.\r\nif (typeof Promise === 'undefined') {\r\n    // In the \"nopromises\" build this will just throw if you don't have\r\n    // a global promise object, but it would throw anyway later.\r\n    _dereq_(3);\r\n}\r\nvar Promise$1 = Promise;\r\n\r\nfunction executeCallback(promise, callback) {\r\n    if (callback) {\r\n        promise.then(function (result) {\r\n            callback(null, result);\r\n        }, function (error) {\r\n            callback(error);\r\n        });\r\n    }\r\n}\r\n\r\nfunction executeTwoCallbacks(promise, callback, errorCallback) {\r\n    if (typeof callback === 'function') {\r\n        promise.then(callback);\r\n    }\r\n\r\n    if (typeof errorCallback === 'function') {\r\n        promise[\"catch\"](errorCallback);\r\n    }\r\n}\r\n\r\nfunction normalizeKey(key) {\r\n    // Cast the key to a string, as that's all we can set as a key.\r\n    if (typeof key !== 'string') {\r\n        console.warn(key + ' used as a key, but it is not a string.');\r\n        key = String(key);\r\n    }\r\n\r\n    return key;\r\n}\r\n\r\nfunction getCallback() {\r\n    if (arguments.length && typeof arguments[arguments.length - 1] === 'function') {\r\n        return arguments[arguments.length - 1];\r\n    }\r\n}\r\n\r\n// Some code originally from async_storage.js in\r\n// [Gaia](https://github.com/mozilla-b2g/gaia).\r\n\r\nvar DETECT_BLOB_SUPPORT_STORE = 'local-forage-detect-blob-support';\r\nvar supportsBlobs = void 0;\r\nvar dbContexts = {};\r\nvar toString = Object.prototype.toString;\r\n\r\n// Transaction Modes\r\nvar READ_ONLY = 'readonly';\r\nvar READ_WRITE = 'readwrite';\r\n\r\n// Transform a binary string to an array buffer, because otherwise\r\n// weird stuff happens when you try to work with the binary string directly.\r\n// It is known.\r\n// From http://stackoverflow.com/questions/14967647/ (continues on next line)\r\n// encode-decode-image-with-base64-breaks-image (2013-04-21)\r\nfunction _binStringToArrayBuffer(bin) {\r\n    var length = bin.length;\r\n    var buf = new ArrayBuffer(length);\r\n    var arr = new Uint8Array(buf);\r\n    for (var i = 0; i < length; i++) {\r\n        arr[i] = bin.charCodeAt(i);\r\n    }\r\n    return buf;\r\n}\r\n\r\n//\r\n// Blobs are not supported in all versions of IndexedDB, notably\r\n// Chrome <37 and Android <5. In those versions, storing a blob will throw.\r\n//\r\n// Various other blob bugs exist in Chrome v37-42 (inclusive).\r\n// Detecting them is expensive and confusing to users, and Chrome 37-42\r\n// is at very low usage worldwide, so we do a hacky userAgent check instead.\r\n//\r\n// content-type bug: https://code.google.com/p/chromium/issues/detail?id=408120\r\n// 404 bug: https://code.google.com/p/chromium/issues/detail?id=447916\r\n// FileReader bug: https://code.google.com/p/chromium/issues/detail?id=447836\r\n//\r\n// Code borrowed from PouchDB. See:\r\n// https://github.com/pouchdb/pouchdb/blob/master/packages/node_modules/pouchdb-adapter-idb/src/blobSupport.js\r\n//\r\nfunction _checkBlobSupportWithoutCaching(idb) {\r\n    return new Promise$1(function (resolve) {\r\n        var txn = idb.transaction(DETECT_BLOB_SUPPORT_STORE, READ_WRITE);\r\n        var blob = createBlob(['']);\r\n        txn.objectStore(DETECT_BLOB_SUPPORT_STORE).put(blob, 'key');\r\n\r\n        txn.onabort = function (e) {\r\n            // If the transaction aborts now its due to not being able to\r\n            // write to the database, likely due to the disk being full\r\n            e.preventDefault();\r\n            e.stopPropagation();\r\n            resolve(false);\r\n        };\r\n\r\n        txn.oncomplete = function () {\r\n            var matchedChrome = navigator.userAgent.match(/Chrome\\/(\\d+)/);\r\n            var matchedEdge = navigator.userAgent.match(/Edge\\//);\r\n            // MS Edge pretends to be Chrome 42:\r\n            // https://msdn.microsoft.com/en-us/library/hh869301%28v=vs.85%29.aspx\r\n            resolve(matchedEdge || !matchedChrome || parseInt(matchedChrome[1], 10) >= 43);\r\n        };\r\n    })[\"catch\"](function () {\r\n        return false; // error, so assume unsupported\r\n    });\r\n}\r\n\r\nfunction _checkBlobSupport(idb) {\r\n    if (typeof supportsBlobs === 'boolean') {\r\n        return Promise$1.resolve(supportsBlobs);\r\n    }\r\n    return _checkBlobSupportWithoutCaching(idb).then(function (value) {\r\n        supportsBlobs = value;\r\n        return supportsBlobs;\r\n    });\r\n}\r\n\r\nfunction _deferReadiness(dbInfo) {\r\n    var dbContext = dbContexts[dbInfo.name];\r\n\r\n    // Create a deferred object representing the current database operation.\r\n    var deferredOperation = {};\r\n\r\n    deferredOperation.promise = new Promise$1(function (resolve, reject) {\r\n        deferredOperation.resolve = resolve;\r\n        deferredOperation.reject = reject;\r\n    });\r\n\r\n    // Enqueue the deferred operation.\r\n    dbContext.deferredOperations.push(deferredOperation);\r\n\r\n    // Chain its promise to the database readiness.\r\n    if (!dbContext.dbReady) {\r\n        dbContext.dbReady = deferredOperation.promise;\r\n    } else {\r\n        dbContext.dbReady = dbContext.dbReady.then(function () {\r\n            return deferredOperation.promise;\r\n        });\r\n    }\r\n}\r\n\r\nfunction _advanceReadiness(dbInfo) {\r\n    var dbContext = dbContexts[dbInfo.name];\r\n\r\n    // Dequeue a deferred operation.\r\n    var deferredOperation = dbContext.deferredOperations.pop();\r\n\r\n    // Resolve its promise (which is part of the database readiness\r\n    // chain of promises).\r\n    if (deferredOperation) {\r\n        deferredOperation.resolve();\r\n        return deferredOperation.promise;\r\n    }\r\n}\r\n\r\nfunction _rejectReadiness(dbInfo, err) {\r\n    var dbContext = dbContexts[dbInfo.name];\r\n\r\n    // Dequeue a deferred operation.\r\n    var deferredOperation = dbContext.deferredOperations.pop();\r\n\r\n    // Reject its promise (which is part of the database readiness\r\n    // chain of promises).\r\n    if (deferredOperation) {\r\n        deferredOperation.reject(err);\r\n        return deferredOperation.promise;\r\n    }\r\n}\r\n\r\nfunction _getConnection(dbInfo, upgradeNeeded) {\r\n    return new Promise$1(function (resolve, reject) {\r\n        dbContexts[dbInfo.name] = dbContexts[dbInfo.name] || createDbContext();\r\n\r\n        if (dbInfo.db) {\r\n            if (upgradeNeeded) {\r\n                _deferReadiness(dbInfo);\r\n                dbInfo.db.close();\r\n            } else {\r\n                return resolve(dbInfo.db);\r\n            }\r\n        }\r\n\r\n        var dbArgs = [dbInfo.name];\r\n\r\n        if (upgradeNeeded) {\r\n            dbArgs.push(dbInfo.version);\r\n        }\r\n\r\n        var openreq = idb.open.apply(idb, dbArgs);\r\n\r\n        if (upgradeNeeded) {\r\n            openreq.onupgradeneeded = function (e) {\r\n                var db = openreq.result;\r\n                try {\r\n                    db.createObjectStore(dbInfo.storeName);\r\n                    if (e.oldVersion <= 1) {\r\n                        // Added when support for blob shims was added\r\n                        db.createObjectStore(DETECT_BLOB_SUPPORT_STORE);\r\n                    }\r\n                } catch (ex) {\r\n                    if (ex.name === 'ConstraintError') {\r\n                        console.warn('The database \"' + dbInfo.name + '\"' + ' has been upgraded from version ' + e.oldVersion + ' to version ' + e.newVersion + ', but the storage \"' + dbInfo.storeName + '\" already exists.');\r\n                    } else {\r\n                        throw ex;\r\n                    }\r\n                }\r\n            };\r\n        }\r\n\r\n        openreq.onerror = function (e) {\r\n            e.preventDefault();\r\n            reject(openreq.error);\r\n        };\r\n\r\n        openreq.onsuccess = function () {\r\n            var db = openreq.result;\r\n            db.onversionchange = function (e) {\r\n                // Triggered when the database is modified (e.g. adding an objectStore) or\r\n                // deleted (even when initiated by other sessions in different tabs).\r\n                // Closing the connection here prevents those operations from being blocked.\r\n                // If the database is accessed again later by this instance, the connection\r\n                // will be reopened or the database recreated as needed.\r\n                e.target.close();\r\n            };\r\n            resolve(db);\r\n            _advanceReadiness(dbInfo);\r\n        };\r\n    });\r\n}\r\n\r\nfunction _getOriginalConnection(dbInfo) {\r\n    return _getConnection(dbInfo, false);\r\n}\r\n\r\nfunction _getUpgradedConnection(dbInfo) {\r\n    return _getConnection(dbInfo, true);\r\n}\r\n\r\nfunction _isUpgradeNeeded(dbInfo, defaultVersion) {\r\n    if (!dbInfo.db) {\r\n        return true;\r\n    }\r\n\r\n    var isNewStore = !dbInfo.db.objectStoreNames.contains(dbInfo.storeName);\r\n    var isDowngrade = dbInfo.version < dbInfo.db.version;\r\n    var isUpgrade = dbInfo.version > dbInfo.db.version;\r\n\r\n    if (isDowngrade) {\r\n        // If the version is not the default one\r\n        // then warn for impossible downgrade.\r\n        if (dbInfo.version !== defaultVersion) {\r\n            console.warn('The database \"' + dbInfo.name + '\"' + \" can't be downgraded from version \" + dbInfo.db.version + ' to version ' + dbInfo.version + '.');\r\n        }\r\n        // Align the versions to prevent errors.\r\n        dbInfo.version = dbInfo.db.version;\r\n    }\r\n\r\n    if (isUpgrade || isNewStore) {\r\n        // If the store is new then increment the version (if needed).\r\n        // This will trigger an \"upgradeneeded\" event which is required\r\n        // for creating a store.\r\n        if (isNewStore) {\r\n            var incVersion = dbInfo.db.version + 1;\r\n            if (incVersion > dbInfo.version) {\r\n                dbInfo.version = incVersion;\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    return false;\r\n}\r\n\r\n// encode a blob for indexeddb engines that don't support blobs\r\nfunction _encodeBlob(blob) {\r\n    return new Promise$1(function (resolve, reject) {\r\n        var reader = new FileReader();\r\n        reader.onerror = reject;\r\n        reader.onloadend = function (e) {\r\n            var base64 = btoa(e.target.result || '');\r\n            resolve({\r\n                __local_forage_encoded_blob: true,\r\n                data: base64,\r\n                type: blob.type\r\n            });\r\n        };\r\n        reader.readAsBinaryString(blob);\r\n    });\r\n}\r\n\r\n// decode an encoded blob\r\nfunction _decodeBlob(encodedBlob) {\r\n    var arrayBuff = _binStringToArrayBuffer(atob(encodedBlob.data));\r\n    return createBlob([arrayBuff], { type: encodedBlob.type });\r\n}\r\n\r\n// is this one of our fancy encoded blobs?\r\nfunction _isEncodedBlob(value) {\r\n    return value && value.__local_forage_encoded_blob;\r\n}\r\n\r\n// Specialize the default `ready()` function by making it dependent\r\n// on the current database operations. Thus, the driver will be actually\r\n// ready when it's been initialized (default) *and* there are no pending\r\n// operations on the database (initiated by some other instances).\r\nfunction _fullyReady(callback) {\r\n    var self = this;\r\n\r\n    var promise = self._initReady().then(function () {\r\n        var dbContext = dbContexts[self._dbInfo.name];\r\n\r\n        if (dbContext && dbContext.dbReady) {\r\n            return dbContext.dbReady;\r\n        }\r\n    });\r\n\r\n    executeTwoCallbacks(promise, callback, callback);\r\n    return promise;\r\n}\r\n\r\n// Try to establish a new db connection to replace the\r\n// current one which is broken (i.e. experiencing\r\n// InvalidStateError while creating a transaction).\r\nfunction _tryReconnect(dbInfo) {\r\n    _deferReadiness(dbInfo);\r\n\r\n    var dbContext = dbContexts[dbInfo.name];\r\n    var forages = dbContext.forages;\r\n\r\n    for (var i = 0; i < forages.length; i++) {\r\n        var forage = forages[i];\r\n        if (forage._dbInfo.db) {\r\n            forage._dbInfo.db.close();\r\n            forage._dbInfo.db = null;\r\n        }\r\n    }\r\n    dbInfo.db = null;\r\n\r\n    return _getOriginalConnection(dbInfo).then(function (db) {\r\n        dbInfo.db = db;\r\n        if (_isUpgradeNeeded(dbInfo)) {\r\n            // Reopen the database for upgrading.\r\n            return _getUpgradedConnection(dbInfo);\r\n        }\r\n        return db;\r\n    }).then(function (db) {\r\n        // store the latest db reference\r\n        // in case the db was upgraded\r\n        dbInfo.db = dbContext.db = db;\r\n        for (var i = 0; i < forages.length; i++) {\r\n            forages[i]._dbInfo.db = db;\r\n        }\r\n    })[\"catch\"](function (err) {\r\n        _rejectReadiness(dbInfo, err);\r\n        throw err;\r\n    });\r\n}\r\n\r\n// FF doesn't like Promises (micro-tasks) and IDDB store operations,\r\n// so we have to do it with callbacks\r\nfunction createTransaction(dbInfo, mode, callback, retries) {\r\n    if (retries === undefined) {\r\n        retries = 1;\r\n    }\r\n\r\n    try {\r\n        var tx = dbInfo.db.transaction(dbInfo.storeName, mode);\r\n        callback(null, tx);\r\n    } catch (err) {\r\n        if (retries > 0 && (!dbInfo.db || err.name === 'InvalidStateError' || err.name === 'NotFoundError')) {\r\n            return Promise$1.resolve().then(function () {\r\n                if (!dbInfo.db || err.name === 'NotFoundError' && !dbInfo.db.objectStoreNames.contains(dbInfo.storeName) && dbInfo.version <= dbInfo.db.version) {\r\n                    // increase the db version, to create the new ObjectStore\r\n                    if (dbInfo.db) {\r\n                        dbInfo.version = dbInfo.db.version + 1;\r\n                    }\r\n                    // Reopen the database for upgrading.\r\n                    return _getUpgradedConnection(dbInfo);\r\n                }\r\n            }).then(function () {\r\n                return _tryReconnect(dbInfo).then(function () {\r\n                    createTransaction(dbInfo, mode, callback, retries - 1);\r\n                });\r\n            })[\"catch\"](callback);\r\n        }\r\n\r\n        callback(err);\r\n    }\r\n}\r\n\r\nfunction createDbContext() {\r\n    return {\r\n        // Running localForages sharing a database.\r\n        forages: [],\r\n        // Shared database.\r\n        db: null,\r\n        // Database readiness (promise).\r\n        dbReady: null,\r\n        // Deferred operations on the database.\r\n        deferredOperations: []\r\n    };\r\n}\r\n\r\n// Open the IndexedDB database (automatically creates one if one didn't\r\n// previously exist), using any options set in the config.\r\nfunction _initStorage(options) {\r\n    var self = this;\r\n    var dbInfo = {\r\n        db: null\r\n    };\r\n\r\n    if (options) {\r\n        for (var i in options) {\r\n            dbInfo[i] = options[i];\r\n        }\r\n    }\r\n\r\n    // Get the current context of the database;\r\n    var dbContext = dbContexts[dbInfo.name];\r\n\r\n    // ...or create a new context.\r\n    if (!dbContext) {\r\n        dbContext = createDbContext();\r\n        // Register the new context in the global container.\r\n        dbContexts[dbInfo.name] = dbContext;\r\n    }\r\n\r\n    // Register itself as a running localForage in the current context.\r\n    dbContext.forages.push(self);\r\n\r\n    // Replace the default `ready()` function with the specialized one.\r\n    if (!self._initReady) {\r\n        self._initReady = self.ready;\r\n        self.ready = _fullyReady;\r\n    }\r\n\r\n    // Create an array of initialization states of the related localForages.\r\n    var initPromises = [];\r\n\r\n    function ignoreErrors() {\r\n        // Don't handle errors here,\r\n        // just makes sure related localForages aren't pending.\r\n        return Promise$1.resolve();\r\n    }\r\n\r\n    for (var j = 0; j < dbContext.forages.length; j++) {\r\n        var forage = dbContext.forages[j];\r\n        if (forage !== self) {\r\n            // Don't wait for itself...\r\n            initPromises.push(forage._initReady()[\"catch\"](ignoreErrors));\r\n        }\r\n    }\r\n\r\n    // Take a snapshot of the related localForages.\r\n    var forages = dbContext.forages.slice(0);\r\n\r\n    // Initialize the connection process only when\r\n    // all the related localForages aren't pending.\r\n    return Promise$1.all(initPromises).then(function () {\r\n        dbInfo.db = dbContext.db;\r\n        // Get the connection or open a new one without upgrade.\r\n        return _getOriginalConnection(dbInfo);\r\n    }).then(function (db) {\r\n        dbInfo.db = db;\r\n        if (_isUpgradeNeeded(dbInfo, self._defaultConfig.version)) {\r\n            // Reopen the database for upgrading.\r\n            return _getUpgradedConnection(dbInfo);\r\n        }\r\n        return db;\r\n    }).then(function (db) {\r\n        dbInfo.db = dbContext.db = db;\r\n        self._dbInfo = dbInfo;\r\n        // Share the final connection amongst related localForages.\r\n        for (var k = 0; k < forages.length; k++) {\r\n            var forage = forages[k];\r\n            if (forage !== self) {\r\n                // Self is already up-to-date.\r\n                forage._dbInfo.db = dbInfo.db;\r\n                forage._dbInfo.version = dbInfo.version;\r\n            }\r\n        }\r\n    });\r\n}\r\n\r\nfunction getItem(key, callback) {\r\n    var self = this;\r\n\r\n    key = normalizeKey(key);\r\n\r\n    var promise = new Promise$1(function (resolve, reject) {\r\n        self.ready().then(function () {\r\n            createTransaction(self._dbInfo, READ_ONLY, function (err, transaction) {\r\n                if (err) {\r\n                    return reject(err);\r\n                }\r\n\r\n                try {\r\n                    var store = transaction.objectStore(self._dbInfo.storeName);\r\n                    var req = store.get(key);\r\n\r\n                    req.onsuccess = function () {\r\n                        var value = req.result;\r\n                        if (value === undefined) {\r\n                            value = null;\r\n                        }\r\n                        if (_isEncodedBlob(value)) {\r\n                            value = _decodeBlob(value);\r\n                        }\r\n                        resolve(value);\r\n                    };\r\n\r\n                    req.onerror = function () {\r\n                        reject(req.error);\r\n                    };\r\n                } catch (e) {\r\n                    reject(e);\r\n                }\r\n            });\r\n        })[\"catch\"](reject);\r\n    });\r\n\r\n    executeCallback(promise, callback);\r\n    return promise;\r\n}\r\n\r\n// Iterate over all items stored in database.\r\nfunction iterate(iterator, callback) {\r\n    var self = this;\r\n\r\n    var promise = new Promise$1(function (resolve, reject) {\r\n        self.ready().then(function () {\r\n            createTransaction(self._dbInfo, READ_ONLY, function (err, transaction) {\r\n                if (err) {\r\n                    return reject(err);\r\n                }\r\n\r\n                try {\r\n                    var store = transaction.objectStore(self._dbInfo.storeName);\r\n                    var req = store.openCursor();\r\n                    var iterationNumber = 1;\r\n\r\n                    req.onsuccess = function () {\r\n                        var cursor = req.result;\r\n\r\n                        if (cursor) {\r\n                            var value = cursor.value;\r\n                            if (_isEncodedBlob(value)) {\r\n                                value = _decodeBlob(value);\r\n                            }\r\n                            var result = iterator(value, cursor.key, iterationNumber++);\r\n\r\n                            // when the iterator callback returns any\r\n                            // (non-`undefined`) value, then we stop\r\n                            // the iteration immediately\r\n                            if (result !== void 0) {\r\n                                resolve(result);\r\n                            } else {\r\n                                cursor[\"continue\"]();\r\n                            }\r\n                        } else {\r\n                            resolve();\r\n                        }\r\n                    };\r\n\r\n                    req.onerror = function () {\r\n                        reject(req.error);\r\n                    };\r\n                } catch (e) {\r\n                    reject(e);\r\n                }\r\n            });\r\n        })[\"catch\"](reject);\r\n    });\r\n\r\n    executeCallback(promise, callback);\r\n\r\n    return promise;\r\n}\r\n\r\nfunction setItem(key, value, callback) {\r\n    var self = this;\r\n\r\n    key = normalizeKey(key);\r\n\r\n    var promise = new Promise$1(function (resolve, reject) {\r\n        var dbInfo;\r\n        self.ready().then(function () {\r\n            dbInfo = self._dbInfo;\r\n            if (toString.call(value) === '[object Blob]') {\r\n                return _checkBlobSupport(dbInfo.db).then(function (blobSupport) {\r\n                    if (blobSupport) {\r\n                        return value;\r\n                    }\r\n                    return _encodeBlob(value);\r\n                });\r\n            }\r\n            return value;\r\n        }).then(function (value) {\r\n            createTransaction(self._dbInfo, READ_WRITE, function (err, transaction) {\r\n                if (err) {\r\n                    return reject(err);\r\n                }\r\n\r\n                try {\r\n                    var store = transaction.objectStore(self._dbInfo.storeName);\r\n\r\n                    // The reason we don't _save_ null is because IE 10 does\r\n                    // not support saving the `null` type in IndexedDB. How\r\n                    // ironic, given the bug below!\r\n                    // See: https://github.com/mozilla/localForage/issues/161\r\n                    if (value === null) {\r\n                        value = undefined;\r\n                    }\r\n\r\n                    var req = store.put(value, key);\r\n\r\n                    transaction.oncomplete = function () {\r\n                        // Cast to undefined so the value passed to\r\n                        // callback/promise is the same as what one would get out\r\n                        // of `getItem()` later. This leads to some weirdness\r\n                        // (setItem('foo', undefined) will return `null`), but\r\n                        // it's not my fault localStorage is our baseline and that\r\n                        // it's weird.\r\n                        if (value === undefined) {\r\n                            value = null;\r\n                        }\r\n\r\n                        resolve(value);\r\n                    };\r\n                    transaction.onabort = transaction.onerror = function () {\r\n                        var err = req.error ? req.error : req.transaction.error;\r\n                        reject(err);\r\n                    };\r\n                } catch (e) {\r\n                    reject(e);\r\n                }\r\n            });\r\n        })[\"catch\"](reject);\r\n    });\r\n\r\n    executeCallback(promise, callback);\r\n    return promise;\r\n}\r\n\r\nfunction removeItem(key, callback) {\r\n    var self = this;\r\n\r\n    key = normalizeKey(key);\r\n\r\n    var promise = new Promise$1(function (resolve, reject) {\r\n        self.ready().then(function () {\r\n            createTransaction(self._dbInfo, READ_WRITE, function (err, transaction) {\r\n                if (err) {\r\n                    return reject(err);\r\n                }\r\n\r\n                try {\r\n                    var store = transaction.objectStore(self._dbInfo.storeName);\r\n                    // We use a Grunt task to make this safe for IE and some\r\n                    // versions of Android (including those used by Cordova).\r\n                    // Normally IE won't like `.delete()` and will insist on\r\n                    // using `['delete']()`, but we have a build step that\r\n                    // fixes this for us now.\r\n                    var req = store[\"delete\"](key);\r\n                    transaction.oncomplete = function () {\r\n                        resolve();\r\n                    };\r\n\r\n                    transaction.onerror = function () {\r\n                        reject(req.error);\r\n                    };\r\n\r\n                    // The request will be also be aborted if we've exceeded our storage\r\n                    // space.\r\n                    transaction.onabort = function () {\r\n                        var err = req.error ? req.error : req.transaction.error;\r\n                        reject(err);\r\n                    };\r\n                } catch (e) {\r\n                    reject(e);\r\n                }\r\n            });\r\n        })[\"catch\"](reject);\r\n    });\r\n\r\n    executeCallback(promise, callback);\r\n    return promise;\r\n}\r\n\r\nfunction clear(callback) {\r\n    var self = this;\r\n\r\n    var promise = new Promise$1(function (resolve, reject) {\r\n        self.ready().then(function () {\r\n            createTransaction(self._dbInfo, READ_WRITE, function (err, transaction) {\r\n                if (err) {\r\n                    return reject(err);\r\n                }\r\n\r\n                try {\r\n                    var store = transaction.objectStore(self._dbInfo.storeName);\r\n                    var req = store.clear();\r\n\r\n                    transaction.oncomplete = function () {\r\n                        resolve();\r\n                    };\r\n\r\n                    transaction.onabort = transaction.onerror = function () {\r\n                        var err = req.error ? req.error : req.transaction.error;\r\n                        reject(err);\r\n                    };\r\n                } catch (e) {\r\n                    reject(e);\r\n                }\r\n            });\r\n        })[\"catch\"](reject);\r\n    });\r\n\r\n    executeCallback(promise, callback);\r\n    return promise;\r\n}\r\n\r\nfunction length(callback) {\r\n    var self = this;\r\n\r\n    var promise = new Promise$1(function (resolve, reject) {\r\n        self.ready().then(function () {\r\n            createTransaction(self._dbInfo, READ_ONLY, function (err, transaction) {\r\n                if (err) {\r\n                    return reject(err);\r\n                }\r\n\r\n                try {\r\n                    var store = transaction.objectStore(self._dbInfo.storeName);\r\n                    var req = store.count();\r\n\r\n                    req.onsuccess = function () {\r\n                        resolve(req.result);\r\n                    };\r\n\r\n                    req.onerror = function () {\r\n                        reject(req.error);\r\n                    };\r\n                } catch (e) {\r\n                    reject(e);\r\n                }\r\n            });\r\n        })[\"catch\"](reject);\r\n    });\r\n\r\n    executeCallback(promise, callback);\r\n    return promise;\r\n}\r\n\r\nfunction key(n, callback) {\r\n    var self = this;\r\n\r\n    var promise = new Promise$1(function (resolve, reject) {\r\n        if (n < 0) {\r\n            resolve(null);\r\n\r\n            return;\r\n        }\r\n\r\n        self.ready().then(function () {\r\n            createTransaction(self._dbInfo, READ_ONLY, function (err, transaction) {\r\n                if (err) {\r\n                    return reject(err);\r\n                }\r\n\r\n                try {\r\n                    var store = transaction.objectStore(self._dbInfo.storeName);\r\n                    var advanced = false;\r\n                    var req = store.openKeyCursor();\r\n\r\n                    req.onsuccess = function () {\r\n                        var cursor = req.result;\r\n                        if (!cursor) {\r\n                            // this means there weren't enough keys\r\n                            resolve(null);\r\n\r\n                            return;\r\n                        }\r\n\r\n                        if (n === 0) {\r\n                            // We have the first key, return it if that's what they\r\n                            // wanted.\r\n                            resolve(cursor.key);\r\n                        } else {\r\n                            if (!advanced) {\r\n                                // Otherwise, ask the cursor to skip ahead n\r\n                                // records.\r\n                                advanced = true;\r\n                                cursor.advance(n);\r\n                            } else {\r\n                                // When we get here, we've got the nth key.\r\n                                resolve(cursor.key);\r\n                            }\r\n                        }\r\n                    };\r\n\r\n                    req.onerror = function () {\r\n                        reject(req.error);\r\n                    };\r\n                } catch (e) {\r\n                    reject(e);\r\n                }\r\n            });\r\n        })[\"catch\"](reject);\r\n    });\r\n\r\n    executeCallback(promise, callback);\r\n    return promise;\r\n}\r\n\r\nfunction keys(callback) {\r\n    var self = this;\r\n\r\n    var promise = new Promise$1(function (resolve, reject) {\r\n        self.ready().then(function () {\r\n            createTransaction(self._dbInfo, READ_ONLY, function (err, transaction) {\r\n                if (err) {\r\n                    return reject(err);\r\n                }\r\n\r\n                try {\r\n                    var store = transaction.objectStore(self._dbInfo.storeName);\r\n                    var req = store.openKeyCursor();\r\n                    var keys = [];\r\n\r\n                    req.onsuccess = function () {\r\n                        var cursor = req.result;\r\n\r\n                        if (!cursor) {\r\n                            resolve(keys);\r\n                            return;\r\n                        }\r\n\r\n                        keys.push(cursor.key);\r\n                        cursor[\"continue\"]();\r\n                    };\r\n\r\n                    req.onerror = function () {\r\n                        reject(req.error);\r\n                    };\r\n                } catch (e) {\r\n                    reject(e);\r\n                }\r\n            });\r\n        })[\"catch\"](reject);\r\n    });\r\n\r\n    executeCallback(promise, callback);\r\n    return promise;\r\n}\r\n\r\nfunction dropInstance(options, callback) {\r\n    callback = getCallback.apply(this, arguments);\r\n\r\n    var currentConfig = this.config();\r\n    options = typeof options !== 'function' && options || {};\r\n    if (!options.name) {\r\n        options.name = options.name || currentConfig.name;\r\n        options.storeName = options.storeName || currentConfig.storeName;\r\n    }\r\n\r\n    var self = this;\r\n    var promise;\r\n    if (!options.name) {\r\n        promise = Promise$1.reject('Invalid arguments');\r\n    } else {\r\n        var isCurrentDb = options.name === currentConfig.name && self._dbInfo.db;\r\n\r\n        var dbPromise = isCurrentDb ? Promise$1.resolve(self._dbInfo.db) : _getOriginalConnection(options).then(function (db) {\r\n            var dbContext = dbContexts[options.name];\r\n            var forages = dbContext.forages;\r\n            dbContext.db = db;\r\n            for (var i = 0; i < forages.length; i++) {\r\n                forages[i]._dbInfo.db = db;\r\n            }\r\n            return db;\r\n        });\r\n\r\n        if (!options.storeName) {\r\n            promise = dbPromise.then(function (db) {\r\n                _deferReadiness(options);\r\n\r\n                var dbContext = dbContexts[options.name];\r\n                var forages = dbContext.forages;\r\n\r\n                db.close();\r\n                for (var i = 0; i < forages.length; i++) {\r\n                    var forage = forages[i];\r\n                    forage._dbInfo.db = null;\r\n                }\r\n\r\n                var dropDBPromise = new Promise$1(function (resolve, reject) {\r\n                    var req = idb.deleteDatabase(options.name);\r\n\r\n                    req.onerror = function () {\r\n                        var db = req.result;\r\n                        if (db) {\r\n                            db.close();\r\n                        }\r\n                        reject(req.error);\r\n                    };\r\n\r\n                    req.onblocked = function () {\r\n                        // Closing all open connections in onversionchange handler should prevent this situation, but if\r\n                        // we do get here, it just means the request remains pending - eventually it will succeed or error\r\n                        console.warn('dropInstance blocked for database \"' + options.name + '\" until all open connections are closed');\r\n                    };\r\n\r\n                    req.onsuccess = function () {\r\n                        var db = req.result;\r\n                        if (db) {\r\n                            db.close();\r\n                        }\r\n                        resolve(db);\r\n                    };\r\n                });\r\n\r\n                return dropDBPromise.then(function (db) {\r\n                    dbContext.db = db;\r\n                    for (var i = 0; i < forages.length; i++) {\r\n                        var _forage = forages[i];\r\n                        _advanceReadiness(_forage._dbInfo);\r\n                    }\r\n                })[\"catch\"](function (err) {\r\n                    (_rejectReadiness(options, err) || Promise$1.resolve())[\"catch\"](function () {});\r\n                    throw err;\r\n                });\r\n            });\r\n        } else {\r\n            promise = dbPromise.then(function (db) {\r\n                if (!db.objectStoreNames.contains(options.storeName)) {\r\n                    return;\r\n                }\r\n\r\n                var newVersion = db.version + 1;\r\n\r\n                _deferReadiness(options);\r\n\r\n                var dbContext = dbContexts[options.name];\r\n                var forages = dbContext.forages;\r\n\r\n                db.close();\r\n                for (var i = 0; i < forages.length; i++) {\r\n                    var forage = forages[i];\r\n                    forage._dbInfo.db = null;\r\n                    forage._dbInfo.version = newVersion;\r\n                }\r\n\r\n                var dropObjectPromise = new Promise$1(function (resolve, reject) {\r\n                    var req = idb.open(options.name, newVersion);\r\n\r\n                    req.onerror = function (err) {\r\n                        var db = req.result;\r\n                        db.close();\r\n                        reject(err);\r\n                    };\r\n\r\n                    req.onupgradeneeded = function () {\r\n                        var db = req.result;\r\n                        db.deleteObjectStore(options.storeName);\r\n                    };\r\n\r\n                    req.onsuccess = function () {\r\n                        var db = req.result;\r\n                        db.close();\r\n                        resolve(db);\r\n                    };\r\n                });\r\n\r\n                return dropObjectPromise.then(function (db) {\r\n                    dbContext.db = db;\r\n                    for (var j = 0; j < forages.length; j++) {\r\n                        var _forage2 = forages[j];\r\n                        _forage2._dbInfo.db = db;\r\n                        _advanceReadiness(_forage2._dbInfo);\r\n                    }\r\n                })[\"catch\"](function (err) {\r\n                    (_rejectReadiness(options, err) || Promise$1.resolve())[\"catch\"](function () {});\r\n                    throw err;\r\n                });\r\n            });\r\n        }\r\n    }\r\n\r\n    executeCallback(promise, callback);\r\n    return promise;\r\n}\r\n\r\nvar asyncStorage = {\r\n    _driver: 'asyncStorage',\r\n    _initStorage: _initStorage,\r\n    _support: isIndexedDBValid(),\r\n    iterate: iterate,\r\n    getItem: getItem,\r\n    setItem: setItem,\r\n    removeItem: removeItem,\r\n    clear: clear,\r\n    length: length,\r\n    key: key,\r\n    keys: keys,\r\n    dropInstance: dropInstance\r\n};\r\n\r\nfunction isWebSQLValid() {\r\n    return typeof openDatabase === 'function';\r\n}\r\n\r\n// Sadly, the best way to save binary data in WebSQL/localStorage is serializing\r\n// it to Base64, so this is how we store it to prevent very strange errors with less\r\n// verbose ways of binary <-> string data storage.\r\nvar BASE_CHARS = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\r\n\r\nvar BLOB_TYPE_PREFIX = '~~local_forage_type~';\r\nvar BLOB_TYPE_PREFIX_REGEX = /^~~local_forage_type~([^~]+)~/;\r\n\r\nvar SERIALIZED_MARKER = '__lfsc__:';\r\nvar SERIALIZED_MARKER_LENGTH = SERIALIZED_MARKER.length;\r\n\r\n// OMG the serializations!\r\nvar TYPE_ARRAYBUFFER = 'arbf';\r\nvar TYPE_BLOB = 'blob';\r\nvar TYPE_INT8ARRAY = 'si08';\r\nvar TYPE_UINT8ARRAY = 'ui08';\r\nvar TYPE_UINT8CLAMPEDARRAY = 'uic8';\r\nvar TYPE_INT16ARRAY = 'si16';\r\nvar TYPE_INT32ARRAY = 'si32';\r\nvar TYPE_UINT16ARRAY = 'ur16';\r\nvar TYPE_UINT32ARRAY = 'ui32';\r\nvar TYPE_FLOAT32ARRAY = 'fl32';\r\nvar TYPE_FLOAT64ARRAY = 'fl64';\r\nvar TYPE_SERIALIZED_MARKER_LENGTH = SERIALIZED_MARKER_LENGTH + TYPE_ARRAYBUFFER.length;\r\n\r\nvar toString$1 = Object.prototype.toString;\r\n\r\nfunction stringToBuffer(serializedString) {\r\n    // Fill the string into a ArrayBuffer.\r\n    var bufferLength = serializedString.length * 0.75;\r\n    var len = serializedString.length;\r\n    var i;\r\n    var p = 0;\r\n    var encoded1, encoded2, encoded3, encoded4;\r\n\r\n    if (serializedString[serializedString.length - 1] === '=') {\r\n        bufferLength--;\r\n        if (serializedString[serializedString.length - 2] === '=') {\r\n            bufferLength--;\r\n        }\r\n    }\r\n\r\n    var buffer = new ArrayBuffer(bufferLength);\r\n    var bytes = new Uint8Array(buffer);\r\n\r\n    for (i = 0; i < len; i += 4) {\r\n        encoded1 = BASE_CHARS.indexOf(serializedString[i]);\r\n        encoded2 = BASE_CHARS.indexOf(serializedString[i + 1]);\r\n        encoded3 = BASE_CHARS.indexOf(serializedString[i + 2]);\r\n        encoded4 = BASE_CHARS.indexOf(serializedString[i + 3]);\r\n\r\n        /*jslint bitwise: true */\r\n        bytes[p++] = encoded1 << 2 | encoded2 >> 4;\r\n        bytes[p++] = (encoded2 & 15) << 4 | encoded3 >> 2;\r\n        bytes[p++] = (encoded3 & 3) << 6 | encoded4 & 63;\r\n    }\r\n    return buffer;\r\n}\r\n\r\n// Converts a buffer to a string to store, serialized, in the backend\r\n// storage library.\r\nfunction bufferToString(buffer) {\r\n    // base64-arraybuffer\r\n    var bytes = new Uint8Array(buffer);\r\n    var base64String = '';\r\n    var i;\r\n\r\n    for (i = 0; i < bytes.length; i += 3) {\r\n        /*jslint bitwise: true */\r\n        base64String += BASE_CHARS[bytes[i] >> 2];\r\n        base64String += BASE_CHARS[(bytes[i] & 3) << 4 | bytes[i + 1] >> 4];\r\n        base64String += BASE_CHARS[(bytes[i + 1] & 15) << 2 | bytes[i + 2] >> 6];\r\n        base64String += BASE_CHARS[bytes[i + 2] & 63];\r\n    }\r\n\r\n    if (bytes.length % 3 === 2) {\r\n        base64String = base64String.substring(0, base64String.length - 1) + '=';\r\n    } else if (bytes.length % 3 === 1) {\r\n        base64String = base64String.substring(0, base64String.length - 2) + '==';\r\n    }\r\n\r\n    return base64String;\r\n}\r\n\r\n// Serialize a value, afterwards executing a callback (which usually\r\n// instructs the `setItem()` callback/promise to be executed). This is how\r\n// we store binary data with localStorage.\r\nfunction serialize(value, callback) {\r\n    var valueType = '';\r\n    if (value) {\r\n        valueType = toString$1.call(value);\r\n    }\r\n\r\n    // Cannot use `value instanceof ArrayBuffer` or such here, as these\r\n    // checks fail when running the tests using casper.js...\r\n    //\r\n    // TODO: See why those tests fail and use a better solution.\r\n    if (value && (valueType === '[object ArrayBuffer]' || value.buffer && toString$1.call(value.buffer) === '[object ArrayBuffer]')) {\r\n        // Convert binary arrays to a string and prefix the string with\r\n        // a special marker.\r\n        var buffer;\r\n        var marker = SERIALIZED_MARKER;\r\n\r\n        if (value instanceof ArrayBuffer) {\r\n            buffer = value;\r\n            marker += TYPE_ARRAYBUFFER;\r\n        } else {\r\n            buffer = value.buffer;\r\n\r\n            if (valueType === '[object Int8Array]') {\r\n                marker += TYPE_INT8ARRAY;\r\n            } else if (valueType === '[object Uint8Array]') {\r\n                marker += TYPE_UINT8ARRAY;\r\n            } else if (valueType === '[object Uint8ClampedArray]') {\r\n                marker += TYPE_UINT8CLAMPEDARRAY;\r\n            } else if (valueType === '[object Int16Array]') {\r\n                marker += TYPE_INT16ARRAY;\r\n            } else if (valueType === '[object Uint16Array]') {\r\n                marker += TYPE_UINT16ARRAY;\r\n            } else if (valueType === '[object Int32Array]') {\r\n                marker += TYPE_INT32ARRAY;\r\n            } else if (valueType === '[object Uint32Array]') {\r\n                marker += TYPE_UINT32ARRAY;\r\n            } else if (valueType === '[object Float32Array]') {\r\n                marker += TYPE_FLOAT32ARRAY;\r\n            } else if (valueType === '[object Float64Array]') {\r\n                marker += TYPE_FLOAT64ARRAY;\r\n            } else {\r\n                callback(new Error('Failed to get type for BinaryArray'));\r\n            }\r\n        }\r\n\r\n        callback(marker + bufferToString(buffer));\r\n    } else if (valueType === '[object Blob]') {\r\n        // Conver the blob to a binaryArray and then to a string.\r\n        var fileReader = new FileReader();\r\n\r\n        fileReader.onload = function () {\r\n            // Backwards-compatible prefix for the blob type.\r\n            var str = BLOB_TYPE_PREFIX + value.type + '~' + bufferToString(this.result);\r\n\r\n            callback(SERIALIZED_MARKER + TYPE_BLOB + str);\r\n        };\r\n\r\n        fileReader.readAsArrayBuffer(value);\r\n    } else {\r\n        try {\r\n            callback(JSON.stringify(value));\r\n        } catch (e) {\r\n            console.error(\"Couldn't convert value into a JSON string: \", value);\r\n\r\n            callback(null, e);\r\n        }\r\n    }\r\n}\r\n\r\n// Deserialize data we've inserted into a value column/field. We place\r\n// special markers into our strings to mark them as encoded; this isn't\r\n// as nice as a meta field, but it's the only sane thing we can do whilst\r\n// keeping localStorage support intact.\r\n//\r\n// Oftentimes this will just deserialize JSON content, but if we have a\r\n// special marker (SERIALIZED_MARKER, defined above), we will extract\r\n// some kind of arraybuffer/binary data/typed array out of the string.\r\nfunction deserialize(value) {\r\n    // If we haven't marked this string as being specially serialized (i.e.\r\n    // something other than serialized JSON), we can just return it and be\r\n    // done with it.\r\n    if (value.substring(0, SERIALIZED_MARKER_LENGTH) !== SERIALIZED_MARKER) {\r\n        return JSON.parse(value);\r\n    }\r\n\r\n    // The following code deals with deserializing some kind of Blob or\r\n    // TypedArray. First we separate out the type of data we're dealing\r\n    // with from the data itself.\r\n    var serializedString = value.substring(TYPE_SERIALIZED_MARKER_LENGTH);\r\n    var type = value.substring(SERIALIZED_MARKER_LENGTH, TYPE_SERIALIZED_MARKER_LENGTH);\r\n\r\n    var blobType;\r\n    // Backwards-compatible blob type serialization strategy.\r\n    // DBs created with older versions of localForage will simply not have the blob type.\r\n    if (type === TYPE_BLOB && BLOB_TYPE_PREFIX_REGEX.test(serializedString)) {\r\n        var matcher = serializedString.match(BLOB_TYPE_PREFIX_REGEX);\r\n        blobType = matcher[1];\r\n        serializedString = serializedString.substring(matcher[0].length);\r\n    }\r\n    var buffer = stringToBuffer(serializedString);\r\n\r\n    // Return the right type based on the code/type set during\r\n    // serialization.\r\n    switch (type) {\r\n        case TYPE_ARRAYBUFFER:\r\n            return buffer;\r\n        case TYPE_BLOB:\r\n            return createBlob([buffer], { type: blobType });\r\n        case TYPE_INT8ARRAY:\r\n            return new Int8Array(buffer);\r\n        case TYPE_UINT8ARRAY:\r\n            return new Uint8Array(buffer);\r\n        case TYPE_UINT8CLAMPEDARRAY:\r\n            return new Uint8ClampedArray(buffer);\r\n        case TYPE_INT16ARRAY:\r\n            return new Int16Array(buffer);\r\n        case TYPE_UINT16ARRAY:\r\n            return new Uint16Array(buffer);\r\n        case TYPE_INT32ARRAY:\r\n            return new Int32Array(buffer);\r\n        case TYPE_UINT32ARRAY:\r\n            return new Uint32Array(buffer);\r\n        case TYPE_FLOAT32ARRAY:\r\n            return new Float32Array(buffer);\r\n        case TYPE_FLOAT64ARRAY:\r\n            return new Float64Array(buffer);\r\n        default:\r\n            throw new Error('Unkown type: ' + type);\r\n    }\r\n}\r\n\r\nvar localforageSerializer = {\r\n    serialize: serialize,\r\n    deserialize: deserialize,\r\n    stringToBuffer: stringToBuffer,\r\n    bufferToString: bufferToString\r\n};\r\n\r\n/*\r\n * Includes code from:\r\n *\r\n * base64-arraybuffer\r\n * https://github.com/niklasvh/base64-arraybuffer\r\n *\r\n * Copyright (c) 2012 Niklas von Hertzen\r\n * Licensed under the MIT license.\r\n */\r\n\r\nfunction createDbTable(t, dbInfo, callback, errorCallback) {\r\n    t.executeSql('CREATE TABLE IF NOT EXISTS ' + dbInfo.storeName + ' ' + '(id INTEGER PRIMARY KEY, key unique, value)', [], callback, errorCallback);\r\n}\r\n\r\n// Open the WebSQL database (automatically creates one if one didn't\r\n// previously exist), using any options set in the config.\r\nfunction _initStorage$1(options) {\r\n    var self = this;\r\n    var dbInfo = {\r\n        db: null\r\n    };\r\n\r\n    if (options) {\r\n        for (var i in options) {\r\n            dbInfo[i] = typeof options[i] !== 'string' ? options[i].toString() : options[i];\r\n        }\r\n    }\r\n\r\n    var dbInfoPromise = new Promise$1(function (resolve, reject) {\r\n        // Open the database; the openDatabase API will automatically\r\n        // create it for us if it doesn't exist.\r\n        try {\r\n            dbInfo.db = openDatabase(dbInfo.name, String(dbInfo.version), dbInfo.description, dbInfo.size);\r\n        } catch (e) {\r\n            return reject(e);\r\n        }\r\n\r\n        // Create our key/value table if it doesn't exist.\r\n        dbInfo.db.transaction(function (t) {\r\n            createDbTable(t, dbInfo, function () {\r\n                self._dbInfo = dbInfo;\r\n                resolve();\r\n            }, function (t, error) {\r\n                reject(error);\r\n            });\r\n        }, reject);\r\n    });\r\n\r\n    dbInfo.serializer = localforageSerializer;\r\n    return dbInfoPromise;\r\n}\r\n\r\nfunction tryExecuteSql(t, dbInfo, sqlStatement, args, callback, errorCallback) {\r\n    t.executeSql(sqlStatement, args, callback, function (t, error) {\r\n        if (error.code === error.SYNTAX_ERR) {\r\n            t.executeSql('SELECT name FROM sqlite_master ' + \"WHERE type='table' AND name = ?\", [dbInfo.storeName], function (t, results) {\r\n                if (!results.rows.length) {\r\n                    // if the table is missing (was deleted)\r\n                    // re-create it table and retry\r\n                    createDbTable(t, dbInfo, function () {\r\n                        t.executeSql(sqlStatement, args, callback, errorCallback);\r\n                    }, errorCallback);\r\n                } else {\r\n                    errorCallback(t, error);\r\n                }\r\n            }, errorCallback);\r\n        } else {\r\n            errorCallback(t, error);\r\n        }\r\n    }, errorCallback);\r\n}\r\n\r\nfunction getItem$1(key, callback) {\r\n    var self = this;\r\n\r\n    key = normalizeKey(key);\r\n\r\n    var promise = new Promise$1(function (resolve, reject) {\r\n        self.ready().then(function () {\r\n            var dbInfo = self._dbInfo;\r\n            dbInfo.db.transaction(function (t) {\r\n                tryExecuteSql(t, dbInfo, 'SELECT * FROM ' + dbInfo.storeName + ' WHERE key = ? LIMIT 1', [key], function (t, results) {\r\n                    var result = results.rows.length ? results.rows.item(0).value : null;\r\n\r\n                    // Check to see if this is serialized content we need to\r\n                    // unpack.\r\n                    if (result) {\r\n                        result = dbInfo.serializer.deserialize(result);\r\n                    }\r\n\r\n                    resolve(result);\r\n                }, function (t, error) {\r\n                    reject(error);\r\n                });\r\n            });\r\n        })[\"catch\"](reject);\r\n    });\r\n\r\n    executeCallback(promise, callback);\r\n    return promise;\r\n}\r\n\r\nfunction iterate$1(iterator, callback) {\r\n    var self = this;\r\n\r\n    var promise = new Promise$1(function (resolve, reject) {\r\n        self.ready().then(function () {\r\n            var dbInfo = self._dbInfo;\r\n\r\n            dbInfo.db.transaction(function (t) {\r\n                tryExecuteSql(t, dbInfo, 'SELECT * FROM ' + dbInfo.storeName, [], function (t, results) {\r\n                    var rows = results.rows;\r\n                    var length = rows.length;\r\n\r\n                    for (var i = 0; i < length; i++) {\r\n                        var item = rows.item(i);\r\n                        var result = item.value;\r\n\r\n                        // Check to see if this is serialized content\r\n                        // we need to unpack.\r\n                        if (result) {\r\n                            result = dbInfo.serializer.deserialize(result);\r\n                        }\r\n\r\n                        result = iterator(result, item.key, i + 1);\r\n\r\n                        // void(0) prevents problems with redefinition\r\n                        // of `undefined`.\r\n                        if (result !== void 0) {\r\n                            resolve(result);\r\n                            return;\r\n                        }\r\n                    }\r\n\r\n                    resolve();\r\n                }, function (t, error) {\r\n                    reject(error);\r\n                });\r\n            });\r\n        })[\"catch\"](reject);\r\n    });\r\n\r\n    executeCallback(promise, callback);\r\n    return promise;\r\n}\r\n\r\nfunction _setItem(key, value, callback, retriesLeft) {\r\n    var self = this;\r\n\r\n    key = normalizeKey(key);\r\n\r\n    var promise = new Promise$1(function (resolve, reject) {\r\n        self.ready().then(function () {\r\n            // The localStorage API doesn't return undefined values in an\r\n            // \"expected\" way, so undefined is always cast to null in all\r\n            // drivers. See: https://github.com/mozilla/localForage/pull/42\r\n            if (value === undefined) {\r\n                value = null;\r\n            }\r\n\r\n            // Save the original value to pass to the callback.\r\n            var originalValue = value;\r\n\r\n            var dbInfo = self._dbInfo;\r\n            dbInfo.serializer.serialize(value, function (value, error) {\r\n                if (error) {\r\n                    reject(error);\r\n                } else {\r\n                    dbInfo.db.transaction(function (t) {\r\n                        tryExecuteSql(t, dbInfo, 'INSERT OR REPLACE INTO ' + dbInfo.storeName + ' ' + '(key, value) VALUES (?, ?)', [key, value], function () {\r\n                            resolve(originalValue);\r\n                        }, function (t, error) {\r\n                            reject(error);\r\n                        });\r\n                    }, function (sqlError) {\r\n                        // The transaction failed; check\r\n                        // to see if it's a quota error.\r\n                        if (sqlError.code === sqlError.QUOTA_ERR) {\r\n                            // We reject the callback outright for now, but\r\n                            // it's worth trying to re-run the transaction.\r\n                            // Even if the user accepts the prompt to use\r\n                            // more storage on Safari, this error will\r\n                            // be called.\r\n                            //\r\n                            // Try to re-run the transaction.\r\n                            if (retriesLeft > 0) {\r\n                                resolve(_setItem.apply(self, [key, originalValue, callback, retriesLeft - 1]));\r\n                                return;\r\n                            }\r\n                            reject(sqlError);\r\n                        }\r\n                    });\r\n                }\r\n            });\r\n        })[\"catch\"](reject);\r\n    });\r\n\r\n    executeCallback(promise, callback);\r\n    return promise;\r\n}\r\n\r\nfunction setItem$1(key, value, callback) {\r\n    return _setItem.apply(this, [key, value, callback, 1]);\r\n}\r\n\r\nfunction removeItem$1(key, callback) {\r\n    var self = this;\r\n\r\n    key = normalizeKey(key);\r\n\r\n    var promise = new Promise$1(function (resolve, reject) {\r\n        self.ready().then(function () {\r\n            var dbInfo = self._dbInfo;\r\n            dbInfo.db.transaction(function (t) {\r\n                tryExecuteSql(t, dbInfo, 'DELETE FROM ' + dbInfo.storeName + ' WHERE key = ?', [key], function () {\r\n                    resolve();\r\n                }, function (t, error) {\r\n                    reject(error);\r\n                });\r\n            });\r\n        })[\"catch\"](reject);\r\n    });\r\n\r\n    executeCallback(promise, callback);\r\n    return promise;\r\n}\r\n\r\n// Deletes every item in the table.\r\n// TODO: Find out if this resets the AUTO_INCREMENT number.\r\nfunction clear$1(callback) {\r\n    var self = this;\r\n\r\n    var promise = new Promise$1(function (resolve, reject) {\r\n        self.ready().then(function () {\r\n            var dbInfo = self._dbInfo;\r\n            dbInfo.db.transaction(function (t) {\r\n                tryExecuteSql(t, dbInfo, 'DELETE FROM ' + dbInfo.storeName, [], function () {\r\n                    resolve();\r\n                }, function (t, error) {\r\n                    reject(error);\r\n                });\r\n            });\r\n        })[\"catch\"](reject);\r\n    });\r\n\r\n    executeCallback(promise, callback);\r\n    return promise;\r\n}\r\n\r\n// Does a simple `COUNT(key)` to get the number of items stored in\r\n// localForage.\r\nfunction length$1(callback) {\r\n    var self = this;\r\n\r\n    var promise = new Promise$1(function (resolve, reject) {\r\n        self.ready().then(function () {\r\n            var dbInfo = self._dbInfo;\r\n            dbInfo.db.transaction(function (t) {\r\n                // Ahhh, SQL makes this one soooooo easy.\r\n                tryExecuteSql(t, dbInfo, 'SELECT COUNT(key) as c FROM ' + dbInfo.storeName, [], function (t, results) {\r\n                    var result = results.rows.item(0).c;\r\n                    resolve(result);\r\n                }, function (t, error) {\r\n                    reject(error);\r\n                });\r\n            });\r\n        })[\"catch\"](reject);\r\n    });\r\n\r\n    executeCallback(promise, callback);\r\n    return promise;\r\n}\r\n\r\n// Return the key located at key index X; essentially gets the key from a\r\n// `WHERE id = ?`. This is the most efficient way I can think to implement\r\n// this rarely-used (in my experience) part of the API, but it can seem\r\n// inconsistent, because we do `INSERT OR REPLACE INTO` on `setItem()`, so\r\n// the ID of each key will change every time it's updated. Perhaps a stored\r\n// procedure for the `setItem()` SQL would solve this problem?\r\n// TODO: Don't change ID on `setItem()`.\r\nfunction key$1(n, callback) {\r\n    var self = this;\r\n\r\n    var promise = new Promise$1(function (resolve, reject) {\r\n        self.ready().then(function () {\r\n            var dbInfo = self._dbInfo;\r\n            dbInfo.db.transaction(function (t) {\r\n                tryExecuteSql(t, dbInfo, 'SELECT key FROM ' + dbInfo.storeName + ' WHERE id = ? LIMIT 1', [n + 1], function (t, results) {\r\n                    var result = results.rows.length ? results.rows.item(0).key : null;\r\n                    resolve(result);\r\n                }, function (t, error) {\r\n                    reject(error);\r\n                });\r\n            });\r\n        })[\"catch\"](reject);\r\n    });\r\n\r\n    executeCallback(promise, callback);\r\n    return promise;\r\n}\r\n\r\nfunction keys$1(callback) {\r\n    var self = this;\r\n\r\n    var promise = new Promise$1(function (resolve, reject) {\r\n        self.ready().then(function () {\r\n            var dbInfo = self._dbInfo;\r\n            dbInfo.db.transaction(function (t) {\r\n                tryExecuteSql(t, dbInfo, 'SELECT key FROM ' + dbInfo.storeName, [], function (t, results) {\r\n                    var keys = [];\r\n\r\n                    for (var i = 0; i < results.rows.length; i++) {\r\n                        keys.push(results.rows.item(i).key);\r\n                    }\r\n\r\n                    resolve(keys);\r\n                }, function (t, error) {\r\n                    reject(error);\r\n                });\r\n            });\r\n        })[\"catch\"](reject);\r\n    });\r\n\r\n    executeCallback(promise, callback);\r\n    return promise;\r\n}\r\n\r\n// https://www.w3.org/TR/webdatabase/#databases\r\n// > There is no way to enumerate or delete the databases available for an origin from this API.\r\nfunction getAllStoreNames(db) {\r\n    return new Promise$1(function (resolve, reject) {\r\n        db.transaction(function (t) {\r\n            t.executeSql('SELECT name FROM sqlite_master ' + \"WHERE type='table' AND name <> '__WebKitDatabaseInfoTable__'\", [], function (t, results) {\r\n                var storeNames = [];\r\n\r\n                for (var i = 0; i < results.rows.length; i++) {\r\n                    storeNames.push(results.rows.item(i).name);\r\n                }\r\n\r\n                resolve({\r\n                    db: db,\r\n                    storeNames: storeNames\r\n                });\r\n            }, function (t, error) {\r\n                reject(error);\r\n            });\r\n        }, function (sqlError) {\r\n            reject(sqlError);\r\n        });\r\n    });\r\n}\r\n\r\nfunction dropInstance$1(options, callback) {\r\n    callback = getCallback.apply(this, arguments);\r\n\r\n    var currentConfig = this.config();\r\n    options = typeof options !== 'function' && options || {};\r\n    if (!options.name) {\r\n        options.name = options.name || currentConfig.name;\r\n        options.storeName = options.storeName || currentConfig.storeName;\r\n    }\r\n\r\n    var self = this;\r\n    var promise;\r\n    if (!options.name) {\r\n        promise = Promise$1.reject('Invalid arguments');\r\n    } else {\r\n        promise = new Promise$1(function (resolve) {\r\n            var db;\r\n            if (options.name === currentConfig.name) {\r\n                // use the db reference of the current instance\r\n                db = self._dbInfo.db;\r\n            } else {\r\n                db = openDatabase(options.name, '', '', 0);\r\n            }\r\n\r\n            if (!options.storeName) {\r\n                // drop all database tables\r\n                resolve(getAllStoreNames(db));\r\n            } else {\r\n                resolve({\r\n                    db: db,\r\n                    storeNames: [options.storeName]\r\n                });\r\n            }\r\n        }).then(function (operationInfo) {\r\n            return new Promise$1(function (resolve, reject) {\r\n                operationInfo.db.transaction(function (t) {\r\n                    function dropTable(storeName) {\r\n                        return new Promise$1(function (resolve, reject) {\r\n                            t.executeSql('DROP TABLE IF EXISTS ' + storeName, [], function () {\r\n                                resolve();\r\n                            }, function (t, error) {\r\n                                reject(error);\r\n                            });\r\n                        });\r\n                    }\r\n\r\n                    var operations = [];\r\n                    for (var i = 0, len = operationInfo.storeNames.length; i < len; i++) {\r\n                        operations.push(dropTable(operationInfo.storeNames[i]));\r\n                    }\r\n\r\n                    Promise$1.all(operations).then(function () {\r\n                        resolve();\r\n                    })[\"catch\"](function (e) {\r\n                        reject(e);\r\n                    });\r\n                }, function (sqlError) {\r\n                    reject(sqlError);\r\n                });\r\n            });\r\n        });\r\n    }\r\n\r\n    executeCallback(promise, callback);\r\n    return promise;\r\n}\r\n\r\nvar webSQLStorage = {\r\n    _driver: 'webSQLStorage',\r\n    _initStorage: _initStorage$1,\r\n    _support: isWebSQLValid(),\r\n    iterate: iterate$1,\r\n    getItem: getItem$1,\r\n    setItem: setItem$1,\r\n    removeItem: removeItem$1,\r\n    clear: clear$1,\r\n    length: length$1,\r\n    key: key$1,\r\n    keys: keys$1,\r\n    dropInstance: dropInstance$1\r\n};\r\n\r\nfunction isLocalStorageValid() {\r\n    try {\r\n        return typeof localStorage !== 'undefined' && 'setItem' in localStorage &&\r\n        // in IE8 typeof localStorage.setItem === 'object'\r\n        !!localStorage.setItem;\r\n    } catch (e) {\r\n        return false;\r\n    }\r\n}\r\n\r\nfunction _getKeyPrefix(options, defaultConfig) {\r\n    var keyPrefix = options.name + '/';\r\n\r\n    if (options.storeName !== defaultConfig.storeName) {\r\n        keyPrefix += options.storeName + '/';\r\n    }\r\n    return keyPrefix;\r\n}\r\n\r\n// Check if localStorage throws when saving an item\r\nfunction checkIfLocalStorageThrows() {\r\n    var localStorageTestKey = '_localforage_support_test';\r\n\r\n    try {\r\n        localStorage.setItem(localStorageTestKey, true);\r\n        localStorage.removeItem(localStorageTestKey);\r\n\r\n        return false;\r\n    } catch (e) {\r\n        return true;\r\n    }\r\n}\r\n\r\n// Check if localStorage is usable and allows to save an item\r\n// This method checks if localStorage is usable in Safari Private Browsing\r\n// mode, or in any other case where the available quota for localStorage\r\n// is 0 and there wasn't any saved items yet.\r\nfunction _isLocalStorageUsable() {\r\n    return !checkIfLocalStorageThrows() || localStorage.length > 0;\r\n}\r\n\r\n// Config the localStorage backend, using options set in the config.\r\nfunction _initStorage$2(options) {\r\n    var self = this;\r\n    var dbInfo = {};\r\n    if (options) {\r\n        for (var i in options) {\r\n            dbInfo[i] = options[i];\r\n        }\r\n    }\r\n\r\n    dbInfo.keyPrefix = _getKeyPrefix(options, self._defaultConfig);\r\n\r\n    if (!_isLocalStorageUsable()) {\r\n        return Promise$1.reject();\r\n    }\r\n\r\n    self._dbInfo = dbInfo;\r\n    dbInfo.serializer = localforageSerializer;\r\n\r\n    return Promise$1.resolve();\r\n}\r\n\r\n// Remove all keys from the datastore, effectively destroying all data in\r\n// the app's key/value store!\r\nfunction clear$2(callback) {\r\n    var self = this;\r\n    var promise = self.ready().then(function () {\r\n        var keyPrefix = self._dbInfo.keyPrefix;\r\n\r\n        for (var i = localStorage.length - 1; i >= 0; i--) {\r\n            var key = localStorage.key(i);\r\n\r\n            if (key.indexOf(keyPrefix) === 0) {\r\n                localStorage.removeItem(key);\r\n            }\r\n        }\r\n    });\r\n\r\n    executeCallback(promise, callback);\r\n    return promise;\r\n}\r\n\r\n// Retrieve an item from the store. Unlike the original async_storage\r\n// library in Gaia, we don't modify return values at all. If a key's value\r\n// is `undefined`, we pass that value to the callback function.\r\nfunction getItem$2(key, callback) {\r\n    var self = this;\r\n\r\n    key = normalizeKey(key);\r\n\r\n    var promise = self.ready().then(function () {\r\n        var dbInfo = self._dbInfo;\r\n        var result = localStorage.getItem(dbInfo.keyPrefix + key);\r\n\r\n        // If a result was found, parse it from the serialized\r\n        // string into a JS object. If result isn't truthy, the key\r\n        // is likely undefined and we'll pass it straight to the\r\n        // callback.\r\n        if (result) {\r\n            result = dbInfo.serializer.deserialize(result);\r\n        }\r\n\r\n        return result;\r\n    });\r\n\r\n    executeCallback(promise, callback);\r\n    return promise;\r\n}\r\n\r\n// Iterate over all items in the store.\r\nfunction iterate$2(iterator, callback) {\r\n    var self = this;\r\n\r\n    var promise = self.ready().then(function () {\r\n        var dbInfo = self._dbInfo;\r\n        var keyPrefix = dbInfo.keyPrefix;\r\n        var keyPrefixLength = keyPrefix.length;\r\n        var length = localStorage.length;\r\n\r\n        // We use a dedicated iterator instead of the `i` variable below\r\n        // so other keys we fetch in localStorage aren't counted in\r\n        // the `iterationNumber` argument passed to the `iterate()`\r\n        // callback.\r\n        //\r\n        // See: github.com/mozilla/localForage/pull/435#discussion_r38061530\r\n        var iterationNumber = 1;\r\n\r\n        for (var i = 0; i < length; i++) {\r\n            var key = localStorage.key(i);\r\n            if (key.indexOf(keyPrefix) !== 0) {\r\n                continue;\r\n            }\r\n            var value = localStorage.getItem(key);\r\n\r\n            // If a result was found, parse it from the serialized\r\n            // string into a JS object. If result isn't truthy, the\r\n            // key is likely undefined and we'll pass it straight\r\n            // to the iterator.\r\n            if (value) {\r\n                value = dbInfo.serializer.deserialize(value);\r\n            }\r\n\r\n            value = iterator(value, key.substring(keyPrefixLength), iterationNumber++);\r\n\r\n            if (value !== void 0) {\r\n                return value;\r\n            }\r\n        }\r\n    });\r\n\r\n    executeCallback(promise, callback);\r\n    return promise;\r\n}\r\n\r\n// Same as localStorage's key() method, except takes a callback.\r\nfunction key$2(n, callback) {\r\n    var self = this;\r\n    var promise = self.ready().then(function () {\r\n        var dbInfo = self._dbInfo;\r\n        var result;\r\n        try {\r\n            result = localStorage.key(n);\r\n        } catch (error) {\r\n            result = null;\r\n        }\r\n\r\n        // Remove the prefix from the key, if a key is found.\r\n        if (result) {\r\n            result = result.substring(dbInfo.keyPrefix.length);\r\n        }\r\n\r\n        return result;\r\n    });\r\n\r\n    executeCallback(promise, callback);\r\n    return promise;\r\n}\r\n\r\nfunction keys$2(callback) {\r\n    var self = this;\r\n    var promise = self.ready().then(function () {\r\n        var dbInfo = self._dbInfo;\r\n        var length = localStorage.length;\r\n        var keys = [];\r\n\r\n        for (var i = 0; i < length; i++) {\r\n            var itemKey = localStorage.key(i);\r\n            if (itemKey.indexOf(dbInfo.keyPrefix) === 0) {\r\n                keys.push(itemKey.substring(dbInfo.keyPrefix.length));\r\n            }\r\n        }\r\n\r\n        return keys;\r\n    });\r\n\r\n    executeCallback(promise, callback);\r\n    return promise;\r\n}\r\n\r\n// Supply the number of keys in the datastore to the callback function.\r\nfunction length$2(callback) {\r\n    var self = this;\r\n    var promise = self.keys().then(function (keys) {\r\n        return keys.length;\r\n    });\r\n\r\n    executeCallback(promise, callback);\r\n    return promise;\r\n}\r\n\r\n// Remove an item from the store, nice and simple.\r\nfunction removeItem$2(key, callback) {\r\n    var self = this;\r\n\r\n    key = normalizeKey(key);\r\n\r\n    var promise = self.ready().then(function () {\r\n        var dbInfo = self._dbInfo;\r\n        localStorage.removeItem(dbInfo.keyPrefix + key);\r\n    });\r\n\r\n    executeCallback(promise, callback);\r\n    return promise;\r\n}\r\n\r\n// Set a key's value and run an optional callback once the value is set.\r\n// Unlike Gaia's implementation, the callback function is passed the value,\r\n// in case you want to operate on that value only after you're sure it\r\n// saved, or something like that.\r\nfunction setItem$2(key, value, callback) {\r\n    var self = this;\r\n\r\n    key = normalizeKey(key);\r\n\r\n    var promise = self.ready().then(function () {\r\n        // Convert undefined values to null.\r\n        // https://github.com/mozilla/localForage/pull/42\r\n        if (value === undefined) {\r\n            value = null;\r\n        }\r\n\r\n        // Save the original value to pass to the callback.\r\n        var originalValue = value;\r\n\r\n        return new Promise$1(function (resolve, reject) {\r\n            var dbInfo = self._dbInfo;\r\n            dbInfo.serializer.serialize(value, function (value, error) {\r\n                if (error) {\r\n                    reject(error);\r\n                } else {\r\n                    try {\r\n                        localStorage.setItem(dbInfo.keyPrefix + key, value);\r\n                        resolve(originalValue);\r\n                    } catch (e) {\r\n                        // localStorage capacity exceeded.\r\n                        // TODO: Make this a specific error/event.\r\n                        if (e.name === 'QuotaExceededError' || e.name === 'NS_ERROR_DOM_QUOTA_REACHED') {\r\n                            reject(e);\r\n                        }\r\n                        reject(e);\r\n                    }\r\n                }\r\n            });\r\n        });\r\n    });\r\n\r\n    executeCallback(promise, callback);\r\n    return promise;\r\n}\r\n\r\nfunction dropInstance$2(options, callback) {\r\n    callback = getCallback.apply(this, arguments);\r\n\r\n    options = typeof options !== 'function' && options || {};\r\n    if (!options.name) {\r\n        var currentConfig = this.config();\r\n        options.name = options.name || currentConfig.name;\r\n        options.storeName = options.storeName || currentConfig.storeName;\r\n    }\r\n\r\n    var self = this;\r\n    var promise;\r\n    if (!options.name) {\r\n        promise = Promise$1.reject('Invalid arguments');\r\n    } else {\r\n        promise = new Promise$1(function (resolve) {\r\n            if (!options.storeName) {\r\n                resolve(options.name + '/');\r\n            } else {\r\n                resolve(_getKeyPrefix(options, self._defaultConfig));\r\n            }\r\n        }).then(function (keyPrefix) {\r\n            for (var i = localStorage.length - 1; i >= 0; i--) {\r\n                var key = localStorage.key(i);\r\n\r\n                if (key.indexOf(keyPrefix) === 0) {\r\n                    localStorage.removeItem(key);\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    executeCallback(promise, callback);\r\n    return promise;\r\n}\r\n\r\nvar localStorageWrapper = {\r\n    _driver: 'localStorageWrapper',\r\n    _initStorage: _initStorage$2,\r\n    _support: isLocalStorageValid(),\r\n    iterate: iterate$2,\r\n    getItem: getItem$2,\r\n    setItem: setItem$2,\r\n    removeItem: removeItem$2,\r\n    clear: clear$2,\r\n    length: length$2,\r\n    key: key$2,\r\n    keys: keys$2,\r\n    dropInstance: dropInstance$2\r\n};\r\n\r\nvar sameValue = function sameValue(x, y) {\r\n    return x === y || typeof x === 'number' && typeof y === 'number' && isNaN(x) && isNaN(y);\r\n};\r\n\r\nvar includes = function includes(array, searchElement) {\r\n    var len = array.length;\r\n    var i = 0;\r\n    while (i < len) {\r\n        if (sameValue(array[i], searchElement)) {\r\n            return true;\r\n        }\r\n        i++;\r\n    }\r\n\r\n    return false;\r\n};\r\n\r\nvar isArray = Array.isArray || function (arg) {\r\n    return Object.prototype.toString.call(arg) === '[object Array]';\r\n};\r\n\r\n// Drivers are stored here when `defineDriver()` is called.\r\n// They are shared across all instances of localForage.\r\nvar DefinedDrivers = {};\r\n\r\nvar DriverSupport = {};\r\n\r\nvar DefaultDrivers = {\r\n    INDEXEDDB: asyncStorage,\r\n    WEBSQL: webSQLStorage,\r\n    LOCALSTORAGE: localStorageWrapper\r\n};\r\n\r\nvar DefaultDriverOrder = [DefaultDrivers.INDEXEDDB._driver, DefaultDrivers.WEBSQL._driver, DefaultDrivers.LOCALSTORAGE._driver];\r\n\r\nvar OptionalDriverMethods = ['dropInstance'];\r\n\r\nvar LibraryMethods = ['clear', 'getItem', 'iterate', 'key', 'keys', 'length', 'removeItem', 'setItem'].concat(OptionalDriverMethods);\r\n\r\nvar DefaultConfig = {\r\n    description: '',\r\n    driver: DefaultDriverOrder.slice(),\r\n    name: 'localforage',\r\n    // Default DB size is _JUST UNDER_ 5MB, as it's the highest size\r\n    // we can use without a prompt.\r\n    size: 4980736,\r\n    storeName: 'keyvaluepairs',\r\n    version: 1.0\r\n};\r\n\r\nfunction callWhenReady(localForageInstance, libraryMethod) {\r\n    localForageInstance[libraryMethod] = function () {\r\n        var _args = arguments;\r\n        return localForageInstance.ready().then(function () {\r\n            return localForageInstance[libraryMethod].apply(localForageInstance, _args);\r\n        });\r\n    };\r\n}\r\n\r\nfunction extend() {\r\n    for (var i = 1; i < arguments.length; i++) {\r\n        var arg = arguments[i];\r\n\r\n        if (arg) {\r\n            for (var _key in arg) {\r\n                if (arg.hasOwnProperty(_key)) {\r\n                    if (isArray(arg[_key])) {\r\n                        arguments[0][_key] = arg[_key].slice();\r\n                    } else {\r\n                        arguments[0][_key] = arg[_key];\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    return arguments[0];\r\n}\r\n\r\nvar LocalForage = function () {\r\n    function LocalForage(options) {\r\n        _classCallCheck(this, LocalForage);\r\n\r\n        for (var driverTypeKey in DefaultDrivers) {\r\n            if (DefaultDrivers.hasOwnProperty(driverTypeKey)) {\r\n                var driver = DefaultDrivers[driverTypeKey];\r\n                var driverName = driver._driver;\r\n                this[driverTypeKey] = driverName;\r\n\r\n                if (!DefinedDrivers[driverName]) {\r\n                    // we don't need to wait for the promise,\r\n                    // since the default drivers can be defined\r\n                    // in a blocking manner\r\n                    this.defineDriver(driver);\r\n                }\r\n            }\r\n        }\r\n\r\n        this._defaultConfig = extend({}, DefaultConfig);\r\n        this._config = extend({}, this._defaultConfig, options);\r\n        this._driverSet = null;\r\n        this._initDriver = null;\r\n        this._ready = false;\r\n        this._dbInfo = null;\r\n\r\n        this._wrapLibraryMethodsWithReady();\r\n        this.setDriver(this._config.driver)[\"catch\"](function () {});\r\n    }\r\n\r\n    // Set any config values for localForage; can be called anytime before\r\n    // the first API call (e.g. `getItem`, `setItem`).\r\n    // We loop through options so we don't overwrite existing config\r\n    // values.\r\n\r\n\r\n    LocalForage.prototype.config = function config(options) {\r\n        // If the options argument is an object, we use it to set values.\r\n        // Otherwise, we return either a specified config value or all\r\n        // config values.\r\n        if ((typeof options === 'undefined' ? 'undefined' : _typeof(options)) === 'object') {\r\n            // If localforage is ready and fully initialized, we can't set\r\n            // any new configuration values. Instead, we return an error.\r\n            if (this._ready) {\r\n                return new Error(\"Can't call config() after localforage \" + 'has been used.');\r\n            }\r\n\r\n            for (var i in options) {\r\n                if (i === 'storeName') {\r\n                    options[i] = options[i].replace(/\\W/g, '_');\r\n                }\r\n\r\n                if (i === 'version' && typeof options[i] !== 'number') {\r\n                    return new Error('Database version must be a number.');\r\n                }\r\n\r\n                this._config[i] = options[i];\r\n            }\r\n\r\n            // after all config options are set and\r\n            // the driver option is used, try setting it\r\n            if ('driver' in options && options.driver) {\r\n                return this.setDriver(this._config.driver);\r\n            }\r\n\r\n            return true;\r\n        } else if (typeof options === 'string') {\r\n            return this._config[options];\r\n        } else {\r\n            return this._config;\r\n        }\r\n    };\r\n\r\n    // Used to define a custom driver, shared across all instances of\r\n    // localForage.\r\n\r\n\r\n    LocalForage.prototype.defineDriver = function defineDriver(driverObject, callback, errorCallback) {\r\n        var promise = new Promise$1(function (resolve, reject) {\r\n            try {\r\n                var driverName = driverObject._driver;\r\n                var complianceError = new Error('Custom driver not compliant; see ' + 'https://mozilla.github.io/localForage/#definedriver');\r\n\r\n                // A driver name should be defined and not overlap with the\r\n                // library-defined, default drivers.\r\n                if (!driverObject._driver) {\r\n                    reject(complianceError);\r\n                    return;\r\n                }\r\n\r\n                var driverMethods = LibraryMethods.concat('_initStorage');\r\n                for (var i = 0, len = driverMethods.length; i < len; i++) {\r\n                    var driverMethodName = driverMethods[i];\r\n\r\n                    // when the property is there,\r\n                    // it should be a method even when optional\r\n                    var isRequired = !includes(OptionalDriverMethods, driverMethodName);\r\n                    if ((isRequired || driverObject[driverMethodName]) && typeof driverObject[driverMethodName] !== 'function') {\r\n                        reject(complianceError);\r\n                        return;\r\n                    }\r\n                }\r\n\r\n                var configureMissingMethods = function configureMissingMethods() {\r\n                    var methodNotImplementedFactory = function methodNotImplementedFactory(methodName) {\r\n                        return function () {\r\n                            var error = new Error('Method ' + methodName + ' is not implemented by the current driver');\r\n                            var promise = Promise$1.reject(error);\r\n                            executeCallback(promise, arguments[arguments.length - 1]);\r\n                            return promise;\r\n                        };\r\n                    };\r\n\r\n                    for (var _i = 0, _len = OptionalDriverMethods.length; _i < _len; _i++) {\r\n                        var optionalDriverMethod = OptionalDriverMethods[_i];\r\n                        if (!driverObject[optionalDriverMethod]) {\r\n                            driverObject[optionalDriverMethod] = methodNotImplementedFactory(optionalDriverMethod);\r\n                        }\r\n                    }\r\n                };\r\n\r\n                configureMissingMethods();\r\n\r\n                var setDriverSupport = function setDriverSupport(support) {\r\n                    if (DefinedDrivers[driverName]) {\r\n                        console.info('Redefining LocalForage driver: ' + driverName);\r\n                    }\r\n                    DefinedDrivers[driverName] = driverObject;\r\n                    DriverSupport[driverName] = support;\r\n                    // don't use a then, so that we can define\r\n                    // drivers that have simple _support methods\r\n                    // in a blocking manner\r\n                    resolve();\r\n                };\r\n\r\n                if ('_support' in driverObject) {\r\n                    if (driverObject._support && typeof driverObject._support === 'function') {\r\n                        driverObject._support().then(setDriverSupport, reject);\r\n                    } else {\r\n                        setDriverSupport(!!driverObject._support);\r\n                    }\r\n                } else {\r\n                    setDriverSupport(true);\r\n                }\r\n            } catch (e) {\r\n                reject(e);\r\n            }\r\n        });\r\n\r\n        executeTwoCallbacks(promise, callback, errorCallback);\r\n        return promise;\r\n    };\r\n\r\n    LocalForage.prototype.driver = function driver() {\r\n        return this._driver || null;\r\n    };\r\n\r\n    LocalForage.prototype.getDriver = function getDriver(driverName, callback, errorCallback) {\r\n        var getDriverPromise = DefinedDrivers[driverName] ? Promise$1.resolve(DefinedDrivers[driverName]) : Promise$1.reject(new Error('Driver not found.'));\r\n\r\n        executeTwoCallbacks(getDriverPromise, callback, errorCallback);\r\n        return getDriverPromise;\r\n    };\r\n\r\n    LocalForage.prototype.getSerializer = function getSerializer(callback) {\r\n        var serializerPromise = Promise$1.resolve(localforageSerializer);\r\n        executeTwoCallbacks(serializerPromise, callback);\r\n        return serializerPromise;\r\n    };\r\n\r\n    LocalForage.prototype.ready = function ready(callback) {\r\n        var self = this;\r\n\r\n        var promise = self._driverSet.then(function () {\r\n            if (self._ready === null) {\r\n                self._ready = self._initDriver();\r\n            }\r\n\r\n            return self._ready;\r\n        });\r\n\r\n        executeTwoCallbacks(promise, callback, callback);\r\n        return promise;\r\n    };\r\n\r\n    LocalForage.prototype.setDriver = function setDriver(drivers, callback, errorCallback) {\r\n        var self = this;\r\n\r\n        if (!isArray(drivers)) {\r\n            drivers = [drivers];\r\n        }\r\n\r\n        var supportedDrivers = this._getSupportedDrivers(drivers);\r\n\r\n        function setDriverToConfig() {\r\n            self._config.driver = self.driver();\r\n        }\r\n\r\n        function extendSelfWithDriver(driver) {\r\n            self._extend(driver);\r\n            setDriverToConfig();\r\n\r\n            self._ready = self._initStorage(self._config);\r\n            return self._ready;\r\n        }\r\n\r\n        function initDriver(supportedDrivers) {\r\n            return function () {\r\n                var currentDriverIndex = 0;\r\n\r\n                function driverPromiseLoop() {\r\n                    while (currentDriverIndex < supportedDrivers.length) {\r\n                        var driverName = supportedDrivers[currentDriverIndex];\r\n                        currentDriverIndex++;\r\n\r\n                        self._dbInfo = null;\r\n                        self._ready = null;\r\n\r\n                        return self.getDriver(driverName).then(extendSelfWithDriver)[\"catch\"](driverPromiseLoop);\r\n                    }\r\n\r\n                    setDriverToConfig();\r\n                    var error = new Error('No available storage method found.');\r\n                    self._driverSet = Promise$1.reject(error);\r\n                    return self._driverSet;\r\n                }\r\n\r\n                return driverPromiseLoop();\r\n            };\r\n        }\r\n\r\n        // There might be a driver initialization in progress\r\n        // so wait for it to finish in order to avoid a possible\r\n        // race condition to set _dbInfo\r\n        var oldDriverSetDone = this._driverSet !== null ? this._driverSet[\"catch\"](function () {\r\n            return Promise$1.resolve();\r\n        }) : Promise$1.resolve();\r\n\r\n        this._driverSet = oldDriverSetDone.then(function () {\r\n            var driverName = supportedDrivers[0];\r\n            self._dbInfo = null;\r\n            self._ready = null;\r\n\r\n            return self.getDriver(driverName).then(function (driver) {\r\n                self._driver = driver._driver;\r\n                setDriverToConfig();\r\n                self._wrapLibraryMethodsWithReady();\r\n                self._initDriver = initDriver(supportedDrivers);\r\n            });\r\n        })[\"catch\"](function () {\r\n            setDriverToConfig();\r\n            var error = new Error('No available storage method found.');\r\n            self._driverSet = Promise$1.reject(error);\r\n            return self._driverSet;\r\n        });\r\n\r\n        executeTwoCallbacks(this._driverSet, callback, errorCallback);\r\n        return this._driverSet;\r\n    };\r\n\r\n    LocalForage.prototype.supports = function supports(driverName) {\r\n        return !!DriverSupport[driverName];\r\n    };\r\n\r\n    LocalForage.prototype._extend = function _extend(libraryMethodsAndProperties) {\r\n        extend(this, libraryMethodsAndProperties);\r\n    };\r\n\r\n    LocalForage.prototype._getSupportedDrivers = function _getSupportedDrivers(drivers) {\r\n        var supportedDrivers = [];\r\n        for (var i = 0, len = drivers.length; i < len; i++) {\r\n            var driverName = drivers[i];\r\n            if (this.supports(driverName)) {\r\n                supportedDrivers.push(driverName);\r\n            }\r\n        }\r\n        return supportedDrivers;\r\n    };\r\n\r\n    LocalForage.prototype._wrapLibraryMethodsWithReady = function _wrapLibraryMethodsWithReady() {\r\n        // Add a stub for each driver API method that delays the call to the\r\n        // corresponding driver method until localForage is ready. These stubs\r\n        // will be replaced by the driver methods as soon as the driver is\r\n        // loaded, so there is no performance impact.\r\n        for (var i = 0, len = LibraryMethods.length; i < len; i++) {\r\n            callWhenReady(this, LibraryMethods[i]);\r\n        }\r\n    };\r\n\r\n    LocalForage.prototype.createInstance = function createInstance(options) {\r\n        return new LocalForage(options);\r\n    };\r\n\r\n    return LocalForage;\r\n}();\r\n\r\n// The actual localForage object that we expose as a module or via a\r\n// global. It's extended by pulling in one of our other libraries.\r\n\r\n\r\nvar localforage_js = new LocalForage();\r\n\r\nmodule.exports = localforage_js;\r\n\r\n},{\"3\":3}]},{},[4])(4)\r\n});"]}