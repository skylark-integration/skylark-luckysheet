{"version":3,"sources":["vendors/numeral.js"],"names":["define","numeral","_","decimal","binary","unformatRegex","formats","locales","defaults","currentLocale","zeroFormat","nullFormat","defaultFormat","scalePercentBy100","options","Numeral","input","number","this","_input","_value","value","kind","unformatFunction","regexp","isNumeral","isNaN","replace","length","regexps","unformat","match","stringToNumber","Number","version","obj","numberToFormat","format","roundingFunction","leadingCount","abbrForce","abs","int","precision","signed","thousands","output","locale","negP","optDec","abbr","neg","Math","includes","indexOf","RegExp","abbreviations","trillion","billion","million","thousand","toString","split","toFixed","delimiters","slice","String","i","string","abbreviation","stringOriginal","currency","symbol","pow","min","search","insert","subString","start","reduce","array","callback","TypeError","t","Object","len","k","arguments","multiplier","x","parts","correctionFactor","Array","prototype","call","accum","next","mn","maxDecimals","optionals","boundedPrecision","optionalsRegExp","power","splitValue","minDecimals","max","key","toLowerCase","localeData","Error","reset","property","register","type","name","validate","val","culture","_decimalSep","_thousandSep","_currSymbol","_valArray","_abbrObj","_thousandRegEx","temp","console","warn","trim","e","substr","fn","clone","inputString","formatFunction","round","set","add","corrFactor","curr","currI","O","subtract","multiply","divide","difference","ordinal","b","space","splice","join","base","suffixes","concat","filter","item","bytes","suffix","bytesMultiplier","symbols","before","after","toExponential","hours","floor","minutes","seconds","timeArray"],"mappings":"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","file":"../../vendors/numeral.js","sourcesContent":["define(function () {\r\n\r\n/*! @preserve\r\n * numeral.js\r\n * version : 2.0.6\r\n * author : Adam Draper\r\n * license : MIT\r\n * http://adamwdraper.github.com/Numeral-js/\r\n */\r\n     /************************************\r\n        Variables\r\n    ************************************/\r\n\r\n    var numeral,\r\n        _,\r\n        VERSION = '2.0.6',\r\n        formats = {},\r\n        locales = {},\r\n        defaults = {\r\n            currentLocale: 'en',\r\n            zeroFormat: null,\r\n            nullFormat: null,\r\n            defaultFormat: '0,0',\r\n            scalePercentBy100: true\r\n        },\r\n        options = {\r\n            currentLocale: defaults.currentLocale,\r\n            zeroFormat: defaults.zeroFormat,\r\n            nullFormat: defaults.nullFormat,\r\n            defaultFormat: defaults.defaultFormat,\r\n            scalePercentBy100: defaults.scalePercentBy100\r\n        };\r\n\r\n\r\n    /************************************\r\n        Constructors\r\n    ************************************/\r\n\r\n    // Numeral prototype object\r\n    function Numeral(input, number) {\r\n        this._input = input;\r\n\r\n        this._value = number;\r\n    }\r\n\r\n    numeral = function(input) {\r\n        var value,\r\n            kind,\r\n            unformatFunction,\r\n            regexp;\r\n\r\n        if (numeral.isNumeral(input)) {\r\n            value = input.value();\r\n        } else if (input === 0 || typeof input === 'undefined') {\r\n            value = 0;\r\n        } else if (input === null || _.isNaN(input)) {\r\n            value = null;\r\n        } else if (typeof input === 'string') {\r\n            if (options.zeroFormat && input === options.zeroFormat) {\r\n                value = 0;\r\n            } else if (options.nullFormat && input === options.nullFormat || !input.replace(/[^0-9]+/g, '').length) {\r\n                value = null;\r\n            } else {\r\n                for (kind in formats) {\r\n                    regexp = typeof formats[kind].regexps.unformat === 'function' ? formats[kind].regexps.unformat() : formats[kind].regexps.unformat;\r\n\r\n                    if (regexp && input.match(regexp)) {\r\n                        unformatFunction = formats[kind].unformat;\r\n\r\n                        break;\r\n                    }\r\n                }\r\n\r\n                unformatFunction = unformatFunction || numeral._.stringToNumber;\r\n\r\n                value = unformatFunction(input);\r\n            }\r\n        } else {\r\n            value = Number(input)|| null;\r\n        }\r\n\r\n        return new Numeral(input, value);\r\n    };\r\n\r\n    // version number\r\n    numeral.version = VERSION;\r\n\r\n    // compare numeral object\r\n    numeral.isNumeral = function(obj) {\r\n        return obj instanceof Numeral;\r\n    };\r\n\r\n    // helper functions\r\n    numeral._ = _ = {\r\n        // formats numbers separators, decimals places, signs, abbreviations\r\n        numberToFormat: function(value, format, roundingFunction) {\r\n            var locale = locales[numeral.options.currentLocale],\r\n                negP = false,\r\n                optDec = false,\r\n                leadingCount = 0,\r\n                abbr = '',\r\n                trillion = 1000000000000,\r\n                billion = 1000000000,\r\n                million = 1000000,\r\n                thousand = 1000,\r\n                decimal = '',\r\n                neg = false,\r\n                abbrForce, // force abbreviation\r\n                abs,\r\n                min,\r\n                max,\r\n                power,\r\n                int,\r\n                precision,\r\n                signed,\r\n                thousands,\r\n                output;\r\n\r\n            // make sure we never format a null value\r\n            value = value || 0;\r\n\r\n            abs = Math.abs(value);\r\n\r\n            // see if we should use parentheses for negative number or if we should prefix with a sign\r\n            // if both are present we default to parentheses\r\n            if (numeral._.includes(format, '(')) {\r\n                negP = true;\r\n                format = format.replace(/[\\(|\\)]/g, '');\r\n            } else if (numeral._.includes(format, '+') || numeral._.includes(format, '-')) {\r\n                signed = numeral._.includes(format, '+') ? format.indexOf('+') : value < 0 ? format.indexOf('-') : -1;\r\n                format = format.replace(/[\\+|\\-]/g, '');\r\n            }\r\n\r\n            // see if abbreviation is wanted\r\n            if (numeral._.includes(format, 'a')) {\r\n                abbrForce = format.match(/a(k|m|b|t)?/);\r\n\r\n                abbrForce = abbrForce ? abbrForce[1] : false;\r\n\r\n                // check for space before abbreviation\r\n                if (numeral._.includes(format, ' a')) {\r\n                    abbr = ' ';\r\n                }\r\n\r\n                format = format.replace(new RegExp(abbr + 'a[kmbt]?'), '');\r\n\r\n                if (abs >= trillion && !abbrForce || abbrForce === 't') {\r\n                    // trillion\r\n                    abbr += locale.abbreviations.trillion;\r\n                    value = value / trillion;\r\n                } else if (abs < trillion && abs >= billion && !abbrForce || abbrForce === 'b') {\r\n                    // billion\r\n                    abbr += locale.abbreviations.billion;\r\n                    value = value / billion;\r\n                } else if (abs < billion && abs >= million && !abbrForce || abbrForce === 'm') {\r\n                    // million\r\n                    abbr += locale.abbreviations.million;\r\n                    value = value / million;\r\n                } else if (abs < million && abs >= thousand && !abbrForce || abbrForce === 'k') {\r\n                    // thousand\r\n                    abbr += locale.abbreviations.thousand;\r\n                    value = value / thousand;\r\n                }\r\n            }\r\n\r\n            // check for optional decimals\r\n            if (numeral._.includes(format, '[.]')) {\r\n                optDec = true;\r\n                format = format.replace('[.]', '.');\r\n            }\r\n\r\n            // break number and format\r\n            int = value.toString().split('.')[0];\r\n            precision = format.split('.')[1];\r\n            thousands = format.indexOf(',');\r\n            leadingCount = (format.split('.')[0].split(',')[0].match(/0/g) || []).length;\r\n\r\n            if (precision) {\r\n                if (numeral._.includes(precision, '[')) {\r\n                    precision = precision.replace(']', '');\r\n                    precision = precision.split('[');\r\n                    decimal = numeral._.toFixed(value, (precision[0].length + precision[1].length), roundingFunction, precision[1].length);\r\n                } else {\r\n                    decimal = numeral._.toFixed(value, precision.length, roundingFunction);\r\n                }\r\n\r\n                int = decimal.split('.')[0];\r\n\r\n                if (numeral._.includes(decimal, '.')) {\r\n                    decimal = locale.delimiters.decimal + decimal.split('.')[1];\r\n                } else {\r\n                    decimal = '';\r\n                }\r\n\r\n                if (optDec && Number(decimal.slice(1)) === 0) {\r\n                    decimal = '';\r\n                }\r\n            } else {\r\n                int = numeral._.toFixed(value, 0, roundingFunction);\r\n            }\r\n\r\n            // check abbreviation again after rounding\r\n            if (abbr && !abbrForce && Number(int) >= 1000 && abbr !== locale.abbreviations.trillion) {\r\n                int = String(Number(int) / 1000);\r\n\r\n                switch (abbr) {\r\n                    case locale.abbreviations.thousand:\r\n                        abbr = locale.abbreviations.million;\r\n                        break;\r\n                    case locale.abbreviations.million:\r\n                        abbr = locale.abbreviations.billion;\r\n                        break;\r\n                    case locale.abbreviations.billion:\r\n                        abbr = locale.abbreviations.trillion;\r\n                        break;\r\n                }\r\n            }\r\n\r\n\r\n            // format number\r\n            if (numeral._.includes(int, '-')) {\r\n                int = int.slice(1);\r\n                neg = true;\r\n            }\r\n\r\n            if (int.length < leadingCount) {\r\n                for (var i = leadingCount - int.length; i > 0; i--) {\r\n                    int = '0' + int;\r\n                }\r\n            }\r\n\r\n            if (thousands > -1) {\r\n                int = int.toString().replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, '$1' + locale.delimiters.thousands);\r\n            }\r\n\r\n            if (format.indexOf('.') === 0) {\r\n                int = '';\r\n            }\r\n\r\n            output = int + decimal + (abbr ? abbr : '');\r\n\r\n            if (negP) {\r\n                output = (negP && neg ? '(' : '') + output + (negP && neg ? ')' : '');\r\n            } else {\r\n                if (signed >= 0) {\r\n                    output = signed === 0 ? (neg ? '-' : '+') + output : output + (neg ? '-' : '+');\r\n                } else if (neg) {\r\n                    output = '-' + output;\r\n                }\r\n            }\r\n\r\n            return output;\r\n        },\r\n        // unformats numbers separators, decimals places, signs, abbreviations\r\n        stringToNumber: function(string) {\r\n            var locale = locales[options.currentLocale],\r\n                stringOriginal = string,\r\n                abbreviations = {\r\n                    thousand: 3,\r\n                    million: 6,\r\n                    billion: 9,\r\n                    trillion: 12\r\n                },\r\n                abbreviation,\r\n                value,\r\n                i,\r\n                regexp;\r\n\r\n            if (options.zeroFormat && string === options.zeroFormat) {\r\n                value = 0;\r\n            } else if (options.nullFormat && string === options.nullFormat || !string.replace(/[^0-9]+/g, '').length) {\r\n                value = null;\r\n            } else {\r\n                value = 1;\r\n\r\n                if (locale.delimiters.decimal !== '.') {\r\n                    string = string.replace(/\\./g, '').replace(locale.delimiters.decimal, '.');\r\n                }\r\n\r\n                for (abbreviation in abbreviations) {\r\n                    regexp = new RegExp('[^a-zA-Z]' + locale.abbreviations[abbreviation] + '(?:\\\\)|(\\\\' + locale.currency.symbol + ')?(?:\\\\))?)?$');\r\n\r\n                    if (stringOriginal.match(regexp)) {\r\n                        value *= Math.pow(10, abbreviations[abbreviation]);\r\n                        break;\r\n                    }\r\n                }\r\n\r\n                // check for negative number\r\n                value *= (string.split('-').length + Math.min(string.split('(').length - 1, string.split(')').length - 1)) % 2 ? 1 : -1;\r\n\r\n                // remove non numbers\r\n                string = string.replace(/[^0-9\\.]+/g, '');\r\n\r\n                value *= Number(string);\r\n            }\r\n\r\n            return value;\r\n        },\r\n        isNaN: function(value) {\r\n            return typeof value === 'number' && isNaN(value);\r\n        },\r\n        includes: function(string, search) {\r\n            return string.indexOf(search) !== -1;\r\n        },\r\n        insert: function(string, subString, start) {\r\n            return string.slice(0, start) + subString + string.slice(start);\r\n        },\r\n        reduce: function(array, callback /*, initialValue*/) {\r\n            if (this === null) {\r\n                throw new TypeError('Array.prototype.reduce called on null or undefined');\r\n            }\r\n\r\n            if (typeof callback !== 'function') {\r\n                throw new TypeError(callback + ' is not a function');\r\n            }\r\n\r\n            var t = Object(array),\r\n                len = t.length >>> 0,\r\n                k = 0,\r\n                value;\r\n\r\n            if (arguments.length === 3) {\r\n                value = arguments[2];\r\n            } else {\r\n                while (k < len && !(k in t)) {\r\n                    k++;\r\n                }\r\n\r\n                if (k >= len) {\r\n                    throw new TypeError('Reduce of empty array with no initial value');\r\n                }\r\n\r\n                value = t[k++];\r\n            }\r\n            for (; k < len; k++) {\r\n                if (k in t) {\r\n                    value = callback(value, t[k], k, t);\r\n                }\r\n            }\r\n            return value;\r\n        },\r\n        /**\r\n         * Computes the multiplier necessary to make x >= 1,\r\n         * effectively eliminating miscalculations caused by\r\n         * finite precision.\r\n         */\r\n        multiplier: function (x) {\r\n            var parts = x.toString().split('.');\r\n\r\n            return parts.length < 2 ? 1 : Math.pow(10, parts[1].length);\r\n        },\r\n        /**\r\n         * Given a variable number of arguments, returns the maximum\r\n         * multiplier that must be used to normalize an operation involving\r\n         * all of them.\r\n         */\r\n        correctionFactor: function () {\r\n            var args = Array.prototype.slice.call(arguments);\r\n\r\n            return args.reduce(function(accum, next) {\r\n                var mn = _.multiplier(next);\r\n                return accum > mn ? accum : mn;\r\n            }, 1);\r\n        },\r\n        /**\r\n         * Implementation of toFixed() that treats floats more like decimals\r\n         *\r\n         * Fixes binary rounding issues (eg. (0.615).toFixed(2) === '0.61') that present\r\n         * problems for accounting- and finance-related software.\r\n         */\r\n        toFixed: function(value, maxDecimals, roundingFunction, optionals) {\r\n            var splitValue = value.toString().split('.'),\r\n                minDecimals = maxDecimals - (optionals || 0),\r\n                boundedPrecision,\r\n                optionalsRegExp,\r\n                power,\r\n                output;\r\n\r\n            // Use the smallest precision value possible to avoid errors from floating point representation\r\n            if (splitValue.length === 2) {\r\n              boundedPrecision = Math.min(Math.max(splitValue[1].length, minDecimals), maxDecimals);\r\n            } else {\r\n              boundedPrecision = minDecimals;\r\n            }\r\n\r\n            power = Math.pow(10, boundedPrecision);\r\n\r\n            // Multiply up by precision, round accurately, then divide and use native toFixed():\r\n            output = (roundingFunction(value + 'e+' + boundedPrecision) / power).toFixed(boundedPrecision);\r\n\r\n            if (optionals > maxDecimals - boundedPrecision) {\r\n                optionalsRegExp = new RegExp('\\\\.?0{1,' + (optionals - (maxDecimals - boundedPrecision)) + '}$');\r\n                output = output.replace(optionalsRegExp, '');\r\n            }\r\n\r\n            return output;\r\n        }\r\n    };\r\n\r\n    // avaliable options\r\n    numeral.options = options;\r\n\r\n    // avaliable formats\r\n    numeral.formats = formats;\r\n\r\n    // avaliable formats\r\n    numeral.locales = locales;\r\n\r\n    // This function sets the current locale.  If\r\n    // no arguments are passed in, it will simply return the current global\r\n    // locale key.\r\n    numeral.locale = function(key) {\r\n        if (key) {\r\n            options.currentLocale = key.toLowerCase();\r\n        }\r\n\r\n        return options.currentLocale;\r\n    };\r\n\r\n    // This function provides access to the loaded locale data.  If\r\n    // no arguments are passed in, it will simply return the current\r\n    // global locale object.\r\n    numeral.localeData = function(key) {\r\n        if (!key) {\r\n            return locales[options.currentLocale];\r\n        }\r\n\r\n        key = key.toLowerCase();\r\n\r\n        if (!locales[key]) {\r\n            throw new Error('Unknown locale : ' + key);\r\n        }\r\n\r\n        return locales[key];\r\n    };\r\n\r\n    numeral.reset = function() {\r\n        for (var property in defaults) {\r\n            options[property] = defaults[property];\r\n        }\r\n    };\r\n\r\n    numeral.zeroFormat = function(format) {\r\n        options.zeroFormat = typeof(format) === 'string' ? format : null;\r\n    };\r\n\r\n    numeral.nullFormat = function (format) {\r\n        options.nullFormat = typeof(format) === 'string' ? format : null;\r\n    };\r\n\r\n    numeral.defaultFormat = function(format) {\r\n        options.defaultFormat = typeof(format) === 'string' ? format : '0.0';\r\n    };\r\n\r\n    numeral.register = function(type, name, format) {\r\n        name = name.toLowerCase();\r\n\r\n        if (this[type + 's'][name]) {\r\n            throw new TypeError(name + ' ' + type + ' already registered.');\r\n        }\r\n\r\n        this[type + 's'][name] = format;\r\n\r\n        return format;\r\n    };\r\n\r\n\r\n    numeral.validate = function(val, culture) {\r\n        var _decimalSep,\r\n            _thousandSep,\r\n            _currSymbol,\r\n            _valArray,\r\n            _abbrObj,\r\n            _thousandRegEx,\r\n            localeData,\r\n            temp;\r\n\r\n        //coerce val to string\r\n        if (typeof val !== 'string') {\r\n            val += '';\r\n\r\n            if (console.warn) {\r\n                console.warn('Numeral.js: Value is not string. It has been co-erced to: ', val);\r\n            }\r\n        }\r\n\r\n        //trim whitespaces from either sides\r\n        val = val.trim();\r\n\r\n        //if val is just digits return true\r\n        if (!!val.match(/^\\d+$/)) {\r\n            return true;\r\n        }\r\n\r\n        //if val is empty return false\r\n        if (val === '') {\r\n            return false;\r\n        }\r\n\r\n        //get the decimal and thousands separator from numeral.localeData\r\n        try {\r\n            //check if the culture is understood by numeral. if not, default it to current locale\r\n            localeData = numeral.localeData(culture);\r\n        } catch (e) {\r\n            localeData = numeral.localeData(numeral.locale());\r\n        }\r\n\r\n        //setup the delimiters and currency symbol based on culture/locale\r\n        _currSymbol = localeData.currency.symbol;\r\n        _abbrObj = localeData.abbreviations;\r\n        _decimalSep = localeData.delimiters.decimal;\r\n        if (localeData.delimiters.thousands === '.') {\r\n            _thousandSep = '\\\\.';\r\n        } else {\r\n            _thousandSep = localeData.delimiters.thousands;\r\n        }\r\n\r\n        // validating currency symbol\r\n        temp = val.match(/^[^\\d]+/);\r\n        if (temp !== null) {\r\n            val = val.substr(1);\r\n            if (temp[0] !== _currSymbol) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        //validating abbreviation symbol\r\n        temp = val.match(/[^\\d]+$/);\r\n        if (temp !== null) {\r\n            val = val.slice(0, -1);\r\n            if (temp[0] !== _abbrObj.thousand && temp[0] !== _abbrObj.million && temp[0] !== _abbrObj.billion && temp[0] !== _abbrObj.trillion) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        _thousandRegEx = new RegExp(_thousandSep + '{2}');\r\n\r\n        if (!val.match(/[^\\d.,]/g)) {\r\n            _valArray = val.split(_decimalSep);\r\n            if (_valArray.length > 2) {\r\n                return false;\r\n            } else {\r\n                if (_valArray.length < 2) {\r\n                    return ( !! _valArray[0].match(/^\\d+.*\\d$/) && !_valArray[0].match(_thousandRegEx));\r\n                } else {\r\n                    if (_valArray[0].length === 1) {\r\n                        return ( !! _valArray[0].match(/^\\d+$/) && !_valArray[0].match(_thousandRegEx) && !! _valArray[1].match(/^\\d+$/));\r\n                    } else {\r\n                        return ( !! _valArray[0].match(/^\\d+.*\\d$/) && !_valArray[0].match(_thousandRegEx) && !! _valArray[1].match(/^\\d+$/));\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return false;\r\n    };\r\n\r\n\r\n    /************************************\r\n        Numeral Prototype\r\n    ************************************/\r\n\r\n    numeral.fn = Numeral.prototype = {\r\n        clone: function() {\r\n            return numeral(this);\r\n        },\r\n        format: function(inputString, roundingFunction) {\r\n            var value = this._value,\r\n                format = inputString || options.defaultFormat,\r\n                kind,\r\n                output,\r\n                formatFunction;\r\n\r\n            // make sure we have a roundingFunction\r\n            roundingFunction = roundingFunction || Math.round;\r\n\r\n            // format based on value\r\n            if (value === 0 && options.zeroFormat !== null) {\r\n                output = options.zeroFormat;\r\n            } else if (value === null && options.nullFormat !== null) {\r\n                output = options.nullFormat;\r\n            } else {\r\n                for (kind in formats) {\r\n                    if (format.match(formats[kind].regexps.format)) {\r\n                        formatFunction = formats[kind].format;\r\n\r\n                        break;\r\n                    }\r\n                }\r\n\r\n                formatFunction = formatFunction || numeral._.numberToFormat;\r\n\r\n                output = formatFunction(value, format, roundingFunction);\r\n            }\r\n\r\n            return output;\r\n        },\r\n        value: function() {\r\n            return this._value;\r\n        },\r\n        input: function() {\r\n            return this._input;\r\n        },\r\n        set: function(value) {\r\n            this._value = Number(value);\r\n\r\n            return this;\r\n        },\r\n        add: function(value) {\r\n            var corrFactor = _.correctionFactor.call(null, this._value, value);\r\n\r\n            function cback(accum, curr, currI, O) {\r\n                return accum + Math.round(corrFactor * curr);\r\n            }\r\n\r\n            this._value = _.reduce([this._value, value], cback, 0) / corrFactor;\r\n\r\n            return this;\r\n        },\r\n        subtract: function(value) {\r\n            var corrFactor = _.correctionFactor.call(null, this._value, value);\r\n\r\n            function cback(accum, curr, currI, O) {\r\n                return accum - Math.round(corrFactor * curr);\r\n            }\r\n\r\n            this._value = _.reduce([value], cback, Math.round(this._value * corrFactor)) / corrFactor;\r\n\r\n            return this;\r\n        },\r\n        multiply: function(value) {\r\n            function cback(accum, curr, currI, O) {\r\n                var corrFactor = _.correctionFactor(accum, curr);\r\n                return Math.round(accum * corrFactor) * Math.round(curr * corrFactor) / Math.round(corrFactor * corrFactor);\r\n            }\r\n\r\n            this._value = _.reduce([this._value, value], cback, 1);\r\n\r\n            return this;\r\n        },\r\n        divide: function(value) {\r\n            function cback(accum, curr, currI, O) {\r\n                var corrFactor = _.correctionFactor(accum, curr);\r\n                return Math.round(accum * corrFactor) / Math.round(curr * corrFactor);\r\n            }\r\n\r\n            this._value = _.reduce([this._value, value], cback);\r\n\r\n            return this;\r\n        },\r\n        difference: function(value) {\r\n            return Math.abs(numeral(this._value).subtract(value).value());\r\n        }\r\n    };\r\n\r\n    /************************************\r\n        Default Locale && Format\r\n    ************************************/\r\n\r\n    numeral.register('locale', 'en', {\r\n        delimiters: {\r\n            thousands: ',',\r\n            decimal: '.'\r\n        },\r\n        abbreviations: {\r\n            thousand: 'k',\r\n            million: 'm',\r\n            billion: 'b',\r\n            trillion: 't'\r\n        },\r\n        ordinal: function(number) {\r\n            var b = number % 10;\r\n            return (~~(number % 100 / 10) === 1) ? 'th' :\r\n                (b === 1) ? 'st' :\r\n                (b === 2) ? 'nd' :\r\n                (b === 3) ? 'rd' : 'th';\r\n        },\r\n        currency: {\r\n            symbol: '$'\r\n        }\r\n    });\r\n\r\n    \r\n\r\n    (function() {\r\n            numeral.register('format', 'bps', {\r\n                regexps: {\r\n                    format: /(BPS)/,\r\n                    unformat: /(BPS)/\r\n                },\r\n                format: function(value, format, roundingFunction) {\r\n                    var space = numeral._.includes(format, ' BPS') ? ' ' : '',\r\n                        output;\r\n\r\n                    value = value * 10000;\r\n\r\n                    // check for space before BPS\r\n                    format = format.replace(/\\s?BPS/, '');\r\n\r\n                    output = numeral._.numberToFormat(value, format, roundingFunction);\r\n\r\n                    if (numeral._.includes(output, ')')) {\r\n                        output = output.split('');\r\n\r\n                        output.splice(-1, 0, space + 'BPS');\r\n\r\n                        output = output.join('');\r\n                    } else {\r\n                        output = output + space + 'BPS';\r\n                    }\r\n\r\n                    return output;\r\n                },\r\n                unformat: function(string) {\r\n                    return +(numeral._.stringToNumber(string) * 0.0001).toFixed(15);\r\n                }\r\n            });\r\n    })();\r\n\r\n\r\n    (function() {\r\n            var decimal = {\r\n                base: 1000,\r\n                suffixes: ['B', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB']\r\n            },\r\n            binary = {\r\n                base: 1024,\r\n                suffixes: ['B', 'KiB', 'MiB', 'GiB', 'TiB', 'PiB', 'EiB', 'ZiB', 'YiB']\r\n            };\r\n\r\n        var allSuffixes =  decimal.suffixes.concat(binary.suffixes.filter(function (item) {\r\n                return decimal.suffixes.indexOf(item) < 0;\r\n            }));\r\n            var unformatRegex = allSuffixes.join('|');\r\n            // Allow support for BPS (http://www.investopedia.com/terms/b/basispoint.asp)\r\n            unformatRegex = '(' + unformatRegex.replace('B', 'B(?!PS)') + ')';\r\n\r\n        numeral.register('format', 'bytes', {\r\n            regexps: {\r\n                format: /([0\\s]i?b)/,\r\n                unformat: new RegExp(unformatRegex)\r\n            },\r\n            format: function(value, format, roundingFunction) {\r\n                var output,\r\n                    bytes = numeral._.includes(format, 'ib') ? binary : decimal,\r\n                    suffix = numeral._.includes(format, ' b') || numeral._.includes(format, ' ib') ? ' ' : '',\r\n                    power,\r\n                    min,\r\n                    max;\r\n\r\n                // check for space before\r\n                format = format.replace(/\\s?i?b/, '');\r\n\r\n                for (power = 0; power <= bytes.suffixes.length; power++) {\r\n                    min = Math.pow(bytes.base, power);\r\n                    max = Math.pow(bytes.base, power + 1);\r\n\r\n                    if (value === null || value === 0 || value >= min && value < max) {\r\n                        suffix += bytes.suffixes[power];\r\n\r\n                        if (min > 0) {\r\n                            value = value / min;\r\n                        }\r\n\r\n                        break;\r\n                    }\r\n                }\r\n\r\n                output = numeral._.numberToFormat(value, format, roundingFunction);\r\n\r\n                return output + suffix;\r\n            },\r\n            unformat: function(string) {\r\n                var value = numeral._.stringToNumber(string),\r\n                    power,\r\n                    bytesMultiplier;\r\n\r\n                if (value) {\r\n                    for (power = decimal.suffixes.length - 1; power >= 0; power--) {\r\n                        if (numeral._.includes(string, decimal.suffixes[power])) {\r\n                            bytesMultiplier = Math.pow(decimal.base, power);\r\n\r\n                            break;\r\n                        }\r\n\r\n                        if (numeral._.includes(string, binary.suffixes[power])) {\r\n                            bytesMultiplier = Math.pow(binary.base, power);\r\n\r\n                            break;\r\n                        }\r\n                    }\r\n\r\n                    value *= (bytesMultiplier || 1);\r\n                }\r\n\r\n                return value;\r\n            }\r\n        });\r\n    })();\r\n\r\n\r\n    (function() {\r\n            numeral.register('format', 'currency', {\r\n            regexps: {\r\n                format: /(\\$)/\r\n            },\r\n            format: function(value, format, roundingFunction) {\r\n                var locale = numeral.locales[numeral.options.currentLocale],\r\n                    symbols = {\r\n                        before: format.match(/^([\\+|\\-|\\(|\\s|\\$]*)/)[0],\r\n                        after: format.match(/([\\+|\\-|\\)|\\s|\\$]*)$/)[0]\r\n                    },\r\n                    output,\r\n                    symbol,\r\n                    i;\r\n\r\n                // strip format of spaces and $\r\n                format = format.replace(/\\s?\\$\\s?/, '');\r\n\r\n                // format the number\r\n                output = numeral._.numberToFormat(value, format, roundingFunction);\r\n\r\n                // update the before and after based on value\r\n                if (value >= 0) {\r\n                    symbols.before = symbols.before.replace(/[\\-\\(]/, '');\r\n                    symbols.after = symbols.after.replace(/[\\-\\)]/, '');\r\n                } else if (value < 0 && (!numeral._.includes(symbols.before, '-') && !numeral._.includes(symbols.before, '('))) {\r\n                    symbols.before = '-' + symbols.before;\r\n                }\r\n\r\n                // loop through each before symbol\r\n                for (i = 0; i < symbols.before.length; i++) {\r\n                    symbol = symbols.before[i];\r\n\r\n                    switch (symbol) {\r\n                        case '$':\r\n                            output = numeral._.insert(output, locale.currency.symbol, i);\r\n                            break;\r\n                        case ' ':\r\n                            output = numeral._.insert(output, ' ', i + locale.currency.symbol.length - 1);\r\n                            break;\r\n                    }\r\n                }\r\n\r\n                // loop through each after symbol\r\n                for (i = symbols.after.length - 1; i >= 0; i--) {\r\n                    symbol = symbols.after[i];\r\n\r\n                    switch (symbol) {\r\n                        case '$':\r\n                            output = i === symbols.after.length - 1 ? output + locale.currency.symbol : numeral._.insert(output, locale.currency.symbol, -(symbols.after.length - (1 + i)));\r\n                            break;\r\n                        case ' ':\r\n                            output = i === symbols.after.length - 1 ? output + ' ' : numeral._.insert(output, ' ', -(symbols.after.length - (1 + i) + locale.currency.symbol.length - 1));\r\n                            break;\r\n                    }\r\n                }\r\n\r\n\r\n                return output;\r\n            }\r\n        });\r\n    })();\r\n\r\n\r\n    (function() {\r\n            numeral.register('format', 'exponential', {\r\n            regexps: {\r\n                format: /(e\\+|e-)/,\r\n                unformat: /(e\\+|e-)/\r\n            },\r\n            format: function(value, format, roundingFunction) {\r\n                var output,\r\n                    exponential = typeof value === 'number' && !numeral._.isNaN(value) ? value.toExponential() : '0e+0',\r\n                    parts = exponential.split('e');\r\n\r\n                format = format.replace(/e[\\+|\\-]{1}0/, '');\r\n\r\n                output = numeral._.numberToFormat(Number(parts[0]), format, roundingFunction);\r\n\r\n                return output + 'e' + parts[1];\r\n            },\r\n            unformat: function(string) {\r\n                var parts = numeral._.includes(string, 'e+') ? string.split('e+') : string.split('e-'),\r\n                    value = Number(parts[0]),\r\n                    power = Number(parts[1]);\r\n\r\n                power = numeral._.includes(string, 'e-') ? power *= -1 : power;\r\n\r\n                function cback(accum, curr, currI, O) {\r\n                    var corrFactor = numeral._.correctionFactor(accum, curr),\r\n                        num = (accum * corrFactor) * (curr * corrFactor) / (corrFactor * corrFactor);\r\n                    return num;\r\n                }\r\n\r\n                return numeral._.reduce([value, Math.pow(10, power)], cback, 1);\r\n            }\r\n        });\r\n    })();\r\n\r\n\r\n    (function() {\r\n            numeral.register('format', 'ordinal', {\r\n            regexps: {\r\n                format: /(o)/\r\n            },\r\n            format: function(value, format, roundingFunction) {\r\n                var locale = numeral.locales[numeral.options.currentLocale],\r\n                    output,\r\n                    ordinal = numeral._.includes(format, ' o') ? ' ' : '';\r\n\r\n                // check for space before\r\n                format = format.replace(/\\s?o/, '');\r\n\r\n                ordinal += locale.ordinal(value);\r\n\r\n                output = numeral._.numberToFormat(value, format, roundingFunction);\r\n\r\n                return output + ordinal;\r\n            }\r\n        });\r\n    })();\r\n\r\n\r\n    (function() {\r\n            numeral.register('format', 'percentage', {\r\n            regexps: {\r\n                format: /(%)/,\r\n                unformat: /(%)/\r\n            },\r\n            format: function(value, format, roundingFunction) {\r\n                var space = numeral._.includes(format, ' %') ? ' ' : '',\r\n                    output;\r\n\r\n                if (numeral.options.scalePercentBy100) {\r\n                    value = value * 100;\r\n                }\r\n\r\n                // check for space before %\r\n                format = format.replace(/\\s?\\%/, '');\r\n\r\n                output = numeral._.numberToFormat(value, format, roundingFunction);\r\n\r\n                if (numeral._.includes(output, ')')) {\r\n                    output = output.split('');\r\n\r\n                    output.splice(-1, 0, space + '%');\r\n\r\n                    output = output.join('');\r\n                } else {\r\n                    output = output + space + '%';\r\n                }\r\n\r\n                return output;\r\n            },\r\n            unformat: function(string) {\r\n                var number = numeral._.stringToNumber(string);\r\n                if (numeral.options.scalePercentBy100) {\r\n                    return number * 0.01;\r\n                }\r\n                return number;\r\n            }\r\n        });\r\n    })();\r\n\r\n\r\n    (function() {\r\n            numeral.register('format', 'time', {\r\n            regexps: {\r\n                format: /(:)/,\r\n                unformat: /(:)/\r\n            },\r\n            format: function(value, format, roundingFunction) {\r\n                var hours = Math.floor(value / 60 / 60),\r\n                    minutes = Math.floor((value - (hours * 60 * 60)) / 60),\r\n                    seconds = Math.round(value - (hours * 60 * 60) - (minutes * 60));\r\n\r\n                return hours + ':' + (minutes < 10 ? '0' + minutes : minutes) + ':' + (seconds < 10 ? '0' + seconds : seconds);\r\n            },\r\n            unformat: function(string) {\r\n                var timeArray = string.split(':'),\r\n                    seconds = 0;\r\n\r\n                // turn hours and minutes into seconds and add them all up\r\n                if (timeArray.length === 3) {\r\n                    // hours\r\n                    seconds = seconds + (Number(timeArray[0]) * 60 * 60);\r\n                    // minutes\r\n                    seconds = seconds + (Number(timeArray[1]) * 60);\r\n                    // seconds\r\n                    seconds = seconds + Number(timeArray[2]);\r\n                } else if (timeArray.length === 2) {\r\n                    // minutes\r\n                    seconds = seconds + (Number(timeArray[0]) * 60);\r\n                    // seconds\r\n                    seconds = seconds + Number(timeArray[1]);\r\n                }\r\n                return Number(seconds);\r\n            }\r\n        });\r\n    })();\r\n\r\n    return numeral;\r\n});"]}