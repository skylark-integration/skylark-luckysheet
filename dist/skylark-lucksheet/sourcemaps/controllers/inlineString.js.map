{"version":3,"sources":["controllers/inlineString.js"],"names":["define","m_getdata","m_cursorPos","locale","Store","getFontStyleByCell","textTrim","selectTextContent","selectTextContentCross","selectTextContentCollapse","inlineStyleAffectCssName","font-weight","font-style","font-family","text-decoration","border-bottom","font-size","color","convertCssToStyleList","cssText","length","cssTextArray","split","_locale","locale_fontarray","fontarray","locale_fontjson","fontjson","styleList","ff","fc","fs","cl","un","bl","it","forEach","s","toLowerCase","key","substr","indexOf","value","parseInt","luckyToCssName","getClassWithcss","ukey","i","getCssText","attr","styleObj","fontColor","undefined","uvalue","newCss","upsetClassWithCss","oUkey","removeClassWidthCss","extendCssText","origin","cover","isLimit","originArray","coverArray","addKeyList","so","isAdd","okey","ovalue","a","sc","ckey","cvalue","inlineStyleAffectAttribute","isInlineStringCell","cell","ct","t","isInlineStringCT","updateInlineStringFormat","$input","range","w","window","getSelection","$textEditor","cac","type","inlineStringEditRange","getRangeAt","commonAncestorContainer","id","$","closest","$functionbox","collapsed","endContainer","startContainer","endOffset","startOffset","spanIndex","span","parentNode","inherit","content","innerHTML","html","left","mid","right","s1","s2","s3","s4","substring","cont","style","box","get","tagName","find","index","replaceWith","seletedNodeIndex","startSpanIndex","endSpanIndex","startSpan","endSpan","startContent","endContent","sleft","sright","eleft","eright","startSeletedNodeIndex","endSeletedNodeIndex","spans","slice","enterKeyControll","deleteContents","textSpan","txt","updateInlineStringFormatOutside","convertSpanToShareString","$dom","preStyleList","styles","preStyleListString","curStyleListString","JSON","stringify","v","innerText","replace","push"],"mappings":"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","file":"../../controllers/inlineString.js","sourcesContent":["define([\n    '../global/getdata',\n    '../global/cursorPos',\n    '../locale/locale',\n    '../store'\n], function (m_getdata, m_cursorPos, locale, Store) {\n    'use strict';\n    const {getFontStyleByCell, textTrim} = m_getdata;\n    const {selectTextContent, selectTextContentCross, selectTextContentCollapse} = m_cursorPos;\n    const inlineStyleAffectAttribute = {\n        'bl': 1,\n        'it': 1,\n        'ff': 1,\n        'cl': 1,\n        'un': 1,\n        'fs': 1,\n        'fc': 1\n    };\n    const inlineStyleAffectCssName = {\n        'font-weight': 1,\n        'font-style': 1,\n        'font-family': 1,\n        'text-decoration': 1,\n        'border-bottom': 1,\n        'font-size': 1,\n        'color': 1\n    };\n    function isInlineStringCell(cell) {\n        let isIs = cell && cell.ct != null && cell.ct.t == 'inlineStr' && cell.ct.s != null && cell.ct.s.length > 0;\n        return isIs;\n    }\n    function isInlineStringCT(ct) {\n        let isIs = ct != null && ct.t == 'inlineStr' && ct.s != null && ct.s.length > 0;\n        return isIs;\n    }\n    function updateInlineStringFormat(cell, attr, value, $input) {\n        // let s = Store.inlineStringEditCache;\n        var w = window.getSelection();\n        var range;\n        if (w.type == 'None') {\n            range = Store.inlineStringEditRange;\n        } else {\n            range = w.getRangeAt(0);\n        }    // if(isInlineStringCell(cell)){\n             //     if(Store.inlineStringEditCache==null){\n             //         Store.inlineStringEditCache = JSON.parse(JSON.stringify(cell.ct.s));\n             //     }\n             // }\n             // else{\n             //     Store.inlineStringEditCache = [{\n             //         v:cell.v\n             //     }];\n             // }\n        // if(isInlineStringCell(cell)){\n        //     if(Store.inlineStringEditCache==null){\n        //         Store.inlineStringEditCache = JSON.parse(JSON.stringify(cell.ct.s));\n        //     }\n        // }\n        // else{\n        //     Store.inlineStringEditCache = [{\n        //         v:cell.v\n        //     }];\n        // }\n        let cac = range.commonAncestorContainer;\n        let $textEditor;\n        if (cac.id == 'luckysheet-rich-text-editor') {\n            $textEditor = $(cac);\n        } else {\n            $textEditor = $(cac).closest('#luckysheet-rich-text-editor');\n        }\n        let $functionbox = $(cac).closest('#luckysheet-functionbox-cell');\n        if ($textEditor.length == 0 && $functionbox.length == 0 && Store.inlineStringEditRange != null) {\n            range = Store.inlineStringEditRange;\n            cac = range.commonAncestorContainer;\n            if (cac.id == 'luckysheet-rich-text-editor') {\n                $textEditor = $(cac);\n            } else {\n                $textEditor = $(cac).closest('#luckysheet-rich-text-editor');\n            }\n            $functionbox = $(cac).closest('#luckysheet-functionbox-cell');\n        }\n        if (range.collapsed === true) {\n            return;\n        }\n        let endContainer = range.endContainer, startContainer = range.startContainer;\n        let endOffset = range.endOffset, startOffset = range.startOffset;\n        if ($textEditor.length > 0) {\n            if (startContainer === endContainer) {\n                let span = startContainer.parentNode, spanIndex, inherit = false;\n                let content = span.innerHTML;\n                let fullContent = $textEditor.html();\n                if (fullContent.substr(0, 5) != '<span') {\n                    inherit = true;\n                }\n                let left = '', mid = '', right = '';\n                let s1 = 0, s2 = startOffset, s3 = endOffset, s4 = content.length;\n                left = content.substring(s1, s2);\n                mid = content.substring(s2, s3);\n                right = content.substring(s3, s4);\n                let cont = '';\n                if (left != '') {\n                    let cssText = span.style.cssText;\n                    if (inherit) {\n                        let box = $(span).closest('#luckysheet-input-box').get(0);\n                        if (box != null) {\n                            cssText = extendCssText(box.style.cssText, cssText);\n                        }\n                    }\n                    cont += \"<span style='\" + cssText + \"'>\" + left + '</span>';\n                }\n                if (mid != '') {\n                    // let styleObj = {};\n                    // styleObj[attr] = value;\n                    // let s = getFontStyleByCell(styleObj, undefined, undefined, false);\n                    // let ukey = textTrim(s.substr(0, s.indexOf(':')));\n                    // let uvalue = textTrim(s.substr(s.indexOf(':')+1));\n                    // uvalue = uvalue.substr(0, uvalue.length-1);\n                    // let cssText = span.style.cssText;\n                    // cssText = removeClassWidthCss(cssText, attr);\n                    let cssText = getCssText(span.style.cssText, attr, value);\n                    if (inherit) {\n                        let box = $(span).closest('#luckysheet-input-box').get(0);\n                        if (box != null) {\n                            cssText = extendCssText(box.style.cssText, cssText);\n                        }\n                    }\n                    cont += \"<span style='\" + cssText + \"'>\" + mid + '</span>';\n                }\n                if (right != '') {\n                    let cssText = span.style.cssText;\n                    if (inherit) {\n                        let box = $(span).closest('#luckysheet-input-box').get(0);\n                        if (box != null) {\n                            cssText = extendCssText(box.style.cssText, cssText);\n                        }\n                    }\n                    cont += \"<span style='\" + cssText + \"'>\" + right + '</span>';\n                }\n                if (startContainer.parentNode.tagName == 'SPAN') {\n                    spanIndex = $textEditor.find('span').index(span);\n                    $(span).replaceWith(cont);\n                } else {\n                    spanIndex = 0;\n                    $(span).html(cont);\n                }\n                let seletedNodeIndex = 0;\n                if (s1 == s2) {\n                    seletedNodeIndex = spanIndex;\n                } else {\n                    seletedNodeIndex = spanIndex + 1;\n                }\n                selectTextContent($textEditor.find('span').get(seletedNodeIndex));\n            } else {\n                if (startContainer.parentNode.tagName == 'SPAN' && endContainer.parentNode.tagName == 'SPAN') {\n                    let startSpan = startContainer.parentNode, startSpanIndex;\n                    let endSpan = endContainer.parentNode, endSpanIndex;\n                    startSpanIndex = $textEditor.find('span').index(startSpan);\n                    endSpanIndex = $textEditor.find('span').index(endSpan);\n                    let startContent = startSpan.innerHTML, endContent = endSpan.innerHTML;\n                    let sleft = '', sright = '', eleft = '', eright = '';\n                    let s1 = 0, s2 = startOffset, s3 = endOffset, s4 = endContent.length;\n                    sleft = startContent.substring(s1, s2);\n                    sright = startContent.substring(s2, startContent.length);\n                    eleft = endContent.substring(0, s3);\n                    eright = endContent.substring(s3, s4);\n                    let spans = $textEditor.find('span');\n                    let replaceSpans = spans.slice(startSpanIndex, endSpanIndex + 1);\n                    let cont = '';\n                    for (let i = 0; i < startSpanIndex; i++) {\n                        let span = spans.get(i), content = span.innerHTML;\n                        cont += \"<span style='\" + span.style.cssText + \"'>\" + content + '</span>';\n                    }\n                    if (sleft != '') {\n                        cont += \"<span style='\" + startSpan.style.cssText + \"'>\" + sleft + '</span>';\n                    }\n                    if (sright != '') {\n                        let cssText = getCssText(startSpan.style.cssText, attr, value);\n                        cont += \"<span style='\" + cssText + \"'>\" + sright + '</span>';\n                    }\n                    if (startSpanIndex < endSpanIndex) {\n                        for (let i = startSpanIndex + 1; i < endSpanIndex; i++) {\n                            let span = spans.get(i), content = span.innerHTML;\n                            cont += \"<span style='\" + span.style.cssText + \"'>\" + content + '</span>';\n                        }\n                    }\n                    if (eleft != '') {\n                        let cssText = getCssText(endSpan.style.cssText, attr, value);\n                        cont += \"<span style='\" + cssText + \"'>\" + eleft + '</span>';\n                    }\n                    if (eright != '') {\n                        cont += \"<span style='\" + endSpan.style.cssText + \"'>\" + eright + '</span>';\n                    }\n                    for (let i = endSpanIndex + 1; i < spans.length; i++) {\n                        let span = spans.get(i), content = span.innerHTML;\n                        cont += \"<span style='\" + span.style.cssText + \"'>\" + content + '</span>';\n                    }\n                    $textEditor.html(cont);    // console.log(replaceSpans, cont);\n                                               // replaceSpans.replaceWith(cont);\n                    // console.log(replaceSpans, cont);\n                    // replaceSpans.replaceWith(cont);\n                    let startSeletedNodeIndex, endSeletedNodeIndex;\n                    if (s1 == s2) {\n                        startSeletedNodeIndex = startSpanIndex;\n                        endSeletedNodeIndex = endSpanIndex;\n                    } else {\n                        startSeletedNodeIndex = startSpanIndex + 1;\n                        endSeletedNodeIndex = endSpanIndex + 1;\n                    }\n                    spans = $textEditor.find('span');\n                    selectTextContentCross(spans.get(startSeletedNodeIndex), spans.get(endSeletedNodeIndex));\n                }\n            }\n        } else if ($functionbox.length > 0) {\n        }\n    }\n    function enterKeyControll(cell) {\n        var w = window.getSelection();\n        if (w.type == 'None') {\n            return;\n        }\n        var range = w.getRangeAt(0);\n        let cac = range.commonAncestorContainer;\n        let $textEditor;\n        if (cac.id == 'luckysheet-rich-text-editor') {\n            $textEditor = $(cac);\n        } else {\n            $textEditor = $(cac).closest('#luckysheet-rich-text-editor');\n        }\n        let $functionbox = $(cac).closest('#luckysheet-functionbox-cell');    // if(range.collapsed===true){\n                                                                              //     return;\n                                                                              // }\n        // if(range.collapsed===true){\n        //     return;\n        // }\n        let endContainer = range.endContainer, startContainer = range.startContainer;\n        let endOffset = range.endOffset, startOffset = range.startOffset;\n        if ($textEditor.length > 0) {\n            let startSpan = startContainer.parentNode;\n            if (startContainer.id == 'luckysheet-rich-text-editor') {\n                startSpan = $(startContainer).find('span');\n                if (startSpan.length == 0) {\n                    startContainer.innerHTML = '<span></span>';\n                    startSpan = $(startContainer).find('span');\n                }\n                startSpan = startSpan.get(startSpan.length - 1);\n                startOffset = startSpan.innerHTML.length;\n            }    // let startSpanIndex = $textEditor.find(\"span\").index(startSpan);\n            // let startSpanIndex = $textEditor.find(\"span\").index(startSpan);\n            if (range.collapsed === false) {\n                range.deleteContents();\n            }\n            let startContent = startSpan.innerHTML;\n            let sleft = '', sright = '';\n            let s1 = 0, s2 = startOffset;\n            sleft = startContent.substring(s1, s2);\n            sright = startContent.substring(s2, startContent.length);\n            let spanIndex, cont;\n            if (startContainer.parentNode.tagName == 'SPAN') {\n                let textSpan = $textEditor.find('span');\n                spanIndex = textSpan.index(startSpan);\n                if (spanIndex == textSpan.length - 1 && sright == '') {\n                    let txt = textSpan[spanIndex].innerHTML;\n                    if (txt.substr(txt.length - 1, 1) == '\\n') {\n                        cont = \"<span style='\" + startSpan.style.cssText + \"'>\" + sleft + '\\n' + '</span>';\n                    } else {\n                        cont = \"<span style='\" + startSpan.style.cssText + \"'>\" + sleft + '\\n\\n' + '</span>';\n                    }\n                } else {\n                    cont = \"<span style='\" + startSpan.style.cssText + \"'>\" + sleft + '\\n' + sright + '</span>';\n                }\n                $(startSpan).replaceWith(cont);\n            } else {\n                let cssText = getFontStyleByCell(cell);\n                if (sright == '') {\n                    cont = \"<span style='\" + cssText + \"'>\" + sleft + '\\n\\n' + '</span>';\n                } else {\n                    cont = \"<span style='\" + cssText + \"'>\" + sleft + '\\n' + sright + '</span>';\n                }\n                if (startContainer.id == 'luckysheet-rich-text-editor') {\n                    $(startSpan).replaceWith(cont);\n                    let textSpan = $textEditor.find('span');\n                    spanIndex = textSpan.length - 1;\n                    startOffset = textSpan.get(spanIndex).innerHTML.length - 1;\n                } else {\n                    $(startSpan).html(cont);\n                    spanIndex = 0;\n                }\n            }\n            selectTextContentCollapse($textEditor.find('span').get(spanIndex), startOffset + 1);\n        } else if ($functionbox.length > 0) {\n        }\n    }\n    function updateInlineStringFormatOutside(cell, key, value) {\n        if (cell.ct == null) {\n            return;\n        }\n        let s = cell.ct.s;\n        if (s == null) {\n            return;\n        }\n        for (let i = 0; i < s.length; i++) {\n            let item = s[i];\n            item[key] = value;\n        }\n    }\n    function convertSpanToShareString($dom) {\n        let styles = [], preStyleList, preStyleListString = null;\n        for (let i = 0; i < $dom.length; i++) {\n            let span = $dom.get(i);\n            let styleList = convertCssToStyleList(span.style.cssText);\n            let curStyleListString = JSON.stringify(styleList);    // let v = span.innerHTML;\n            // let v = span.innerHTML;\n            let v = span.innerText;\n            v = v.replace(/\\n/g, '\\r\\n');\n            if (curStyleListString == preStyleListString) {\n                preStyleList.v += v;\n            } else {\n                styleList.v = v;\n                styles.push(styleList);\n                preStyleListString = curStyleListString;\n                preStyleList = styleList;\n            }\n        }\n        return styles;\n    }\n    function convertCssToStyleList(cssText) {\n        if (cssText == null || cssText.length == 0) {\n            return {};\n        }\n        let cssTextArray = cssText.split(';');\n        const _locale = locale();\n        const locale_fontarray = _locale.fontarray;\n        const locale_fontjson = _locale.fontjson;\n        let styleList = {\n            'ff': locale_fontarray[0],\n            //font family\n            'fc': '#000000',\n            //font color\n            'fs': 10,\n            //font size\n            'cl': 0,\n            //strike\n            'un': 0,\n            //underline\n            'bl': 0,\n            //blod\n            'it': 0\n        };\n        //italic\n        cssTextArray.forEach(s => {\n            s = s.toLowerCase();\n            let key = textTrim(s.substr(0, s.indexOf(':')));\n            let value = textTrim(s.substr(s.indexOf(':') + 1));\n            if (key == 'font-weight') {\n                if (value == 'bold') {\n                    styleList['bl'] = 1;\n                } else {\n                    styleList['bl'] = 0;\n                }\n            }\n            if (key == 'font-style') {\n                if (value == 'italic') {\n                    styleList['it'] = 1;\n                } else {\n                    styleList['it'] = 0;\n                }\n            }\n            if (key == 'font-family') {\n                let ff = locale_fontjson[value];\n                if (ff == null) {\n                    styleList['ff'] = value;\n                } else {\n                    styleList['ff'] = ff;\n                }\n            }\n            if (key == 'font-size') {\n                styleList['fs'] = parseInt(value);\n            }\n            if (key == 'color') {\n                styleList['fc'] = value;\n            }\n            if (key == 'text-decoration') {\n                styleList['cl'] = 1;\n            }\n            if (key == 'border-bottom') {\n                styleList['un'] = 1;\n            }\n            if (key == 'lucky-strike') {\n                styleList['cl'] = value;\n            }\n            if (key == 'lucky-underline') {\n                styleList['un'] = value;\n            }\n        });\n        return styleList;\n    }\n    const luckyToCssName = {\n        'bl': 'font-weight',\n        'it': 'font-style',\n        'ff': 'font-family',\n        'fs': 'font-size',\n        'fc': 'color',\n        'cl': 'text-decoration',\n        'un': 'border-bottom'\n    };\n    function getClassWithcss(cssText, ukey) {\n        let cssTextArray = cssText.split(';');\n        if (ukey == null || ukey.length == 0) {\n            return cssText;\n        }\n        if (cssText.indexOf(ukey) > -1) {\n            for (let i = 0; i < cssTextArray.length; i++) {\n                let s = cssTextArray[i];\n                s = s.toLowerCase();\n                let key = textTrim(s.substr(0, s.indexOf(':')));\n                let value = textTrim(s.substr(s.indexOf(':') + 1));\n                if (key == ukey) {\n                    return value;\n                }\n            }\n        }\n        return '';\n    }\n    function upsetClassWithCss(cssText, ukey, uvalue) {\n        let cssTextArray = cssText.split(';');\n        let newCss = '';\n        if (ukey == null || ukey.length == 0) {\n            return cssText;\n        }\n        if (cssText.indexOf(ukey) > -1) {\n            for (let i = 0; i < cssTextArray.length; i++) {\n                let s = cssTextArray[i];\n                s = s.toLowerCase();\n                let key = textTrim(s.substr(0, s.indexOf(':')));\n                let value = textTrim(s.substr(s.indexOf(':') + 1));\n                if (key == ukey) {\n                    newCss += key + ':' + uvalue + ';';\n                } else if (key.length > 0) {\n                    newCss += key + ':' + value + ';';\n                }\n            }\n        } else if (ukey.length > 0) {\n            cssText += ukey + ':' + uvalue + ';';\n            newCss = cssText;\n        }\n        return newCss;\n    }\n    function removeClassWidthCss(cssText, ukey) {\n        let cssTextArray = cssText.split(';');\n        let newCss = '';\n        let oUkey = ukey;\n        if (ukey == null || ukey.length == 0) {\n            return cssText;\n        }\n        if (ukey in luckyToCssName) {\n            ukey = luckyToCssName[ukey];\n        }\n        if (cssText.indexOf(ukey) > -1) {\n            for (let i = 0; i < cssTextArray.length; i++) {\n                let s = cssTextArray[i];\n                s = s.toLowerCase();\n                let key = textTrim(s.substr(0, s.indexOf(':')));\n                let value = textTrim(s.substr(s.indexOf(':') + 1));\n                if (key == ukey || oUkey == 'cl' && key == 'lucky-strike' || oUkey == 'un' && key == 'lucky-underline') {\n                    continue;\n                } else if (key.length > 0) {\n                    newCss += key + ':' + value + ';';\n                }\n            }\n        } else {\n            newCss = cssText;\n        }\n        return newCss;\n    }\n    function getCssText(cssText, attr, value) {\n        let styleObj = {};\n        styleObj[attr] = value;\n        if (attr == 'un') {\n            let fontColor = getClassWithcss(cssText, 'color');\n            if (fontColor == '') {\n                fontColor = '#000000';\n            }\n            let fs = getClassWithcss(cssText, 'font-size');\n            if (fs == '') {\n                fs = 11;\n            }\n            fs = parseInt(fs);\n            styleObj['_fontSize'] = fs;\n            styleObj['_color'] = fontColor;\n        }\n        let s = getFontStyleByCell(styleObj, undefined, undefined, false);\n        let ukey = textTrim(s.substr(0, s.indexOf(':')));\n        let uvalue = textTrim(s.substr(s.indexOf(':') + 1));\n        uvalue = uvalue.substr(0, uvalue.length - 1);    // let cssText = span.style.cssText;\n        // let cssText = span.style.cssText;\n        cssText = removeClassWidthCss(cssText, attr);\n        cssText = upsetClassWithCss(cssText, ukey, uvalue);\n        return cssText;\n    }\n    function extendCssText(origin, cover, isLimit = true) {\n        let originArray = origin.split(';');\n        let coverArray = cover.split(';');\n        let newCss = '';\n        let addKeyList = {};\n        for (let i = 0; i < originArray.length; i++) {\n            let so = originArray[i], isAdd = true;\n            so = so.toLowerCase();\n            let okey = textTrim(so.substr(0, so.indexOf(':')));\n            let ovalue = textTrim(so.substr(so.indexOf(':') + 1));\n            if (isLimit) {\n                if (!(okey in inlineStyleAffectCssName)) {\n                    continue;\n                }\n            }\n            for (let a = 0; a < coverArray.length; a++) {\n                let sc = coverArray[a];\n                sc = sc.toLowerCase();\n                let ckey = textTrim(sc.substr(0, sc.indexOf(':')));\n                let cvalue = textTrim(sc.substr(sc.indexOf(':') + 1));\n                if (okey == ckey) {\n                    newCss += ckey + ':' + cvalue + ';';\n                    isAdd = false;\n                    continue;\n                }\n            }\n            if (isAdd) {\n                newCss += okey + ':' + ovalue + ';';\n            }\n            addKeyList[okey] = 1;\n        }\n        for (let a = 0; a < coverArray.length; a++) {\n            let sc = coverArray[a];\n            sc = sc.toLowerCase();\n            let ckey = textTrim(sc.substr(0, sc.indexOf(':')));\n            let cvalue = textTrim(sc.substr(sc.indexOf(':') + 1));\n            if (isLimit) {\n                if (!(ckey in inlineStyleAffectCssName)) {\n                    continue;\n                }\n            }\n            if (!(ckey in addKeyList)) {\n                newCss += ckey + ':' + cvalue + ';';\n            }\n        }\n        return newCss;\n    }\n    return {\n        inlineStyleAffectAttribute: inlineStyleAffectAttribute,\n        inlineStyleAffectCssName: inlineStyleAffectCssName,\n        isInlineStringCell: isInlineStringCell,\n        isInlineStringCT: isInlineStringCT,\n        updateInlineStringFormat: updateInlineStringFormat,\n        enterKeyControll: enterKeyControll,\n        updateInlineStringFormatOutside: updateInlineStringFormatOutside,\n        convertSpanToShareString: convertSpanToShareString,\n        convertCssToStyleList: convertCssToStyleList\n    };\n});"]}