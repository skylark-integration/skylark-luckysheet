{"version":3,"sources":["controllers/inlineString.js"],"names":["define","m_util","m_cells","m_cursorPos","locale","Store","textTrim","getFontStyleByCell","isInlineStringCell","isInlineStringCT","selectTextContent","selectTextContentCross","selectTextContentCollapse","inlineStyleAffectCssName","font-weight","font-style","font-family","text-decoration","border-bottom","font-size","color","convertCssToStyleList","convertSpanToShareString","luckyToCssName","bl","it","ff","fs","fc","cl","un","getClassWithcss","cssText","ukey","cssTextArray","split","length","indexOf","i","s","toLowerCase","key","substr","value","getCssText","attr","styleObj","fontColor","parseInt","undefined","uvalue","newCss","upsetClassWithCss","oUkey","removeClassWidthCss","extendCssText","origin","cover","isLimit","originArray","coverArray","addKeyList","so","isAdd","okey","ovalue","a","sc","ckey","cvalue","inlineStyleAffectAttribute","updateInlineStringFormat","cell","$input","range","w","window","getSelection","$textEditor","cac","type","inlineStringEditRange","getRangeAt","commonAncestorContainer","id","$","closest","$functionbox","collapsed","endContainer","startContainer","endOffset","startOffset","spanIndex","span","parentNode","inherit","content","innerHTML","html","left","mid","right","s1","s2","s3","s4","substring","cont","style","box","get","tagName","find","index","replaceWith","seletedNodeIndex","startSpanIndex","endSpanIndex","startSpan","endSpan","startContent","endContent","sleft","sright","eleft","eright","startSeletedNodeIndex","endSeletedNodeIndex","spans","slice","enterKeyControll","deleteContents","textSpan","txt","updateInlineStringFormatOutside","ct"],"mappings":";;;;;;;AAAAA,QACI,gBACA,mBACA,uBACA,mBACA,YACD,SAAUC,EAAOC,EAAQC,EAAaC,EAAQC,GAC7C,aACA,MAAMC,SAACA,GAAYL,GACbM,mBAACA,EAAkBC,mBAACA,EAAkBC,iBAACA,GAAoBP,GAG3DQ,kBAACA,EAAiBC,uBAAEA,EAAsBC,0BAAEA,GAA6BT,EAUzEU,GACFC,cAAe,EACfC,aAAc,EACdC,cAAe,EACfC,kBAAmB,EACnBC,gBAAiB,EACjBC,YAAa,EACbC,MAAS,IAGPC,sBAACA,EAAqBC,yBAACA,GAA4BrB,EAsQzD,MAAMsB,GACFC,GAAM,cACNC,GAAM,aACNC,GAAM,cACNC,GAAM,YACNC,GAAM,QACNC,GAAM,kBACNC,GAAM,iBAEV,SAASC,EAAgBC,EAASC,GAC9B,IAAIC,EAAeF,EAAQG,MAAM,KACjC,GAAY,MAARF,GAA+B,GAAfA,EAAKG,OACrB,OAAOJ,EAEX,GAAIA,EAAQK,QAAQJ,IAAS,EACzB,IAAK,IAAIK,EAAI,EAAGA,EAAIJ,EAAaE,OAAQE,IAAK,CAC1C,IAAIC,EAAIL,EAAaI,GACrBC,EAAIA,EAAEC,cACN,IAAIC,EAAMnC,EAASiC,EAAEG,OAAO,EAAGH,EAAEF,QAAQ,OACrCM,EAAQrC,EAASiC,EAAEG,OAAOH,EAAEF,QAAQ,KAAO,IAC/C,GAAII,GAAOR,EACP,OAAOU,EAInB,MAAO,GAqDX,SAASC,EAAWZ,EAASa,EAAMF,GAC/B,IAAIG,KAEJ,GADAA,EAASD,GAAQF,EACL,MAARE,EAAc,CACd,IAAIE,EAAYhB,EAAgBC,EAAS,SACxB,IAAbe,IACAA,EAAY,WAEhB,IAAIpB,EAAKI,EAAgBC,EAAS,aACxB,IAANL,IACAA,EAAK,IAETA,EAAKqB,SAASrB,GACdmB,EAAoB,UAAInB,EACxBmB,EAAiB,OAAIC,EAEzB,IAAIR,EAAIhC,EAAmBuC,OAAUG,OAAWA,GAAW,GACvDhB,EAAO3B,EAASiC,EAAEG,OAAO,EAAGH,EAAEF,QAAQ,OACtCa,EAAS5C,EAASiC,EAAEG,OAAOH,EAAEF,QAAQ,KAAO,IAKhD,OAJAa,EAASA,EAAOR,OAAO,EAAGQ,EAAOd,OAAS,GAG1CJ,EAzEJ,SAA2BA,EAASC,EAAMiB,GACtC,IAAIhB,EAAeF,EAAQG,MAAM,KAC7BgB,EAAS,GACb,GAAY,MAARlB,GAA+B,GAAfA,EAAKG,OACrB,OAAOJ,EAEX,GAAIA,EAAQK,QAAQJ,IAAS,EACzB,IAAK,IAAIK,EAAI,EAAGA,EAAIJ,EAAaE,OAAQE,IAAK,CAC1C,IAAIC,EAAIL,EAAaI,GACrBC,EAAIA,EAAEC,cACN,IAAIC,EAAMnC,EAASiC,EAAEG,OAAO,EAAGH,EAAEF,QAAQ,OACrCM,EAAQrC,EAASiC,EAAEG,OAAOH,EAAEF,QAAQ,KAAO,IAC3CI,GAAOR,EACPkB,GAAUV,EAAM,IAAMS,EAAS,IACxBT,EAAIL,OAAS,IACpBe,GAAUV,EAAM,IAAME,EAAQ,UAG/BV,EAAKG,OAAS,IAErBe,EADAnB,GAAWC,EAAO,IAAMiB,EAAS,KAGrC,OAAOC,EAmDGC,CADVpB,EAhDJ,SAA6BA,EAASC,GAClC,IAAIC,EAAeF,EAAQG,MAAM,KAC7BgB,EAAS,GACTE,EAAQpB,EACZ,GAAY,MAARA,GAA+B,GAAfA,EAAKG,OACrB,OAAOJ,EAKX,GAHIC,KAAQV,IACRU,EAAOV,EAAeU,IAEtBD,EAAQK,QAAQJ,IAAS,EACzB,IAAK,IAAIK,EAAI,EAAGA,EAAIJ,EAAaE,OAAQE,IAAK,CAC1C,IAAIC,EAAIL,EAAaI,GACrBC,EAAIA,EAAEC,cACN,IAAIC,EAAMnC,EAASiC,EAAEG,OAAO,EAAGH,EAAEF,QAAQ,OACrCM,EAAQrC,EAASiC,EAAEG,OAAOH,EAAEF,QAAQ,KAAO,IAC3CI,GAAOR,GAAiB,MAAToB,GAAwB,gBAAPZ,GAAkC,MAATY,GAAwB,mBAAPZ,GAEnEA,EAAIL,OAAS,IACpBe,GAAUV,EAAM,IAAME,EAAQ,UAItCQ,EAASnB,EAEb,OAAOmB,EAuBGG,CAAoBtB,EAASa,GACFZ,EAAMiB,GAG/C,SAASK,EAAcC,EAAQC,EAAOC,GAAU,GAC5C,IAAIC,EAAcH,EAAOrB,MAAM,KAC3ByB,EAAaH,EAAMtB,MAAM,KACzBgB,EAAS,GACTU,KACJ,IAAK,IAAIvB,EAAI,EAAGA,EAAIqB,EAAYvB,OAAQE,IAAK,CACzC,IAAIwB,EAAKH,EAAYrB,GAAIyB,GAAQ,EACjCD,EAAKA,EAAGtB,cACR,IAAIwB,EAAO1D,EAASwD,EAAGpB,OAAO,EAAGoB,EAAGzB,QAAQ,OACxC4B,EAAS3D,EAASwD,EAAGpB,OAAOoB,EAAGzB,QAAQ,KAAO,IAClD,IAAIqB,GACMM,KAAQnD,EADlB,CAKA,IAAK,IAAIqD,EAAI,EAAGA,EAAIN,EAAWxB,OAAQ8B,IAAK,CACxC,IAAIC,EAAKP,EAAWM,GACpBC,EAAKA,EAAG3B,cACR,IAAI4B,EAAO9D,EAAS6D,EAAGzB,OAAO,EAAGyB,EAAG9B,QAAQ,OACxCgC,EAAS/D,EAAS6D,EAAGzB,OAAOyB,EAAG9B,QAAQ,KAAO,IAC9C2B,GAAQI,IACRjB,GAAUiB,EAAO,IAAMC,EAAS,IAChCN,GAAQ,GAIZA,IACAZ,GAAUa,EAAO,IAAMC,EAAS,KAEpCJ,EAAWG,GAAQ,GAEvB,IAAK,IAAIE,EAAI,EAAGA,EAAIN,EAAWxB,OAAQ8B,IAAK,CACxC,IAAIC,EAAKP,EAAWM,GACpBC,EAAKA,EAAG3B,cACR,IAAI4B,EAAO9D,EAAS6D,EAAGzB,OAAO,EAAGyB,EAAG9B,QAAQ,OACxCgC,EAAS/D,EAAS6D,EAAGzB,OAAOyB,EAAG9B,QAAQ,KAAO,MAC9CqB,GACMU,KAAQvD,KAIZuD,KAAQP,IACVV,GAAUiB,EAAO,IAAMC,EAAS,MAGxC,OAAOlB,EAEX,OACImB,4BA/aA9C,GAAM,EACNC,GAAM,EACNC,GAAM,EACNG,GAAM,EACNC,GAAM,EACNH,GAAM,EACNC,GAAM,GA0aNf,yBAA0BA,EAC1BL,mBAAoBA,EACpBC,iBAAkBA,EAClB8D,yBA/ZJ,SAAkCC,EAAM3B,EAAMF,EAAO8B,GAEjD,IACIC,EADAC,EAAIC,OAAOC,eAiBf,IACIC,EADAC,GAdAL,EADU,QAAVC,EAAEK,KACM3E,EAAM4E,sBAENN,EAAEO,WAAW,IAYTC,wBAGZL,EADU,+BAAVC,EAAIK,GACUC,EAAEN,GAEFM,EAAEN,GAAKO,QAAQ,gCAEjC,IAAIC,EAAeF,EAAEN,GAAKO,QAAQ,gCAWlC,GAV0B,GAAtBR,EAAY1C,QAAsC,GAAvBmD,EAAanD,QAA8C,MAA/B/B,EAAM4E,wBAIzDH,EADU,gCADdC,GADAL,EAAQrE,EAAM4E,uBACFE,yBACJC,GACUC,EAAEN,GAEFM,EAAEN,GAAKO,QAAQ,gCAEjCC,EAAeF,EAAEN,GAAKO,QAAQ,kCAEV,IAApBZ,EAAMc,UACN,OAEJ,IAAIC,EAAef,EAAMe,aAAcC,EAAiBhB,EAAMgB,eAC1DC,EAAYjB,EAAMiB,UAAWC,EAAclB,EAAMkB,YACrD,GAAId,EAAY1C,OAAS,GACrB,GAAIsD,IAAmBD,EAAc,CACjC,IAAsCI,EAAlCC,EAAOJ,EAAeK,WAAuBC,GAAU,EACvDC,EAAUH,EAAKI,UAEa,SADdpB,EAAYqB,OACdzD,OAAO,EAAG,KACtBsD,GAAU,GAEd,IAAII,EAAO,GAAIC,EAAM,GAAIC,EAAQ,GAC7BC,EAAK,EAAGC,EAAKZ,EAAaa,EAAKd,EAAWe,EAAKT,EAAQ7D,OAC3DgE,EAAOH,EAAQU,UAAUJ,EAAIC,GAC7BH,EAAMJ,EAAQU,UAAUH,EAAIC,GAC5BH,EAAQL,EAAQU,UAAUF,EAAIC,GAC9B,IAAIE,EAAO,GACX,GAAY,IAARR,EAAY,CACZ,IAAIpE,EAAU8D,EAAKe,MAAM7E,QACzB,GAAIgE,EAAS,CACT,IAAIc,EAAMzB,EAAES,GAAMR,QAAQ,yBAAyByB,IAAI,GAC5C,MAAPD,IACA9E,EAAUuB,EAAcuD,EAAID,MAAM7E,QAASA,IAGnD4E,GAAQ,gBAAkB5E,EAAU,KAAOoE,EAAO,UAEtD,GAAW,IAAPC,EAAW,CASX,IAAIrE,EAAUY,EAAWkD,EAAKe,MAAM7E,QAASa,EAAMF,GACnD,GAAIqD,EAAS,CACT,IAAIc,EAAMzB,EAAES,GAAMR,QAAQ,yBAAyByB,IAAI,GAC5C,MAAPD,IACA9E,EAAUuB,EAAcuD,EAAID,MAAM7E,QAASA,IAGnD4E,GAAQ,gBAAkB5E,EAAU,KAAOqE,EAAM,UAErD,GAAa,IAATC,EAAa,CACb,IAAItE,EAAU8D,EAAKe,MAAM7E,QACzB,GAAIgE,EAAS,CACT,IAAIc,EAAMzB,EAAES,GAAMR,QAAQ,yBAAyByB,IAAI,GAC5C,MAAPD,IACA9E,EAAUuB,EAAcuD,EAAID,MAAM7E,QAASA,IAGnD4E,GAAQ,gBAAkB5E,EAAU,KAAOsE,EAAQ,UAEd,QAArCZ,EAAeK,WAAWiB,SAC1BnB,EAAYf,EAAYmC,KAAK,QAAQC,MAAMpB,GAC3CT,EAAES,GAAMqB,YAAYP,KAEpBf,EAAY,EACZR,EAAES,GAAMK,KAAKS,IAEjB,IAAIQ,EAAmB,EAEnBA,EADAb,GAAMC,EACaX,EAEAA,EAAY,EAEnCnF,EAAkBoE,EAAYmC,KAAK,QAAQF,IAAIK,SAE/C,GAAyC,QAArC1B,EAAeK,WAAWiB,SAAwD,QAAnCvB,EAAaM,WAAWiB,QAAmB,CAC1F,IAA2CK,EACJC,EADnCC,EAAY7B,EAAeK,WAC3ByB,EAAU/B,EAAaM,WAC3BsB,EAAiBvC,EAAYmC,KAAK,QAAQC,MAAMK,GAChDD,EAAexC,EAAYmC,KAAK,QAAQC,MAAMM,GAC9C,IAAIC,EAAeF,EAAUrB,UAAWwB,EAAaF,EAAQtB,UACzDyB,EAAQ,GAAIC,EAAS,GAAIC,EAAQ,GAAIC,EAAS,GAC9CvB,EAAK,EAAGC,EAAKZ,EAAaa,EAAKd,EAAWe,EAAKgB,EAAWtF,OAC9DuF,EAAQF,EAAad,UAAUJ,EAAIC,GACnCoB,EAASH,EAAad,UAAUH,EAAIiB,EAAarF,QACjDyF,EAAQH,EAAWf,UAAU,EAAGF,GAChCqB,EAASJ,EAAWf,UAAUF,EAAIC,GAClC,IAmCIqB,EAAuBC,EAnCvBC,EAAQnD,EAAYmC,KAAK,QAEzBL,GADeqB,EAAMC,MAAMb,EAAgBC,EAAe,GACnD,IACX,IAAK,IAAIhF,EAAI,EAAGA,EAAI+E,EAAgB/E,IAAK,CACrC,IAAIwD,EAAOmC,EAAMlB,IAAIzE,GAAI2D,EAAUH,EAAKI,UACxCU,GAAQ,gBAAkBd,EAAKe,MAAM7E,QAAU,KAAOiE,EAAU,UASpE,GAPa,IAAT0B,IACAf,GAAQ,gBAAkBW,EAAUV,MAAM7E,QAAU,KAAO2F,EAAQ,WAEzD,IAAVC,IAEAhB,GAAQ,gBADMhE,EAAW2E,EAAUV,MAAM7E,QAASa,EAAMF,GACpB,KAAOiF,EAAS,WAEpDP,EAAiBC,EACjB,IAAK,IAAIhF,EAAI+E,EAAiB,EAAG/E,EAAIgF,EAAchF,IAAK,CACpD,IAAIwD,EAAOmC,EAAMlB,IAAIzE,GAAI2D,EAAUH,EAAKI,UACxCU,GAAQ,gBAAkBd,EAAKe,MAAM7E,QAAU,KAAOiE,EAAU,UAG3D,IAAT4B,IAEAjB,GAAQ,gBADMhE,EAAW4E,EAAQX,MAAM7E,QAASa,EAAMF,GAClB,KAAOkF,EAAQ,WAEzC,IAAVC,IACAlB,GAAQ,gBAAkBY,EAAQX,MAAM7E,QAAU,KAAO8F,EAAS,WAEtE,IAAK,IAAIxF,EAAIgF,EAAe,EAAGhF,EAAI2F,EAAM7F,OAAQE,IAAK,CAClD,IAAIwD,EAAOmC,EAAMlB,IAAIzE,GAAI2D,EAAUH,EAAKI,UACxCU,GAAQ,gBAAkBd,EAAKe,MAAM7E,QAAU,KAAOiE,EAAU,UAEpEnB,EAAYqB,KAAKS,GAKbL,GAAMC,GACNuB,EAAwBV,EACxBW,EAAsBV,IAEtBS,EAAwBV,EAAiB,EACzCW,EAAsBV,EAAe,GAEzCW,EAAQnD,EAAYmC,KAAK,QACzBtG,EAAuBsH,EAAMlB,IAAIgB,GAAwBE,EAAMlB,IAAIiB,UAGpEzC,EAAanD,QAwPxB+F,iBArPJ,SAA0B3D,GACtB,IAAIG,EAAIC,OAAOC,eACf,GAAc,QAAVF,EAAEK,KACF,OAEJ,IAAIN,EAAQC,EAAEO,WAAW,GACzB,IACIJ,EADAC,EAAML,EAAMS,wBAGZL,EADU,+BAAVC,EAAIK,GACUC,EAAEN,GAEFM,EAAEN,GAAKO,QAAQ,gCAEjC,IAAIC,EAAeF,EAAEN,GAAKO,QAAQ,gCAIKI,GAApBhB,EAAMe,aAA+Bf,EAAMgB,gBAC7BE,GAAjBlB,EAAMiB,UAAyBjB,EAAMkB,aACrD,GAAId,EAAY1C,OAAS,EAAG,CACxB,IAAImF,EAAY7B,EAAeK,WACN,+BAArBL,EAAeN,KAES,IADxBmC,EAAYlC,EAAEK,GAAgBuB,KAAK,SACrB7E,SACVsD,EAAeQ,UAAY,gBAC3BqB,EAAYlC,EAAEK,GAAgBuB,KAAK,SAGvCrB,GADA2B,EAAYA,EAAUR,IAAIQ,EAAUnF,OAAS,IACrB8D,UAAU9D,SAGd,IAApBsC,EAAMc,WACNd,EAAM0D,iBAEV,IAKIvC,EAAWe,EALXa,EAAeF,EAAUrB,UACzByB,EAAQ,GAAIC,EAAS,GACrBrB,EAAK,EAAGC,EAAKZ,EAIjB,GAHA+B,EAAQF,EAAad,UAAUJ,EAAIC,GACnCoB,EAASH,EAAad,UAAUH,EAAIiB,EAAarF,QAER,QAArCsD,EAAeK,WAAWiB,QAAmB,CAC7C,IAAIqB,EAAWvD,EAAYmC,KAAK,QAEhC,IADApB,EAAYwC,EAASnB,MAAMK,KACVc,EAASjG,OAAS,GAAe,IAAVwF,EAAc,CAClD,IAAIU,EAAMD,EAASxC,GAAWK,UAE1BU,EADiC,MAAjC0B,EAAI5F,OAAO4F,EAAIlG,OAAS,EAAG,GACpB,gBAAkBmF,EAAUV,MAAM7E,QAAU,KAAO2F,EAAQ,YAE3D,gBAAkBJ,EAAUV,MAAM7E,QAAU,KAAO2F,EAAQ,mBAGtEf,EAAO,gBAAkBW,EAAUV,MAAM7E,QAAU,KAAO2F,EAAQ,KAAOC,EAAS,UAEtFvC,EAAEkC,GAAWJ,YAAYP,OACtB,CACH,IAAI5E,EAAUzB,EAAmBiE,GAMjC,GAJIoC,EADU,IAAVgB,EACO,gBAAkB5F,EAAU,KAAO2F,EAAQ,cAE3C,gBAAkB3F,EAAU,KAAO2F,EAAQ,KAAOC,EAAS,UAE7C,+BAArBlC,EAAeN,GAAqC,CACpDC,EAAEkC,GAAWJ,YAAYP,GACzB,IAAIyB,EAAWvD,EAAYmC,KAAK,QAChCpB,EAAYwC,EAASjG,OAAS,EAC9BwD,EAAcyC,EAAStB,IAAIlB,GAAWK,UAAU9D,OAAS,OAEzDiD,EAAEkC,GAAWpB,KAAKS,GAClBf,EAAY,EAGpBjF,EAA0BkE,EAAYmC,KAAK,QAAQF,IAAIlB,GAAYD,EAAc,QAC1EL,EAAanD,QA8KxBmG,gCA3KJ,SAAyC/D,EAAM/B,EAAKE,GAChD,GAAe,MAAX6B,EAAKgE,GACL,OAEJ,IAAIjG,EAAIiC,EAAKgE,GAAGjG,EAChB,GAAS,MAALA,EAGJ,IAAK,IAAID,EAAI,EAAGA,EAAIC,EAAEH,OAAQE,IACfC,EAAED,GACRG,GAAOE,GAkKhBrB,yBAA0BA,EAC1BD,sBAAuBA","file":"../../controllers/inlineString.js","sourcesContent":["define([\n    \"../utils/util\",\n    '../methods/cells',\n    '../widgets/cursorPos',\n    '../locale/locale',\n    '../store'\n], function (m_util,m_cells,m_cursorPos, locale, Store) {\n    'use strict';\n    const {textTrim} = m_util;\n    const {getFontStyleByCell,isInlineStringCell,isInlineStringCT} = m_cells;\n\n\n    const {selectTextContent, selectTextContentCross, selectTextContentCollapse} = m_cursorPos;\n    const inlineStyleAffectAttribute = {\n        'bl': 1,\n        'it': 1,\n        'ff': 1,\n        'cl': 1,\n        'un': 1,\n        'fs': 1,\n        'fc': 1\n    };\n    const inlineStyleAffectCssName = {\n        'font-weight': 1,\n        'font-style': 1,\n        'font-family': 1,\n        'text-decoration': 1,\n        'border-bottom': 1,\n        'font-size': 1,\n        'color': 1\n    };\n\n    const {convertCssToStyleList,convertSpanToShareString} = m_util;\n\n    function updateInlineStringFormat(cell, attr, value, $input) {\n        // let s = Store.inlineStringEditCache;\n        var w = window.getSelection();\n        var range;\n        if (w.type == 'None') {\n            range = Store.inlineStringEditRange;\n        } else {\n            range = w.getRangeAt(0);\n        }\n        // if(isInlineStringCell(cell)){\n        //     if(Store.inlineStringEditCache==null){\n        //         Store.inlineStringEditCache = JSON.parse(JSON.stringify(cell.ct.s));\n        //     }\n        // }\n        // else{\n        //     Store.inlineStringEditCache = [{\n        //         v:cell.v\n        //     }];\n        // }\n        let cac = range.commonAncestorContainer;\n        let $textEditor;\n        if (cac.id == 'luckysheet-rich-text-editor') {\n            $textEditor = $(cac);\n        } else {\n            $textEditor = $(cac).closest('#luckysheet-rich-text-editor');\n        }\n        let $functionbox = $(cac).closest('#luckysheet-functionbox-cell');\n        if ($textEditor.length == 0 && $functionbox.length == 0 && Store.inlineStringEditRange != null) {\n            range = Store.inlineStringEditRange;\n            cac = range.commonAncestorContainer;\n            if (cac.id == 'luckysheet-rich-text-editor') {\n                $textEditor = $(cac);\n            } else {\n                $textEditor = $(cac).closest('#luckysheet-rich-text-editor');\n            }\n            $functionbox = $(cac).closest('#luckysheet-functionbox-cell');\n        }\n        if (range.collapsed === true) {\n            return;\n        }\n        let endContainer = range.endContainer, startContainer = range.startContainer;\n        let endOffset = range.endOffset, startOffset = range.startOffset;\n        if ($textEditor.length > 0) {\n            if (startContainer === endContainer) {\n                let span = startContainer.parentNode, spanIndex, inherit = false;\n                let content = span.innerHTML;\n                let fullContent = $textEditor.html();\n                if (fullContent.substr(0, 5) != '<span') {\n                    inherit = true;\n                }\n                let left = '', mid = '', right = '';\n                let s1 = 0, s2 = startOffset, s3 = endOffset, s4 = content.length;\n                left = content.substring(s1, s2);\n                mid = content.substring(s2, s3);\n                right = content.substring(s3, s4);\n                let cont = '';\n                if (left != '') {\n                    let cssText = span.style.cssText;\n                    if (inherit) {\n                        let box = $(span).closest('#luckysheet-input-box').get(0);\n                        if (box != null) {\n                            cssText = extendCssText(box.style.cssText, cssText);\n                        }\n                    }\n                    cont += \"<span style='\" + cssText + \"'>\" + left + '</span>';\n                }\n                if (mid != '') {\n                    // let styleObj = {};\n                    // styleObj[attr] = value;\n                    // let s = getFontStyleByCell(styleObj, undefined, undefined, false);\n                    // let ukey = textTrim(s.substr(0, s.indexOf(':')));\n                    // let uvalue = textTrim(s.substr(s.indexOf(':')+1));\n                    // uvalue = uvalue.substr(0, uvalue.length-1);\n                    // let cssText = span.style.cssText;\n                    // cssText = removeClassWidthCss(cssText, attr);\n                    let cssText = getCssText(span.style.cssText, attr, value);\n                    if (inherit) {\n                        let box = $(span).closest('#luckysheet-input-box').get(0);\n                        if (box != null) {\n                            cssText = extendCssText(box.style.cssText, cssText);\n                        }\n                    }\n                    cont += \"<span style='\" + cssText + \"'>\" + mid + '</span>';\n                }\n                if (right != '') {\n                    let cssText = span.style.cssText;\n                    if (inherit) {\n                        let box = $(span).closest('#luckysheet-input-box').get(0);\n                        if (box != null) {\n                            cssText = extendCssText(box.style.cssText, cssText);\n                        }\n                    }\n                    cont += \"<span style='\" + cssText + \"'>\" + right + '</span>';\n                }\n                if (startContainer.parentNode.tagName == 'SPAN') {\n                    spanIndex = $textEditor.find('span').index(span);\n                    $(span).replaceWith(cont);\n                } else {\n                    spanIndex = 0;\n                    $(span).html(cont);\n                }\n                let seletedNodeIndex = 0;\n                if (s1 == s2) {\n                    seletedNodeIndex = spanIndex;\n                } else {\n                    seletedNodeIndex = spanIndex + 1;\n                }\n                selectTextContent($textEditor.find('span').get(seletedNodeIndex));\n            } else {\n                if (startContainer.parentNode.tagName == 'SPAN' && endContainer.parentNode.tagName == 'SPAN') {\n                    let startSpan = startContainer.parentNode, startSpanIndex;\n                    let endSpan = endContainer.parentNode, endSpanIndex;\n                    startSpanIndex = $textEditor.find('span').index(startSpan);\n                    endSpanIndex = $textEditor.find('span').index(endSpan);\n                    let startContent = startSpan.innerHTML, endContent = endSpan.innerHTML;\n                    let sleft = '', sright = '', eleft = '', eright = '';\n                    let s1 = 0, s2 = startOffset, s3 = endOffset, s4 = endContent.length;\n                    sleft = startContent.substring(s1, s2);\n                    sright = startContent.substring(s2, startContent.length);\n                    eleft = endContent.substring(0, s3);\n                    eright = endContent.substring(s3, s4);\n                    let spans = $textEditor.find('span');\n                    let replaceSpans = spans.slice(startSpanIndex, endSpanIndex + 1);\n                    let cont = '';\n                    for (let i = 0; i < startSpanIndex; i++) {\n                        let span = spans.get(i), content = span.innerHTML;\n                        cont += \"<span style='\" + span.style.cssText + \"'>\" + content + '</span>';\n                    }\n                    if (sleft != '') {\n                        cont += \"<span style='\" + startSpan.style.cssText + \"'>\" + sleft + '</span>';\n                    }\n                    if (sright != '') {\n                        let cssText = getCssText(startSpan.style.cssText, attr, value);\n                        cont += \"<span style='\" + cssText + \"'>\" + sright + '</span>';\n                    }\n                    if (startSpanIndex < endSpanIndex) {\n                        for (let i = startSpanIndex + 1; i < endSpanIndex; i++) {\n                            let span = spans.get(i), content = span.innerHTML;\n                            cont += \"<span style='\" + span.style.cssText + \"'>\" + content + '</span>';\n                        }\n                    }\n                    if (eleft != '') {\n                        let cssText = getCssText(endSpan.style.cssText, attr, value);\n                        cont += \"<span style='\" + cssText + \"'>\" + eleft + '</span>';\n                    }\n                    if (eright != '') {\n                        cont += \"<span style='\" + endSpan.style.cssText + \"'>\" + eright + '</span>';\n                    }\n                    for (let i = endSpanIndex + 1; i < spans.length; i++) {\n                        let span = spans.get(i), content = span.innerHTML;\n                        cont += \"<span style='\" + span.style.cssText + \"'>\" + content + '</span>';\n                    }\n                    $textEditor.html(cont);    // console.log(replaceSpans, cont);\n                                               // replaceSpans.replaceWith(cont);\n                    // console.log(replaceSpans, cont);\n                    // replaceSpans.replaceWith(cont);\n                    let startSeletedNodeIndex, endSeletedNodeIndex;\n                    if (s1 == s2) {\n                        startSeletedNodeIndex = startSpanIndex;\n                        endSeletedNodeIndex = endSpanIndex;\n                    } else {\n                        startSeletedNodeIndex = startSpanIndex + 1;\n                        endSeletedNodeIndex = endSpanIndex + 1;\n                    }\n                    spans = $textEditor.find('span');\n                    selectTextContentCross(spans.get(startSeletedNodeIndex), spans.get(endSeletedNodeIndex));\n                }\n            }\n        } else if ($functionbox.length > 0) {\n        }\n    }\n    function enterKeyControll(cell) {\n        var w = window.getSelection();\n        if (w.type == 'None') {\n            return;\n        }\n        var range = w.getRangeAt(0);\n        let cac = range.commonAncestorContainer;\n        let $textEditor;\n        if (cac.id == 'luckysheet-rich-text-editor') {\n            $textEditor = $(cac);\n        } else {\n            $textEditor = $(cac).closest('#luckysheet-rich-text-editor');\n        }\n        let $functionbox = $(cac).closest('#luckysheet-functionbox-cell');\n        // if(range.collapsed===true){\n        //     return;\n        // }\n        let endContainer = range.endContainer, startContainer = range.startContainer;\n        let endOffset = range.endOffset, startOffset = range.startOffset;\n        if ($textEditor.length > 0) {\n            let startSpan = startContainer.parentNode;\n            if (startContainer.id == 'luckysheet-rich-text-editor') {\n                startSpan = $(startContainer).find('span');\n                if (startSpan.length == 0) {\n                    startContainer.innerHTML = '<span></span>';\n                    startSpan = $(startContainer).find('span');\n                }\n                startSpan = startSpan.get(startSpan.length - 1);\n                startOffset = startSpan.innerHTML.length;\n            } \n            // let startSpanIndex = $textEditor.find(\"span\").index(startSpan);\n            if (range.collapsed === false) {\n                range.deleteContents();\n            }\n            let startContent = startSpan.innerHTML;\n            let sleft = '', sright = '';\n            let s1 = 0, s2 = startOffset;\n            sleft = startContent.substring(s1, s2);\n            sright = startContent.substring(s2, startContent.length);\n            let spanIndex, cont;\n            if (startContainer.parentNode.tagName == 'SPAN') {\n                let textSpan = $textEditor.find('span');\n                spanIndex = textSpan.index(startSpan);\n                if (spanIndex == textSpan.length - 1 && sright == '') {\n                    let txt = textSpan[spanIndex].innerHTML;\n                    if (txt.substr(txt.length - 1, 1) == '\\n') {\n                        cont = \"<span style='\" + startSpan.style.cssText + \"'>\" + sleft + '\\n' + '</span>';\n                    } else {\n                        cont = \"<span style='\" + startSpan.style.cssText + \"'>\" + sleft + '\\n\\n' + '</span>';\n                    }\n                } else {\n                    cont = \"<span style='\" + startSpan.style.cssText + \"'>\" + sleft + '\\n' + sright + '</span>';\n                }\n                $(startSpan).replaceWith(cont);\n            } else {\n                let cssText = getFontStyleByCell(cell);\n                if (sright == '') {\n                    cont = \"<span style='\" + cssText + \"'>\" + sleft + '\\n\\n' + '</span>';\n                } else {\n                    cont = \"<span style='\" + cssText + \"'>\" + sleft + '\\n' + sright + '</span>';\n                }\n                if (startContainer.id == 'luckysheet-rich-text-editor') {\n                    $(startSpan).replaceWith(cont);\n                    let textSpan = $textEditor.find('span');\n                    spanIndex = textSpan.length - 1;\n                    startOffset = textSpan.get(spanIndex).innerHTML.length - 1;\n                } else {\n                    $(startSpan).html(cont);\n                    spanIndex = 0;\n                }\n            }\n            selectTextContentCollapse($textEditor.find('span').get(spanIndex), startOffset + 1);\n        } else if ($functionbox.length > 0) {\n        }\n    }\n    function updateInlineStringFormatOutside(cell, key, value) {\n        if (cell.ct == null) {\n            return;\n        }\n        let s = cell.ct.s;\n        if (s == null) {\n            return;\n        }\n        for (let i = 0; i < s.length; i++) {\n            let item = s[i];\n            item[key] = value;\n        }\n    }\n\n    const luckyToCssName = {\n        'bl': 'font-weight',\n        'it': 'font-style',\n        'ff': 'font-family',\n        'fs': 'font-size',\n        'fc': 'color',\n        'cl': 'text-decoration',\n        'un': 'border-bottom'\n    };\n    function getClassWithcss(cssText, ukey) {\n        let cssTextArray = cssText.split(';');\n        if (ukey == null || ukey.length == 0) {\n            return cssText;\n        }\n        if (cssText.indexOf(ukey) > -1) {\n            for (let i = 0; i < cssTextArray.length; i++) {\n                let s = cssTextArray[i];\n                s = s.toLowerCase();\n                let key = textTrim(s.substr(0, s.indexOf(':')));\n                let value = textTrim(s.substr(s.indexOf(':') + 1));\n                if (key == ukey) {\n                    return value;\n                }\n            }\n        }\n        return '';\n    }\n    function upsetClassWithCss(cssText, ukey, uvalue) {\n        let cssTextArray = cssText.split(';');\n        let newCss = '';\n        if (ukey == null || ukey.length == 0) {\n            return cssText;\n        }\n        if (cssText.indexOf(ukey) > -1) {\n            for (let i = 0; i < cssTextArray.length; i++) {\n                let s = cssTextArray[i];\n                s = s.toLowerCase();\n                let key = textTrim(s.substr(0, s.indexOf(':')));\n                let value = textTrim(s.substr(s.indexOf(':') + 1));\n                if (key == ukey) {\n                    newCss += key + ':' + uvalue + ';';\n                } else if (key.length > 0) {\n                    newCss += key + ':' + value + ';';\n                }\n            }\n        } else if (ukey.length > 0) {\n            cssText += ukey + ':' + uvalue + ';';\n            newCss = cssText;\n        }\n        return newCss;\n    }\n    function removeClassWidthCss(cssText, ukey) {\n        let cssTextArray = cssText.split(';');\n        let newCss = '';\n        let oUkey = ukey;\n        if (ukey == null || ukey.length == 0) {\n            return cssText;\n        }\n        if (ukey in luckyToCssName) {\n            ukey = luckyToCssName[ukey];\n        }\n        if (cssText.indexOf(ukey) > -1) {\n            for (let i = 0; i < cssTextArray.length; i++) {\n                let s = cssTextArray[i];\n                s = s.toLowerCase();\n                let key = textTrim(s.substr(0, s.indexOf(':')));\n                let value = textTrim(s.substr(s.indexOf(':') + 1));\n                if (key == ukey || oUkey == 'cl' && key == 'lucky-strike' || oUkey == 'un' && key == 'lucky-underline') {\n                    continue;\n                } else if (key.length > 0) {\n                    newCss += key + ':' + value + ';';\n                }\n            }\n        } else {\n            newCss = cssText;\n        }\n        return newCss;\n    }\n    function getCssText(cssText, attr, value) {\n        let styleObj = {};\n        styleObj[attr] = value;\n        if (attr == 'un') {\n            let fontColor = getClassWithcss(cssText, 'color');\n            if (fontColor == '') {\n                fontColor = '#000000';\n            }\n            let fs = getClassWithcss(cssText, 'font-size');\n            if (fs == '') {\n                fs = 11;\n            }\n            fs = parseInt(fs);\n            styleObj['_fontSize'] = fs;\n            styleObj['_color'] = fontColor;\n        }\n        let s = getFontStyleByCell(styleObj, undefined, undefined, false);\n        let ukey = textTrim(s.substr(0, s.indexOf(':')));\n        let uvalue = textTrim(s.substr(s.indexOf(':') + 1));\n        uvalue = uvalue.substr(0, uvalue.length - 1);    // let cssText = span.style.cssText;\n        // let cssText = span.style.cssText;\n        cssText = removeClassWidthCss(cssText, attr);\n        cssText = upsetClassWithCss(cssText, ukey, uvalue);\n        return cssText;\n    }\n    function extendCssText(origin, cover, isLimit = true) {\n        let originArray = origin.split(';');\n        let coverArray = cover.split(';');\n        let newCss = '';\n        let addKeyList = {};\n        for (let i = 0; i < originArray.length; i++) {\n            let so = originArray[i], isAdd = true;\n            so = so.toLowerCase();\n            let okey = textTrim(so.substr(0, so.indexOf(':')));\n            let ovalue = textTrim(so.substr(so.indexOf(':') + 1));\n            if (isLimit) {\n                if (!(okey in inlineStyleAffectCssName)) {\n                    continue;\n                }\n            }\n            for (let a = 0; a < coverArray.length; a++) {\n                let sc = coverArray[a];\n                sc = sc.toLowerCase();\n                let ckey = textTrim(sc.substr(0, sc.indexOf(':')));\n                let cvalue = textTrim(sc.substr(sc.indexOf(':') + 1));\n                if (okey == ckey) {\n                    newCss += ckey + ':' + cvalue + ';';\n                    isAdd = false;\n                    continue;\n                }\n            }\n            if (isAdd) {\n                newCss += okey + ':' + ovalue + ';';\n            }\n            addKeyList[okey] = 1;\n        }\n        for (let a = 0; a < coverArray.length; a++) {\n            let sc = coverArray[a];\n            sc = sc.toLowerCase();\n            let ckey = textTrim(sc.substr(0, sc.indexOf(':')));\n            let cvalue = textTrim(sc.substr(sc.indexOf(':') + 1));\n            if (isLimit) {\n                if (!(ckey in inlineStyleAffectCssName)) {\n                    continue;\n                }\n            }\n            if (!(ckey in addKeyList)) {\n                newCss += ckey + ':' + cvalue + ';';\n            }\n        }\n        return newCss;\n    }\n    return {\n        inlineStyleAffectAttribute: inlineStyleAffectAttribute,\n        inlineStyleAffectCssName: inlineStyleAffectCssName,\n        isInlineStringCell: isInlineStringCell,\n        isInlineStringCT: isInlineStringCT,\n        updateInlineStringFormat: updateInlineStringFormat,\n        enterKeyControll: enterKeyControll,\n        updateInlineStringFormatOutside: updateInlineStringFormatOutside,\n        convertSpanToShareString: convertSpanToShareString,\n        convertCssToStyleList: convertCssToStyleList\n    };\n});"]}