{"version":3,"sources":["controllers/sheetSearch.js"],"names":["define","luckysheet_searcharray","arr","y","index","length","i","row","row_pre","row_index","i_ed","luckysheetorder_search","key","low","high","mid","parseInt","luckysheetbinary_search"],"mappings":";;;;;;;AAAAA,OAAO,WACH,aAqDA,OAASC,uBATT,SAAgCC,EAAKC,GACjC,IAAIC,EAAQF,EAAIG,OAAS,EAMzB,OAJID,EADAF,EAAIG,OAAS,IAAMF,GAAKD,EAAI,KAAOC,GAAKD,EAAIE,EAAQ,IA9B5D,SAAgCF,EAAKC,GACjC,IAAIG,EAAI,EAAGC,EAAM,EAAGC,EAAU,EAAGC,GAAa,EAAGC,EAAOR,EAAIG,OAAS,EACrE,KAAOC,EAAIJ,EAAIG,QAAUK,GAAQ,GAAKA,GAAQJ,GAAG,CAO7C,GANAC,EAAML,EAAIQ,GAMNP,IAJAK,EADQ,GAARE,EACU,EAEAR,EAAIQ,EAAO,KAELP,EAAII,EAAK,CACzBE,EAAYC,EACZ,MAQJ,GANAH,EAAML,EAAII,GAMNH,IAJAK,EADK,GAALF,EACU,EAEAJ,EAAII,EAAI,KAEFH,EAAII,EAAK,CACzBE,EAAYH,EACZ,MAEJA,IACAI,IAEJ,OAAOD,EAKKE,CAAuBT,EAAKC,GA9C5C,SAAiCD,EAAKU,GAClC,IAAIC,EAAM,EAAGC,EAAOZ,EAAIG,OAAS,EACjC,KAAOQ,GAAOC,GAAM,CAChB,IAAIC,EAAMC,UAAUF,EAAOD,GAAO,GAClC,GAAID,EAAMV,EAAIa,KAAgB,GAAPA,GAAYH,GAAOV,EAAIa,EAAM,IAChD,OAAOA,EACJ,GAAIH,GAAOV,EAAIa,GAClBF,EAAME,EAAM,MACT,CAAA,KAAIH,EAAMV,EAAIa,IAGjB,OAAQ,EAFRD,EAAOC,EAAM,IAuCTE,CAAwBf,EAAKC","file":"../../controllers/sheetSearch.js","sourcesContent":["define(function () {\n    'use strict';\n    function luckysheetbinary_search(arr, key) {\n        let low = 0, high = arr.length - 1;\n        while (low <= high) {\n            let mid = parseInt((high + low) / 2);\n            if (key < arr[mid] && (mid == 0 || key >= arr[mid - 1])) {\n                return mid;\n            } else if (key >= arr[mid]) {\n                low = mid + 1;\n            } else if (key < arr[mid]) {\n                high = mid - 1;\n            } else {\n                return -1;\n            }\n        }\n    }\n    function luckysheetorder_search(arr, y) {\n        let i = 0, row = 0, row_pre = 0, row_index = -1, i_ed = arr.length - 1;\n        while (i < arr.length && i_ed >= 0 && i_ed >= i) {\n            row = arr[i_ed];\n            if (i_ed == 0) {\n                row_pre = 0;\n            } else {\n                row_pre = arr[i_ed - 1];\n            }\n            if (y >= row_pre && y < row) {\n                row_index = i_ed;\n                break;\n            }\n            row = arr[i];\n            if (i == 0) {\n                row_pre = 0;\n            } else {\n                row_pre = arr[i - 1];\n            }\n            if (y >= row_pre && y < row) {\n                row_index = i;\n                break;\n            }\n            i++;\n            i_ed--;\n        }\n        return row_index;\n    }\n    function luckysheet_searcharray(arr, y) {\n        let index = arr.length - 1;\n        if (arr.length < 40 || y <= arr[20] || y >= arr[index - 20]) {\n            index = luckysheetorder_search(arr, y);\n        } else {\n            index = luckysheetbinary_search(arr, y);\n        }\n        return index;\n    }\n    return { luckysheet_searcharray };\n});"]}