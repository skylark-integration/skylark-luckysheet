{"version":3,"sources":["controllers/editor.js"],"names":["define","browser","formula","m_getdata","m_get","Store","datagridgrowth","getSheetIndex","editor","controlHandler","dataChe","range","d","this","deepCopyFlowData","flowdata","last","luckysheet_select_save","length","curR","curC","rlen","clen","addr","addc","concat","r","x","c","value","refreshGridAll","refreshRange","clearRangeByindex","st_r","ed_r","st_c","ed_c","sheetIndex","index","$","extend","luckysheetfile","delFunctionGroup","execFunctionGroup","currentSheetIndex","row","column","jfrefreshrange","controlHandlerD","r1","r2","c1","c2","i","j","bind","webWorkerFlowDataCache"],"mappings":";;;;;;;AAAAA,QACI,mBACA,6BACA,qBACA,iBACA,YACD,SAAUC,EAASC,EAASC,EAAWC,EAAOC,GAC7C,aACA,MAAMC,eAACA,GAAkBH,GACnBI,cAACA,GAAiBH,EAClBI,GAMFC,eAAgB,SAAUC,EAASC,GAC/B,IACIC,EADQC,KACEC,iBAAiBT,EAAMU,UAGjCC,EAAOL,GAASN,EAAMY,uBAAuBZ,EAAMY,uBAAuBC,OAAS,GACnFC,EAAsB,MAAfH,EAAU,IAAY,EAAIA,EAAU,IAAE,GAC7CI,EAAyB,MAAlBJ,EAAa,OAAY,EAAIA,EAAa,OAAE,GACnDK,EAAOX,EAAQQ,OAAQI,EAAOZ,EAAQ,GAAGQ,OACzCK,EAAOJ,EAAOE,EAAOT,EAAEM,OAAQM,EAAOJ,EAAOE,EAAOV,EAAE,GAAGM,QACzDK,EAAO,GAAKC,EAAO,KACnBZ,EAAIN,KAAkBmB,OAAOb,GAAIW,EAAMC,GAAM,IAEjD,IAAK,IAAIE,EAAI,EAAGA,EAAIL,EAAMK,IAAK,CAC3B,IAAIC,KAAOF,OAAOb,EAAEc,EAAIP,IACxB,IAAK,IAAIS,EAAI,EAAGA,EAAIN,EAAMM,IAAK,CAC3B,IAAIC,EAAQ,GACM,MAAdnB,EAAQgB,IAA+B,MAAjBhB,EAAQgB,GAAGE,KACjCC,EAAQnB,EAAQgB,GAAGE,IAEvBD,EAAEC,EAAIR,GAAQS,EAElBjB,EAAEc,EAAIP,GAAQQ,EAEdJ,EAAO,GAAKC,EAAO,EAEnBnB,EAAMyB,eAAelB,EAAE,GAAGM,OAAQN,EAAEM,OAAQN,EAAG,KAAMP,EAAMY,uBAAwB,iBAGnFZ,EAAM0B,aAAanB,EAAGP,EAAMY,yBAGpCe,kBAAmB,SAAUC,EAAMC,EAAMC,EAAMC,EAAMC,GACjD,IAAIC,EAAQ/B,EAAc8B,GACtBzB,EAAI2B,EAAEC,QAAO,KAAUnC,EAAMoC,eAAeH,GAAa,MAC7D,IAAK,IAAIZ,EAAIO,EAAMP,GAAKQ,EAAMR,IAAK,CAC/B,IAAIC,KAAOF,OAAOb,EAAEc,IACpB,IAAK,IAAIE,EAAIO,EAAMP,GAAKQ,EAAMR,IAC1B1B,EAAQwC,iBAAiBhB,EAAGE,GAC5B1B,EAAQyC,kBAAkBjB,EAAGE,EAAG,IAChCD,EAAEC,GAAK,KAEXhB,EAAEc,GAAKC,EAEX,GAAIU,GAAchC,EAAMuC,kBAAmB,CAC5BV,EAAOD,EAAO,EACd,IACP5B,EAAM0B,aAAanB,IACXiC,KACIZ,EACAC,GAEJY,QACIX,EACAC,MAIZW,eAAenC,GACXiC,KACIZ,EACAC,GAEJY,QACIX,EACAC,UAKZ/B,EAAMoC,eAAeH,GAAa,KAAI1B,GAG9CoC,gBAAiB,SAAUtC,GACvB,IACIE,EADQC,KACEC,iBAAiBT,EAAMU,UAEjCC,EAAOX,EAAMY,uBAAuBZ,EAAMY,uBAAuBC,OAAS,GAC1E+B,EAAKjC,EAAU,IAAE,GAAIkC,EAAKlC,EAAU,IAAE,GACtCmC,EAAKnC,EAAa,OAAE,GAAIoC,EAAKpC,EAAa,OAAE,GAC5CK,EAAOX,EAAQQ,OAAQI,EAAOZ,EAAQ,GAAGQ,OACzCK,EAAO0B,EAAK5B,EAAOT,EAAEM,OAAQM,EAAO2B,EAAK7B,EAAOV,EAAE,GAAGM,QACrDK,EAAO,GAAKC,EAAO,KACnBZ,EAAIN,KAAkBmB,OAAOb,GAAIW,EAAMC,GAAM,IAEjD,IAAK,IAAIE,EAAIuB,EAAIvB,GAAKwB,EAAIxB,IACtB,IAAK,IAAIE,EAAIuB,EAAIvB,GAAKwB,EAAIxB,IACtBhB,EAAEc,GAAGE,GAAK,KAGlB,IAAK,IAAIyB,EAAI,EAAGA,EAAIhC,EAAMgC,IACtB,IAAK,IAAIC,EAAI,EAAGA,EAAIhC,EAAMgC,IACtB1C,EAAEqC,EAAKI,GAAGF,EAAKG,GAAK5C,EAAQ2C,GAAGC,GAGvC,IAAI3C,IAEIkC,KACII,EACAC,GAEJJ,QACIK,EACAC,KAIJP,KACII,EACAA,EAAK5B,EAAO,GAEhByB,QACIK,EACAA,EAAK7B,EAAO,KAIxBjB,EAAM0B,aAAanB,EAAGD,KAO9B,OAHAH,EAAOM,iBAAmBT,EAAMS,iBAAiByC,KAAKlD,GACtDG,EAAOgD,uBAAyBnD,EAAMmD,uBAAuBD,KAAKlD,GAE3DG","file":"../../controllers/editor.js","sourcesContent":["define([\n    '../utils/browser',\n    '../methods/formula_methods',\n    '../methods/getdata',\n    '../methods/get',\n    '../store'\n], function (browser, formula, m_getdata, m_get, Store) {\n    'use strict';\n    const {datagridgrowth} = m_getdata;\n    const {getSheetIndex} = m_get;\n    const editor = {\n        /**\n     * @param {Array} dataChe \n     * @param {Object} range 是否指定选区，默认为当前选区\n     * @since Add range parameter. Update by siwei@2020-09-10. \n     */\n        controlHandler: function (dataChe, range) {\n            let _this = this;\n            let d = _this.deepCopyFlowData(Store.flowdata);\n            //取数据\n            // let last = Store.luckysheet_select_save[Store.luckysheet_select_save.length - 1];\n            let last = range || Store.luckysheet_select_save[Store.luckysheet_select_save.length - 1];\n            let curR = last['row'] == null ? 0 : last['row'][0];\n            let curC = last['column'] == null ? 0 : last['column'][0];\n            let rlen = dataChe.length, clen = dataChe[0].length;\n            let addr = curR + rlen - d.length, addc = curC + clen - d[0].length;\n            if (addr > 0 || addc > 0) {\n                d = datagridgrowth([].concat(d), addr, addc, true);\n            }\n            for (let r = 0; r < rlen; r++) {\n                let x = [].concat(d[r + curR]);\n                for (let c = 0; c < clen; c++) {\n                    let value = '';\n                    if (dataChe[r] != null && dataChe[r][c] != null) {\n                        value = dataChe[r][c];\n                    }\n                    x[c + curC] = value;\n                }\n                d[r + curR] = x;\n            }\n            if (addr > 0 || addc > 0) {\n                ///jfrefreshgridall(d[0].length, d.length, d, null, Store.luckysheet_select_save, 'datachangeAll');\n                Store.refreshGridAll(d[0].length, d.length, d, null, Store.luckysheet_select_save, 'datachangeAll');\n            } else {\n                ///jfrefreshrange(d, Store.luckysheet_select_save);\n                Store.refreshRange(d, Store.luckysheet_select_save);\n            }\n        },\n        clearRangeByindex: function (st_r, ed_r, st_c, ed_c, sheetIndex) {\n            let index = getSheetIndex(sheetIndex);\n            let d = $.extend(true, [], Store.luckysheetfile[index]['data']);\n            for (let r = st_r; r <= ed_r; r++) {\n                let x = [].concat(d[r]);\n                for (let c = st_c; c <= ed_c; c++) {\n                    formula.delFunctionGroup(r, c);\n                    formula.execFunctionGroup(r, c, '');\n                    x[c] = null;\n                }\n                d[r] = x;\n            }\n            if (sheetIndex == Store.currentSheetIndex) {\n                let rlen = ed_r - st_r + 1, clen = ed_c - st_c + 1;\n                if (rlen > 5000) {\n                    Store.refreshRange(d, [{\n                            'row': [\n                                st_r,\n                                ed_r\n                            ],\n                            'column': [\n                                st_c,\n                                ed_c\n                            ]\n                        }]);\n                } else {\n                    jfrefreshrange(d, {\n                        'row': [\n                            st_r,\n                            ed_r\n                        ],\n                        'column': [\n                            st_c,\n                            ed_c\n                        ]\n                    });\n                }\n            } else {\n                Store.luckysheetfile[index]['data'] = d;\n            }\n        },\n        controlHandlerD: function (dataChe) {\n            let _this = this;\n            let d = _this.deepCopyFlowData(Store.flowdata); \n            //取数据\n            let last = Store.luckysheet_select_save[Store.luckysheet_select_save.length - 1];\n            let r1 = last['row'][0], r2 = last['row'][1];\n            let c1 = last['column'][0], c2 = last['column'][1];\n            let rlen = dataChe.length, clen = dataChe[0].length;\n            let addr = r1 + rlen - d.length, addc = c1 + clen - d[0].length;\n            if (addr > 0 || addc > 0) {\n                d = datagridgrowth([].concat(d), addr, addc, true);\n            }\n            for (let r = r1; r <= r2; r++) {\n                for (let c = c1; c <= c2; c++) {\n                    d[r][c] = null;\n                }\n            }\n            for (let i = 0; i < rlen; i++) {\n                for (let j = 0; j < clen; j++) {\n                    d[r1 + i][c1 + j] = dataChe[i][j];\n                }\n            }\n            let range = [\n                {\n                    'row': [\n                        r1,\n                        r2\n                    ],\n                    'column': [\n                        c1,\n                        c2\n                    ]\n                },\n                {\n                    'row': [\n                        r1,\n                        r1 + rlen - 1\n                    ],\n                    'column': [\n                        c1,\n                        c1 + clen - 1\n                    ]\n                }\n            ];\n            Store.refreshRange(d, range);\n        }\n    };\n\n    editor.deepCopyFlowData = Store.deepCopyFlowData.bind(Store);\n    editor.webWorkerFlowDataCache = Store.webWorkerFlowDataCache.bind(Store);\n    \n    return editor;\n});"]}