{"version":3,"sources":["global/border.js"],"names":["define","m_get","m_util","Store","getSheetIndex","getObjType","getBorderInfoComputeRange","dataset_row_st","dataset_row_ed","dataset_col_st","dataset_col_ed","sheetIndex","cfg","data","borderInfoCompute","config","flowdata","luckysheetfile","borderInfo","length","i","rangeType","borderType","borderColor","color","borderStyle","style","borderRange","range","j","bd_r1","row","bd_r2","bd_c1","column","bd_c2","bd_r","l","bd_c_left","mc","cell_left","r","c","cs","bd_c_right","cell_right","bd_c","t","bd_r_top","cell_top","rs","b","bd_r_bottom","cell_bottom","cell","value","row_index","col_index","mc_l","mc_t","getBorderInfoCompute"],"mappings":"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","file":"../../global/border.js","sourcesContent":["define([\n    '../methods/get',\n    '../utils/util',\n    '../store'\n], function (m_get, m_util, Store) {\n    'use strict';\n    const {getSheetIndex} = m_get;\n    const {getObjType} = m_util;\n    //获取表格边框数据计算值\n    function getBorderInfoComputeRange(dataset_row_st, dataset_row_ed, dataset_col_st, dataset_col_ed, sheetIndex) {\n        let borderInfoCompute = {};\n        let cfg, data;\n        if (sheetIndex == null) {\n            cfg = Store.config;\n            data = Store.flowdata;\n        } else {\n            cfg = Store.luckysheetfile[getSheetIndex(sheetIndex)].config;\n            data = Store.luckysheetfile[getSheetIndex(sheetIndex)].data;\n        }\n        let borderInfo = cfg['borderInfo'];\n        if (borderInfo != null && borderInfo.length > 0) {\n            for (let i = 0; i < borderInfo.length; i++) {\n                let rangeType = borderInfo[i].rangeType;\n                if (rangeType == 'range') {\n                    let borderType = borderInfo[i].borderType;\n                    let borderColor = borderInfo[i].color;\n                    let borderStyle = borderInfo[i].style;\n                    let borderRange = borderInfo[i].range;\n                    for (let j = 0; j < borderRange.length; j++) {\n                        let bd_r1 = borderRange[j].row[0], bd_r2 = borderRange[j].row[1];\n                        let bd_c1 = borderRange[j].column[0], bd_c2 = borderRange[j].column[1];\n                        if (bd_r1 < dataset_row_st) {\n                            bd_r1 = dataset_row_st;\n                        }\n                        if (bd_r2 > dataset_row_ed) {\n                            bd_r2 = dataset_row_ed;\n                        }\n                        if (bd_c1 < dataset_col_st) {\n                            bd_c1 = dataset_col_st;\n                        }\n                        if (bd_c2 > dataset_col_ed) {\n                            bd_c2 = dataset_col_ed;\n                        }\n                        if (borderType == 'border-left') {\n                            for (let bd_r = bd_r1; bd_r <= bd_r2; bd_r++) {\n                                if (cfg['rowhidden'] != null && cfg['rowhidden'][bd_r] != null) {\n                                    continue;\n                                }\n                                if (borderInfoCompute[bd_r + '_' + bd_c1] == null) {\n                                    borderInfoCompute[bd_r + '_' + bd_c1] = {};\n                                }\n                                borderInfoCompute[bd_r + '_' + bd_c1].l = {\n                                    'color': borderColor,\n                                    'style': borderStyle\n                                };\n                                let bd_c_left = bd_c1 - 1;\n                                if (bd_c_left >= 0 && borderInfoCompute[bd_r + '_' + bd_c_left]) {\n                                    if (data[bd_r] != null && getObjType(data[bd_r][bd_c_left]) == 'object' && data[bd_r][bd_c_left].mc != null) {\n                                        let cell_left = data[bd_r][bd_c_left];\n                                        let mc = cfg['merge'][cell_left.mc.r + '_' + cell_left.mc.c];\n                                        if (mc.c + mc.cs - 1 == bd_c_left) {\n                                            borderInfoCompute[bd_r + '_' + bd_c_left].r = {\n                                                'color': borderColor,\n                                                'style': borderStyle\n                                            };\n                                        }\n                                    } else {\n                                        borderInfoCompute[bd_r + '_' + bd_c_left].r = {\n                                            'color': borderColor,\n                                            'style': borderStyle\n                                        };\n                                    }\n                                }\n                            }\n                        } else if (borderType == 'border-right') {\n                            for (let bd_r = bd_r1; bd_r <= bd_r2; bd_r++) {\n                                if (cfg['rowhidden'] != null && cfg['rowhidden'][bd_r] != null) {\n                                    continue;\n                                }\n                                if (borderInfoCompute[bd_r + '_' + bd_c2] == null) {\n                                    borderInfoCompute[bd_r + '_' + bd_c2] = {};\n                                }\n                                borderInfoCompute[bd_r + '_' + bd_c2].r = {\n                                    'color': borderColor,\n                                    'style': borderStyle\n                                };\n                                let bd_c_right = bd_c2 + 1;\n                                if (bd_c_right < data[0].length && borderInfoCompute[bd_r + '_' + bd_c_right]) {\n                                    if (data[bd_r] != null && getObjType(data[bd_r][bd_c_right]) == 'object' && data[bd_r][bd_c_right].mc != null) {\n                                        let cell_right = data[bd_r][bd_c_right];\n                                        let mc = cfg['merge'][cell_right.mc.r + '_' + cell_right.mc.c];\n                                        if (mc.c == bd_c_right) {\n                                            borderInfoCompute[bd_r + '_' + bd_c_right].l = {\n                                                'color': borderColor,\n                                                'style': borderStyle\n                                            };\n                                        }\n                                    } else {\n                                        borderInfoCompute[bd_r + '_' + bd_c_right].l = {\n                                            'color': borderColor,\n                                            'style': borderStyle\n                                        };\n                                    }\n                                }\n                            }\n                        } else if (borderType == 'border-top') {\n                            if (cfg['rowhidden'] != null && cfg['rowhidden'][bd_r1] != null) {\n                                continue;\n                            }\n                            for (let bd_c = bd_c1; bd_c <= bd_c2; bd_c++) {\n                                if (borderInfoCompute[bd_r1 + '_' + bd_c] == null) {\n                                    borderInfoCompute[bd_r1 + '_' + bd_c] = {};\n                                }\n                                borderInfoCompute[bd_r1 + '_' + bd_c].t = {\n                                    'color': borderColor,\n                                    'style': borderStyle\n                                };\n                                let bd_r_top = bd_r1 - 1;\n                                if (bd_r_top >= 0 && borderInfoCompute[bd_r_top + '_' + bd_c]) {\n                                    if (data[bd_r_top] != null && getObjType(data[bd_r_top][bd_c]) == 'object' && data[bd_r_top][bd_c].mc != null) {\n                                        let cell_top = data[bd_r_top][bd_c];\n                                        let mc = cfg['merge'][cell_top.mc.r + '_' + cell_top.mc.c];\n                                        if (mc.r + mc.rs - 1 == bd_r_top) {\n                                            borderInfoCompute[bd_r_top + '_' + bd_c].b = {\n                                                'color': borderColor,\n                                                'style': borderStyle\n                                            };\n                                        }\n                                    } else {\n                                        borderInfoCompute[bd_r_top + '_' + bd_c].b = {\n                                            'color': borderColor,\n                                            'style': borderStyle\n                                        };\n                                    }\n                                }\n                            }\n                        } else if (borderType == 'border-bottom') {\n                            if (cfg['rowhidden'] != null && cfg['rowhidden'][bd_r2] != null) {\n                                continue;\n                            }\n                            for (let bd_c = bd_c1; bd_c <= bd_c2; bd_c++) {\n                                if (borderInfoCompute[bd_r2 + '_' + bd_c] == null) {\n                                    borderInfoCompute[bd_r2 + '_' + bd_c] = {};\n                                }\n                                borderInfoCompute[bd_r2 + '_' + bd_c].b = {\n                                    'color': borderColor,\n                                    'style': borderStyle\n                                };\n                                let bd_r_bottom = bd_r2 + 1;\n                                if (bd_r_bottom < data.length && borderInfoCompute[bd_r_bottom + '_' + bd_c]) {\n                                    if (data[bd_r_bottom] != null && getObjType(data[bd_r_bottom][bd_c]) == 'object' && data[bd_r_bottom][bd_c].mc != null) {\n                                        let cell_bottom = data[bd_r_bottom][bd_c];\n                                        let mc = cfg['merge'][cell_bottom.mc.r + '_' + cell_bottom.mc.c];\n                                        if (mc.r == bd_r_bottom) {\n                                            borderInfoCompute[bd_r_bottom + '_' + bd_c].t = {\n                                                'color': borderColor,\n                                                'style': borderStyle\n                                            };\n                                        }\n                                    } else {\n                                        borderInfoCompute[bd_r_bottom + '_' + bd_c].t = {\n                                            'color': borderColor,\n                                            'style': borderStyle\n                                        };\n                                    }\n                                }\n                            }\n                        } else if (borderType == 'border-all') {\n                            for (let bd_r = bd_r1; bd_r <= bd_r2; bd_r++) {\n                                if (cfg['rowhidden'] != null && cfg['rowhidden'][bd_r] != null) {\n                                    continue;\n                                }\n                                for (let bd_c = bd_c1; bd_c <= bd_c2; bd_c++) {\n                                    if (data[bd_r] != null && getObjType(data[bd_r][bd_c]) == 'object' && data[bd_r][bd_c].mc != null) {\n                                        let cell = data[bd_r][bd_c];\n                                        let mc = cfg['merge'][cell.mc.r + '_' + cell.mc.c];\n                                        if (mc.r == bd_r) {\n                                            if (borderInfoCompute[bd_r + '_' + bd_c] == null) {\n                                                borderInfoCompute[bd_r + '_' + bd_c] = {};\n                                            }\n                                            borderInfoCompute[bd_r + '_' + bd_c].t = {\n                                                'color': borderColor,\n                                                'style': borderStyle\n                                            };\n                                        }\n                                        if (mc.r + mc.rs - 1 == bd_r) {\n                                            if (borderInfoCompute[bd_r + '_' + bd_c] == null) {\n                                                borderInfoCompute[bd_r + '_' + bd_c] = {};\n                                            }\n                                            borderInfoCompute[bd_r + '_' + bd_c].b = {\n                                                'color': borderColor,\n                                                'style': borderStyle\n                                            };\n                                        }\n                                        if (mc.c == bd_c) {\n                                            if (borderInfoCompute[bd_r + '_' + bd_c] == null) {\n                                                borderInfoCompute[bd_r + '_' + bd_c] = {};\n                                            }\n                                            borderInfoCompute[bd_r + '_' + bd_c].l = {\n                                                'color': borderColor,\n                                                'style': borderStyle\n                                            };\n                                        }\n                                        if (mc.c + mc.cs - 1 == bd_c) {\n                                            if (borderInfoCompute[bd_r + '_' + bd_c] == null) {\n                                                borderInfoCompute[bd_r + '_' + bd_c] = {};\n                                            }\n                                            borderInfoCompute[bd_r + '_' + bd_c].r = {\n                                                'color': borderColor,\n                                                'style': borderStyle\n                                            };\n                                        }\n                                    } else {\n                                        if (borderInfoCompute[bd_r + '_' + bd_c] == null) {\n                                            borderInfoCompute[bd_r + '_' + bd_c] = {};\n                                        }\n                                        borderInfoCompute[bd_r + '_' + bd_c].l = {\n                                            'color': borderColor,\n                                            'style': borderStyle\n                                        };\n                                        borderInfoCompute[bd_r + '_' + bd_c].r = {\n                                            'color': borderColor,\n                                            'style': borderStyle\n                                        };\n                                        borderInfoCompute[bd_r + '_' + bd_c].t = {\n                                            'color': borderColor,\n                                            'style': borderStyle\n                                        };\n                                        borderInfoCompute[bd_r + '_' + bd_c].b = {\n                                            'color': borderColor,\n                                            'style': borderStyle\n                                        };\n                                    }\n                                    if (bd_r == bd_r1) {\n                                        let bd_r_top = bd_r1 - 1;\n                                        if (bd_r_top >= 0 && borderInfoCompute[bd_r_top + '_' + bd_c]) {\n                                            if (data[bd_r_top] != null && getObjType(data[bd_r_top][bd_c]) == 'object' && data[bd_r_top][bd_c].mc != null) {\n                                                let cell_top = data[bd_r_top][bd_c];\n                                                let mc = cfg['merge'][cell_top.mc.r + '_' + cell_top.mc.c];\n                                                if (mc.r + mc.rs - 1 == bd_r_top) {\n                                                    borderInfoCompute[bd_r_top + '_' + bd_c].b = {\n                                                        'color': borderColor,\n                                                        'style': borderStyle\n                                                    };\n                                                }\n                                            } else {\n                                                borderInfoCompute[bd_r_top + '_' + bd_c].b = {\n                                                    'color': borderColor,\n                                                    'style': borderStyle\n                                                };\n                                            }\n                                        }\n                                    }\n                                    if (bd_r == bd_r2) {\n                                        let bd_r_bottom = bd_r2 + 1;\n                                        if (bd_r_bottom < data.length && borderInfoCompute[bd_r_bottom + '_' + bd_c]) {\n                                            if (data[bd_r_bottom] != null && getObjType(data[bd_r_bottom][bd_c]) == 'object' && data[bd_r_bottom][bd_c].mc != null) {\n                                                let cell_bottom = data[bd_r_bottom][bd_c];\n                                                let mc = cfg['merge'][cell_bottom.mc.r + '_' + cell_bottom.mc.c];\n                                                if (mc.r == bd_r_bottom) {\n                                                    borderInfoCompute[bd_r_bottom + '_' + bd_c].t = {\n                                                        'color': borderColor,\n                                                        'style': borderStyle\n                                                    };\n                                                }\n                                            } else {\n                                                borderInfoCompute[bd_r_bottom + '_' + bd_c].t = {\n                                                    'color': borderColor,\n                                                    'style': borderStyle\n                                                };\n                                            }\n                                        }\n                                    }\n                                    if (bd_c == bd_c1) {\n                                        let bd_c_left = bd_c1 - 1;\n                                        if (bd_c_left >= 0 && borderInfoCompute[bd_r + '_' + bd_c_left]) {\n                                            if (data[bd_r] != null && getObjType(data[bd_r][bd_c_left]) == 'object' && data[bd_r][bd_c_left].mc != null) {\n                                                let cell_left = data[bd_r][bd_c_left];\n                                                let mc = cfg['merge'][cell_left.mc.r + '_' + cell_left.mc.c];\n                                                if (mc.c + mc.cs - 1 == bd_c_left) {\n                                                    borderInfoCompute[bd_r + '_' + bd_c_left].r = {\n                                                        'color': borderColor,\n                                                        'style': borderStyle\n                                                    };\n                                                }\n                                            } else {\n                                                borderInfoCompute[bd_r + '_' + bd_c_left].r = {\n                                                    'color': borderColor,\n                                                    'style': borderStyle\n                                                };\n                                            }\n                                        }\n                                    }\n                                    if (bd_c == bd_c2) {\n                                        let bd_c_right = bd_c2 + 1;\n                                        if (bd_c_right < data[0].length && borderInfoCompute[bd_r + '_' + bd_c_right]) {\n                                            if (data[bd_r] != null && getObjType(data[bd_r][bd_c_right]) == 'object' && data[bd_r][bd_c_right].mc != null) {\n                                                let cell_right = data[bd_r][bd_c_right];\n                                                let mc = cfg['merge'][cell_right.mc.r + '_' + cell_right.mc.c];\n                                                if (mc.c == bd_c_right) {\n                                                    borderInfoCompute[bd_r + '_' + bd_c_right].l = {\n                                                        'color': borderColor,\n                                                        'style': borderStyle\n                                                    };\n                                                }\n                                            } else {\n                                                borderInfoCompute[bd_r + '_' + bd_c_right].l = {\n                                                    'color': borderColor,\n                                                    'style': borderStyle\n                                                };\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        } else if (borderType == 'border-outside') {\n                            for (let bd_r = bd_r1; bd_r <= bd_r2; bd_r++) {\n                                if (cfg['rowhidden'] != null && cfg['rowhidden'][bd_r] != null) {\n                                    continue;\n                                }\n                                for (let bd_c = bd_c1; bd_c <= bd_c2; bd_c++) {\n                                    if (!(bd_r == bd_r1 || bd_r == bd_r2 || bd_c == bd_c1 || bd_c == bd_c2)) {\n                                        continue;\n                                    }\n                                    if (bd_r == bd_r1) {\n                                        if (borderInfoCompute[bd_r + '_' + bd_c] == null) {\n                                            borderInfoCompute[bd_r + '_' + bd_c] = {};\n                                        }\n                                        borderInfoCompute[bd_r + '_' + bd_c].t = {\n                                            'color': borderColor,\n                                            'style': borderStyle\n                                        };\n                                        let bd_r_top = bd_r1 - 1;\n                                        if (bd_r_top >= 0 && borderInfoCompute[bd_r_top + '_' + bd_c]) {\n                                            if (data[bd_r_top] != null && getObjType(data[bd_r_top][bd_c]) == 'object' && data[bd_r_top][bd_c].mc != null) {\n                                                let cell_top = data[bd_r_top][bd_c];\n                                                let mc = cfg['merge'][cell_top.mc.r + '_' + cell_top.mc.c];\n                                                if (mc.r + mc.rs - 1 == bd_r_top) {\n                                                    borderInfoCompute[bd_r_top + '_' + bd_c].b = {\n                                                        'color': borderColor,\n                                                        'style': borderStyle\n                                                    };\n                                                }\n                                            } else {\n                                                borderInfoCompute[bd_r_top + '_' + bd_c].b = {\n                                                    'color': borderColor,\n                                                    'style': borderStyle\n                                                };\n                                            }\n                                        }\n                                    }\n                                    if (bd_r == bd_r2) {\n                                        if (borderInfoCompute[bd_r + '_' + bd_c] == null) {\n                                            borderInfoCompute[bd_r + '_' + bd_c] = {};\n                                        }\n                                        borderInfoCompute[bd_r + '_' + bd_c].b = {\n                                            'color': borderColor,\n                                            'style': borderStyle\n                                        };\n                                        let bd_r_bottom = bd_r2 + 1;\n                                        if (bd_r_bottom < data.length && borderInfoCompute[bd_r_bottom + '_' + bd_c]) {\n                                            if (data[bd_r_bottom] != null && getObjType(data[bd_r_bottom][bd_c]) == 'object' && data[bd_r_bottom][bd_c].mc != null) {\n                                                let cell_bottom = data[bd_r_bottom][bd_c];\n                                                let mc = cfg['merge'][cell_bottom.mc.r + '_' + cell_bottom.mc.c];\n                                                if (mc.r == bd_r_bottom) {\n                                                    borderInfoCompute[bd_r_bottom + '_' + bd_c].t = {\n                                                        'color': borderColor,\n                                                        'style': borderStyle\n                                                    };\n                                                }\n                                            } else {\n                                                borderInfoCompute[bd_r_bottom + '_' + bd_c].t = {\n                                                    'color': borderColor,\n                                                    'style': borderStyle\n                                                };\n                                            }\n                                        }\n                                    }\n                                    if (bd_c == bd_c1) {\n                                        if (borderInfoCompute[bd_r + '_' + bd_c] == null) {\n                                            borderInfoCompute[bd_r + '_' + bd_c] = {};\n                                        }\n                                        borderInfoCompute[bd_r + '_' + bd_c].l = {\n                                            'color': borderColor,\n                                            'style': borderStyle\n                                        };\n                                        let bd_c_left = bd_c1 - 1;\n                                        if (bd_c_left >= 0 && borderInfoCompute[bd_r + '_' + bd_c_left]) {\n                                            if (data[bd_r] != null && getObjType(data[bd_r][bd_c_left]) == 'object' && data[bd_r][bd_c_left].mc != null) {\n                                                let cell_left = data[bd_r][bd_c_left];\n                                                let mc = cfg['merge'][cell_left.mc.r + '_' + cell_left.mc.c];\n                                                if (mc.c + mc.cs - 1 == bd_c_left) {\n                                                    borderInfoCompute[bd_r + '_' + bd_c_left].r = {\n                                                        'color': borderColor,\n                                                        'style': borderStyle\n                                                    };\n                                                }\n                                            } else {\n                                                borderInfoCompute[bd_r + '_' + bd_c_left].r = {\n                                                    'color': borderColor,\n                                                    'style': borderStyle\n                                                };\n                                            }\n                                        }\n                                    }\n                                    if (bd_c == bd_c2) {\n                                        if (borderInfoCompute[bd_r + '_' + bd_c] == null) {\n                                            borderInfoCompute[bd_r + '_' + bd_c] = {};\n                                        }\n                                        borderInfoCompute[bd_r + '_' + bd_c].r = {\n                                            'color': borderColor,\n                                            'style': borderStyle\n                                        };\n                                        let bd_c_right = bd_c2 + 1;\n                                        if (bd_c_right < data[0].length && borderInfoCompute[bd_r + '_' + bd_c_right]) {\n                                            if (data[bd_r] != null && getObjType(data[bd_r][bd_c_right]) == 'object' && data[bd_r][bd_c_right].mc != null) {\n                                                let cell_right = data[bd_r][bd_c_right];\n                                                let mc = cfg['merge'][cell_right.mc.r + '_' + cell_right.mc.c];\n                                                if (mc.c == bd_c_right) {\n                                                    borderInfoCompute[bd_r + '_' + bd_c_right].l = {\n                                                        'color': borderColor,\n                                                        'style': borderStyle\n                                                    };\n                                                }\n                                            } else {\n                                                borderInfoCompute[bd_r + '_' + bd_c_right].l = {\n                                                    'color': borderColor,\n                                                    'style': borderStyle\n                                                };\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        } else if (borderType == 'border-inside') {\n                            for (let bd_r = bd_r1; bd_r <= bd_r2; bd_r++) {\n                                if (cfg['rowhidden'] != null && cfg['rowhidden'][bd_r] != null) {\n                                    continue;\n                                }\n                                for (let bd_c = bd_c1; bd_c <= bd_c2; bd_c++) {\n                                    if (bd_r == bd_r1 && bd_c == bd_c1) {\n                                        if (data[bd_r] != null && getObjType(data[bd_r][bd_c]) == 'object' && data[bd_r][bd_c].mc != null) {\n                                        } else {\n                                            if (borderInfoCompute[bd_r + '_' + bd_c] == null) {\n                                                borderInfoCompute[bd_r + '_' + bd_c] = {};\n                                            }\n                                            borderInfoCompute[bd_r + '_' + bd_c].r = {\n                                                'color': borderColor,\n                                                'style': borderStyle\n                                            };\n                                            borderInfoCompute[bd_r + '_' + bd_c].b = {\n                                                'color': borderColor,\n                                                'style': borderStyle\n                                            };\n                                        }\n                                    } else if (bd_r == bd_r2 && bd_c == bd_c1) {\n                                        if (data[bd_r] != null && getObjType(data[bd_r][bd_c]) == 'object' && data[bd_r][bd_c].mc != null) {\n                                        } else {\n                                            if (borderInfoCompute[bd_r + '_' + bd_c] == null) {\n                                                borderInfoCompute[bd_r + '_' + bd_c] = {};\n                                            }\n                                            borderInfoCompute[bd_r + '_' + bd_c].r = {\n                                                'color': borderColor,\n                                                'style': borderStyle\n                                            };\n                                            borderInfoCompute[bd_r + '_' + bd_c].t = {\n                                                'color': borderColor,\n                                                'style': borderStyle\n                                            };\n                                        }\n                                    } else if (bd_r == bd_r1 && bd_c == bd_c2) {\n                                        if (data[bd_r] != null && getObjType(data[bd_r][bd_c]) == 'object' && data[bd_r][bd_c].mc != null) {\n                                        } else {\n                                            if (borderInfoCompute[bd_r + '_' + bd_c] == null) {\n                                                borderInfoCompute[bd_r + '_' + bd_c] = {};\n                                            }\n                                            borderInfoCompute[bd_r + '_' + bd_c].l = {\n                                                'color': borderColor,\n                                                'style': borderStyle\n                                            };\n                                            borderInfoCompute[bd_r + '_' + bd_c].b = {\n                                                'color': borderColor,\n                                                'style': borderStyle\n                                            };\n                                        }\n                                    } else if (bd_r == bd_r2 && bd_c == bd_c2) {\n                                        if (data[bd_r] != null && getObjType(data[bd_r][bd_c]) == 'object' && data[bd_r][bd_c].mc != null) {\n                                        } else {\n                                            if (borderInfoCompute[bd_r + '_' + bd_c] == null) {\n                                                borderInfoCompute[bd_r + '_' + bd_c] = {};\n                                            }\n                                            borderInfoCompute[bd_r + '_' + bd_c].l = {\n                                                'color': borderColor,\n                                                'style': borderStyle\n                                            };\n                                            borderInfoCompute[bd_r + '_' + bd_c].t = {\n                                                'color': borderColor,\n                                                'style': borderStyle\n                                            };\n                                        }\n                                    } else if (bd_r == bd_r1) {\n                                        if (data[bd_r] != null && getObjType(data[bd_r][bd_c]) == 'object' && data[bd_r][bd_c].mc != null) {\n                                            let cell = data[bd_r][bd_c];\n                                            let mc = cfg['merge'][cell.mc.r + '_' + cell.mc.c];\n                                            if (mc.c == bd_c) {\n                                                if (borderInfoCompute[bd_r + '_' + bd_c] == null) {\n                                                    borderInfoCompute[bd_r + '_' + bd_c] = {};\n                                                }\n                                                borderInfoCompute[bd_r + '_' + bd_c].l = {\n                                                    'color': borderColor,\n                                                    'style': borderStyle\n                                                };\n                                            } else if (mc.c + mc.cs - 1 == bd_c) {\n                                                if (borderInfoCompute[bd_r + '_' + bd_c] == null) {\n                                                    borderInfoCompute[bd_r + '_' + bd_c] = {};\n                                                }\n                                                borderInfoCompute[bd_r + '_' + bd_c].r = {\n                                                    'color': borderColor,\n                                                    'style': borderStyle\n                                                };\n                                            }\n                                        } else {\n                                            if (borderInfoCompute[bd_r + '_' + bd_c] == null) {\n                                                borderInfoCompute[bd_r + '_' + bd_c] = {};\n                                            }\n                                            borderInfoCompute[bd_r + '_' + bd_c].l = {\n                                                'color': borderColor,\n                                                'style': borderStyle\n                                            };\n                                            borderInfoCompute[bd_r + '_' + bd_c].r = {\n                                                'color': borderColor,\n                                                'style': borderStyle\n                                            };\n                                            borderInfoCompute[bd_r + '_' + bd_c].b = {\n                                                'color': borderColor,\n                                                'style': borderStyle\n                                            };\n                                        }\n                                    } else if (bd_r == bd_r2) {\n                                        if (data[bd_r] != null && getObjType(data[bd_r][bd_c]) == 'object' && data[bd_r][bd_c].mc != null) {\n                                            let cell = data[bd_r][bd_c];\n                                            let mc = cfg['merge'][cell.mc.r + '_' + cell.mc.c];\n                                            if (mc.c == bd_c) {\n                                                if (borderInfoCompute[bd_r + '_' + bd_c] == null) {\n                                                    borderInfoCompute[bd_r + '_' + bd_c] = {};\n                                                }\n                                                borderInfoCompute[bd_r + '_' + bd_c].l = {\n                                                    'color': borderColor,\n                                                    'style': borderStyle\n                                                };\n                                            } else if (mc.c + mc.cs - 1 == bd_c) {\n                                                if (borderInfoCompute[bd_r + '_' + bd_c] == null) {\n                                                    borderInfoCompute[bd_r + '_' + bd_c] = {};\n                                                }\n                                                borderInfoCompute[bd_r + '_' + bd_c].r = {\n                                                    'color': borderColor,\n                                                    'style': borderStyle\n                                                };\n                                            }\n                                        } else {\n                                            if (borderInfoCompute[bd_r + '_' + bd_c] == null) {\n                                                borderInfoCompute[bd_r + '_' + bd_c] = {};\n                                            }\n                                            borderInfoCompute[bd_r + '_' + bd_c].l = {\n                                                'color': borderColor,\n                                                'style': borderStyle\n                                            };\n                                            borderInfoCompute[bd_r + '_' + bd_c].r = {\n                                                'color': borderColor,\n                                                'style': borderStyle\n                                            };\n                                            borderInfoCompute[bd_r + '_' + bd_c].t = {\n                                                'color': borderColor,\n                                                'style': borderStyle\n                                            };\n                                        }\n                                    } else if (bd_c == bd_c1) {\n                                        if (data[bd_r] != null && getObjType(data[bd_r][bd_c]) == 'object' && data[bd_r][bd_c].mc != null) {\n                                            let cell = data[bd_r][bd_c];\n                                            let mc = cfg['merge'][cell.mc.r + '_' + cell.mc.c];\n                                            if (mc.r == bd_r) {\n                                                if (borderInfoCompute[bd_r + '_' + bd_c] == null) {\n                                                    borderInfoCompute[bd_r + '_' + bd_c] = {};\n                                                }\n                                                borderInfoCompute[bd_r + '_' + bd_c].t = {\n                                                    'color': borderColor,\n                                                    'style': borderStyle\n                                                };\n                                            } else if (mc.r + mc.rs - 1 == bd_r) {\n                                                if (borderInfoCompute[bd_r + '_' + bd_c] == null) {\n                                                    borderInfoCompute[bd_r + '_' + bd_c] = {};\n                                                }\n                                                borderInfoCompute[bd_r + '_' + bd_c].b = {\n                                                    'color': borderColor,\n                                                    'style': borderStyle\n                                                };\n                                            }\n                                        } else {\n                                            if (borderInfoCompute[bd_r + '_' + bd_c] == null) {\n                                                borderInfoCompute[bd_r + '_' + bd_c] = {};\n                                            }\n                                            borderInfoCompute[bd_r + '_' + bd_c].r = {\n                                                'color': borderColor,\n                                                'style': borderStyle\n                                            };\n                                            borderInfoCompute[bd_r + '_' + bd_c].t = {\n                                                'color': borderColor,\n                                                'style': borderStyle\n                                            };\n                                            borderInfoCompute[bd_r + '_' + bd_c].b = {\n                                                'color': borderColor,\n                                                'style': borderStyle\n                                            };\n                                        }\n                                    } else if (bd_c == bd_c2) {\n                                        if (data[bd_r] != null && getObjType(data[bd_r][bd_c]) == 'object' && data[bd_r][bd_c].mc != null) {\n                                            let cell = data[bd_r][bd_c];\n                                            let mc = cfg['merge'][cell.mc.r + '_' + cell.mc.c];\n                                            if (mc.r == bd_r) {\n                                                if (borderInfoCompute[bd_r + '_' + bd_c] == null) {\n                                                    borderInfoCompute[bd_r + '_' + bd_c] = {};\n                                                }\n                                                borderInfoCompute[bd_r + '_' + bd_c].t = {\n                                                    'color': borderColor,\n                                                    'style': borderStyle\n                                                };\n                                            } else if (mc.r + mc.rs - 1 == bd_r) {\n                                                if (borderInfoCompute[bd_r + '_' + bd_c] == null) {\n                                                    borderInfoCompute[bd_r + '_' + bd_c] = {};\n                                                }\n                                                borderInfoCompute[bd_r + '_' + bd_c].b = {\n                                                    'color': borderColor,\n                                                    'style': borderStyle\n                                                };\n                                            }\n                                        } else {\n                                            if (borderInfoCompute[bd_r + '_' + bd_c] == null) {\n                                                borderInfoCompute[bd_r + '_' + bd_c] = {};\n                                            }\n                                            borderInfoCompute[bd_r + '_' + bd_c].l = {\n                                                'color': borderColor,\n                                                'style': borderStyle\n                                            };\n                                            borderInfoCompute[bd_r + '_' + bd_c].t = {\n                                                'color': borderColor,\n                                                'style': borderStyle\n                                            };\n                                            borderInfoCompute[bd_r + '_' + bd_c].b = {\n                                                'color': borderColor,\n                                                'style': borderStyle\n                                            };\n                                        }\n                                    } else {\n                                        if (data[bd_r] != null && getObjType(data[bd_r][bd_c]) == 'object' && data[bd_r][bd_c].mc != null) {\n                                            let cell = data[bd_r][bd_c];\n                                            let mc = cfg['merge'][cell.mc.r + '_' + cell.mc.c];\n                                            if (mc.r == bd_r) {\n                                                if (borderInfoCompute[bd_r + '_' + bd_c] == null) {\n                                                    borderInfoCompute[bd_r + '_' + bd_c] = {};\n                                                }\n                                                borderInfoCompute[bd_r + '_' + bd_c].t = {\n                                                    'color': borderColor,\n                                                    'style': borderStyle\n                                                };\n                                            } else if (mc.r + mc.rs - 1 == bd_r) {\n                                                if (borderInfoCompute[bd_r + '_' + bd_c] == null) {\n                                                    borderInfoCompute[bd_r + '_' + bd_c] = {};\n                                                }\n                                                borderInfoCompute[bd_r + '_' + bd_c].b = {\n                                                    'color': borderColor,\n                                                    'style': borderStyle\n                                                };\n                                            }\n                                            if (mc.c == bd_c) {\n                                                if (borderInfoCompute[bd_r + '_' + bd_c] == null) {\n                                                    borderInfoCompute[bd_r + '_' + bd_c] = {};\n                                                }\n                                                borderInfoCompute[bd_r + '_' + bd_c].l = {\n                                                    'color': borderColor,\n                                                    'style': borderStyle\n                                                };\n                                            } else if (mc.c + mc.cs - 1 == bd_c) {\n                                                if (borderInfoCompute[bd_r + '_' + bd_c] == null) {\n                                                    borderInfoCompute[bd_r + '_' + bd_c] = {};\n                                                }\n                                                borderInfoCompute[bd_r + '_' + bd_c].r = {\n                                                    'color': borderColor,\n                                                    'style': borderStyle\n                                                };\n                                            }\n                                        } else {\n                                            if (borderInfoCompute[bd_r + '_' + bd_c] == null) {\n                                                borderInfoCompute[bd_r + '_' + bd_c] = {};\n                                            }\n                                            borderInfoCompute[bd_r + '_' + bd_c].l = {\n                                                'color': borderColor,\n                                                'style': borderStyle\n                                            };\n                                            borderInfoCompute[bd_r + '_' + bd_c].r = {\n                                                'color': borderColor,\n                                                'style': borderStyle\n                                            };\n                                            borderInfoCompute[bd_r + '_' + bd_c].t = {\n                                                'color': borderColor,\n                                                'style': borderStyle\n                                            };\n                                            borderInfoCompute[bd_r + '_' + bd_c].b = {\n                                                'color': borderColor,\n                                                'style': borderStyle\n                                            };\n                                        }\n                                    }\n                                }\n                            }\n                        } else if (borderType == 'border-horizontal') {\n                            for (let bd_r = bd_r1; bd_r <= bd_r2; bd_r++) {\n                                if (cfg['rowhidden'] != null && cfg['rowhidden'][bd_r] != null) {\n                                    continue;\n                                }\n                                for (let bd_c = bd_c1; bd_c <= bd_c2; bd_c++) {\n                                    if (bd_r == bd_r1) {\n                                        if (data[bd_r] != null && getObjType(data[bd_r][bd_c]) == 'object' && data[bd_r][bd_c].mc != null) {\n                                        } else {\n                                            if (borderInfoCompute[bd_r + '_' + bd_c] == null) {\n                                                borderInfoCompute[bd_r + '_' + bd_c] = {};\n                                            }\n                                            borderInfoCompute[bd_r + '_' + bd_c].b = {\n                                                'color': borderColor,\n                                                'style': borderStyle\n                                            };\n                                        }\n                                    } else if (bd_r == bd_r2) {\n                                        if (data[bd_r] != null && getObjType(data[bd_r][bd_c]) == 'object' && data[bd_r][bd_c].mc != null) {\n                                        } else {\n                                            if (borderInfoCompute[bd_r + '_' + bd_c] == null) {\n                                                borderInfoCompute[bd_r + '_' + bd_c] = {};\n                                            }\n                                            borderInfoCompute[bd_r + '_' + bd_c].t = {\n                                                'color': borderColor,\n                                                'style': borderStyle\n                                            };\n                                        }\n                                    } else {\n                                        if (data[bd_r] != null && getObjType(data[bd_r][bd_c]) == 'object' && data[bd_r][bd_c].mc != null) {\n                                            let cell = data[bd_r][bd_c];\n                                            let mc = cfg['merge'][cell.mc.r + '_' + cell.mc.c];\n                                            if (mc.r == bd_r) {\n                                                if (borderInfoCompute[bd_r + '_' + bd_c] == null) {\n                                                    borderInfoCompute[bd_r + '_' + bd_c] = {};\n                                                }\n                                                borderInfoCompute[bd_r + '_' + bd_c].t = {\n                                                    'color': borderColor,\n                                                    'style': borderStyle\n                                                };\n                                            } else if (mc.r + mc.rs - 1 == bd_r) {\n                                                if (borderInfoCompute[bd_r + '_' + bd_c] == null) {\n                                                    borderInfoCompute[bd_r + '_' + bd_c] = {};\n                                                }\n                                                borderInfoCompute[bd_r + '_' + bd_c].b = {\n                                                    'color': borderColor,\n                                                    'style': borderStyle\n                                                };\n                                            }\n                                        } else {\n                                            if (borderInfoCompute[bd_r + '_' + bd_c] == null) {\n                                                borderInfoCompute[bd_r + '_' + bd_c] = {};\n                                            }\n                                            borderInfoCompute[bd_r + '_' + bd_c].t = {\n                                                'color': borderColor,\n                                                'style': borderStyle\n                                            };\n                                            borderInfoCompute[bd_r + '_' + bd_c].b = {\n                                                'color': borderColor,\n                                                'style': borderStyle\n                                            };\n                                        }\n                                    }\n                                }\n                            }\n                        } else if (borderType == 'border-vertical') {\n                            for (let bd_r = bd_r1; bd_r <= bd_r2; bd_r++) {\n                                if (cfg['rowhidden'] != null && cfg['rowhidden'][bd_r] != null) {\n                                    continue;\n                                }\n                                for (let bd_c = bd_c1; bd_c <= bd_c2; bd_c++) {\n                                    if (bd_c == bd_c1) {\n                                        if (data[bd_r] != null && getObjType(data[bd_r][bd_c]) == 'object' && data[bd_r][bd_c].mc != null) {\n                                        } else {\n                                            if (borderInfoCompute[bd_r + '_' + bd_c] == null) {\n                                                borderInfoCompute[bd_r + '_' + bd_c] = {};\n                                            }\n                                            borderInfoCompute[bd_r + '_' + bd_c].r = {\n                                                'color': borderColor,\n                                                'style': borderStyle\n                                            };\n                                        }\n                                    } else if (bd_c == bd_c2) {\n                                        if (data[bd_r] != null && getObjType(data[bd_r][bd_c]) == 'object' && data[bd_r][bd_c].mc != null) {\n                                        } else {\n                                            if (borderInfoCompute[bd_r + '_' + bd_c] == null) {\n                                                borderInfoCompute[bd_r + '_' + bd_c] = {};\n                                            }\n                                            borderInfoCompute[bd_r + '_' + bd_c].l = {\n                                                'color': borderColor,\n                                                'style': borderStyle\n                                            };\n                                        }\n                                    } else {\n                                        if (data[bd_r] != null && getObjType(data[bd_r][bd_c]) == 'object' && data[bd_r][bd_c].mc != null) {\n                                            let cell = data[bd_r][bd_c];\n                                            let mc = cfg['merge'][cell.mc.r + '_' + cell.mc.c] || {};\n                                            if (mc.c == bd_c) {\n                                                if (borderInfoCompute[bd_r + '_' + bd_c] == null) {\n                                                    borderInfoCompute[bd_r + '_' + bd_c] = {};\n                                                }\n                                                borderInfoCompute[bd_r + '_' + bd_c].l = {\n                                                    'color': borderColor,\n                                                    'style': borderStyle\n                                                };\n                                            } else if (mc.c + mc.cs - 1 == bd_c) {\n                                                if (borderInfoCompute[bd_r + '_' + bd_c] == null) {\n                                                    borderInfoCompute[bd_r + '_' + bd_c] = {};\n                                                }\n                                                borderInfoCompute[bd_r + '_' + bd_c].r = {\n                                                    'color': borderColor,\n                                                    'style': borderStyle\n                                                };\n                                            }\n                                        } else {\n                                            if (borderInfoCompute[bd_r + '_' + bd_c] == null) {\n                                                borderInfoCompute[bd_r + '_' + bd_c] = {};\n                                            }\n                                            borderInfoCompute[bd_r + '_' + bd_c].l = {\n                                                'color': borderColor,\n                                                'style': borderStyle\n                                            };\n                                            borderInfoCompute[bd_r + '_' + bd_c].r = {\n                                                'color': borderColor,\n                                                'style': borderStyle\n                                            };\n                                        }\n                                    }\n                                }\n                            }\n                        } else if (borderType == 'border-none') {\n                            for (let bd_r = bd_r1; bd_r <= bd_r2; bd_r++) {\n                                if (cfg['rowhidden'] != null && cfg['rowhidden'][bd_r] != null) {\n                                    continue;\n                                }\n                                for (let bd_c = bd_c1; bd_c <= bd_c2; bd_c++) {\n                                    if (borderInfoCompute[bd_r + '_' + bd_c] != null) {\n                                        delete borderInfoCompute[bd_r + '_' + bd_c];\n                                    }\n                                    if (bd_r == bd_r1) {\n                                        let bd_r_top = bd_r1 - 1;\n                                        if (bd_r_top >= 0 && borderInfoCompute[bd_r_top + '_' + bd_c]) {\n                                            delete borderInfoCompute[bd_r_top + '_' + bd_c].b;\n                                        }\n                                    }\n                                    if (bd_r == bd_r2) {\n                                        let bd_r_bottom = bd_r2 + 1;\n                                        if (bd_r_bottom < data.length && borderInfoCompute[bd_r_bottom + '_' + bd_c]) {\n                                            delete borderInfoCompute[bd_r_bottom + '_' + bd_c].t;\n                                        }\n                                    }\n                                    if (bd_c == bd_c1) {\n                                        let bd_c_left = bd_c1 - 1;\n                                        if (bd_c_left >= 0 && borderInfoCompute[bd_r + '_' + bd_c_left]) {\n                                            delete borderInfoCompute[bd_r + '_' + bd_c_left].r;\n                                        }\n                                    }\n                                    if (bd_c == bd_c2) {\n                                        let bd_c_right = bd_c2 + 1;\n                                        if (bd_c_right < data[0].length && borderInfoCompute[bd_r + '_' + bd_c_right]) {\n                                            delete borderInfoCompute[bd_r + '_' + bd_c_right].l;\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                } else if (rangeType == 'cell') {\n                    let value = borderInfo[i].value;\n                    let bd_r = value.row_index, bd_c = value.col_index;\n                    if (bd_r < dataset_row_st || bd_r > dataset_row_ed || bd_c < dataset_col_st || bd_c > dataset_col_ed) {\n                        continue;\n                    }\n                    if (cfg['rowhidden'] != null && cfg['rowhidden'][bd_r] != null) {\n                        continue;\n                    }\n                    if (value.l != null || value.r != null || value.t != null || value.b != null) {\n                        if (borderInfoCompute[bd_r + '_' + bd_c] == null) {\n                            borderInfoCompute[bd_r + '_' + bd_c] = {};\n                        }\n                        if (data[bd_r] != null && getObjType(data[bd_r][bd_c]) == 'object' && data[bd_r][bd_c].mc != null) {\n                            let cell = data[bd_r][bd_c];\n                            let mc = cfg['merge'][cell.mc.r + '_' + cell.mc.c] || {};\n                            if (value.l != null && bd_c == mc.c) {\n                                //左边框\n                                borderInfoCompute[bd_r + '_' + bd_c].l = {\n                                    'color': value.l.color,\n                                    'style': value.l.style\n                                };\n                                let bd_c_left = bd_c - 1;\n                                if (bd_c_left >= 0 && borderInfoCompute[bd_r + '_' + bd_c_left]) {\n                                    if (data[bd_r] != null && getObjType(data[bd_r][bd_c_left]) == 'object' && data[bd_r][bd_c_left].mc != null) {\n                                        let cell_left = data[bd_r][bd_c_left];\n                                        let mc_l = cfg['merge'][cell_left.mc.r + '_' + cell_left.mc.c];\n                                        if (mc_l.c + mc_l.cs - 1 == bd_c_left) {\n                                            borderInfoCompute[bd_r + '_' + bd_c_left].r = {\n                                                'color': value.l.color,\n                                                'style': value.l.style\n                                            };\n                                        }\n                                    } else {\n                                        borderInfoCompute[bd_r + '_' + bd_c_left].r = {\n                                            'color': value.l.color,\n                                            'style': value.l.style\n                                        };\n                                    }\n                                }\n                            } else {\n                                borderInfoCompute[bd_r + '_' + bd_c].l = null;\n                            }\n                            if (value.r != null && bd_c == mc.c + mc.cs - 1) {\n                                //右边框\n                                borderInfoCompute[bd_r + '_' + bd_c].r = {\n                                    'color': value.r.color,\n                                    'style': value.r.style\n                                };\n                                let bd_c_right = bd_c + 1;\n                                if (bd_c_right < data[0].length && borderInfoCompute[bd_r + '_' + bd_c_right]) {\n                                    if (data[bd_r] != null && getObjType(data[bd_r][bd_c_right]) == 'object' && data[bd_r][bd_c_right].mc != null) {\n                                        let cell_right = data[bd_r][bd_c_right];\n                                        let mc_r = cfg['merge'][cell_right.mc.r + '_' + cell_right.mc.c];\n                                        if (mc_r.c == bd_c_right) {\n                                            borderInfoCompute[bd_r + '_' + bd_c_right].l = {\n                                                'color': value.r.color,\n                                                'style': value.r.style\n                                            };\n                                        }\n                                    } else {\n                                        borderInfoCompute[bd_r + '_' + bd_c_right].l = {\n                                            'color': value.r.color,\n                                            'style': value.r.style\n                                        };\n                                    }\n                                }\n                            } else {\n                                borderInfoCompute[bd_r + '_' + bd_c].r = null;\n                            }\n                            if (value.t != null && bd_r == mc.r) {\n                                //上边框\n                                borderInfoCompute[bd_r + '_' + bd_c].t = {\n                                    'color': value.t.color,\n                                    'style': value.t.style\n                                };\n                                let bd_r_top = bd_r - 1;\n                                if (bd_r_top >= 0 && borderInfoCompute[bd_r_top + '_' + bd_c]) {\n                                    if (data[bd_r_top] != null && getObjType(data[bd_r_top][bd_c]) == 'object' && data[bd_r_top][bd_c].mc != null) {\n                                        let cell_top = data[bd_r_top][bd_c];\n                                        let mc_t = cfg['merge'][cell_top.mc.r + '_' + cell_top.mc.c];\n                                        if (mc_t.r + mc_t.rs - 1 == bd_r_top) {\n                                            borderInfoCompute[bd_r_top + '_' + bd_c].b = {\n                                                'color': value.t.color,\n                                                'style': value.t.style\n                                            };\n                                        }\n                                    } else {\n                                        borderInfoCompute[bd_r_top + '_' + bd_c].b = {\n                                            'color': value.t.color,\n                                            'style': value.t.style\n                                        };\n                                    }\n                                }\n                            } else {\n                                borderInfoCompute[bd_r + '_' + bd_c].t = null;\n                            }\n                            if (value.b != null && bd_r == mc.r + mc.rs - 1) {\n                                //下边框\n                                borderInfoCompute[bd_r + '_' + bd_c].b = {\n                                    'color': value.b.color,\n                                    'style': value.b.style\n                                };\n                                let bd_r_bottom = bd_r + 1;\n                                if (bd_r_bottom < data.length && borderInfoCompute[bd_r_bottom + '_' + bd_c]) {\n                                    if (data[bd_r_bottom] != null && getObjType(data[bd_r_bottom][bd_c]) == 'object' && data[bd_r_bottom][bd_c].mc != null) {\n                                        let cell_bottom = data[bd_r_bottom][bd_c];\n                                        let mc_b = cfg['merge'][cell_bottom.mc.r + '_' + cell_bottom.mc.c];\n                                        if (mc_b.r == bd_r_bottom) {\n                                            borderInfoCompute[bd_r_bottom + '_' + bd_c].t = {\n                                                'color': value.b.color,\n                                                'style': value.b.style\n                                            };\n                                        }\n                                    } else {\n                                        borderInfoCompute[bd_r_bottom + '_' + bd_c].t = {\n                                            'color': value.b.color,\n                                            'style': value.b.style\n                                        };\n                                    }\n                                }\n                            } else {\n                                borderInfoCompute[bd_r + '_' + bd_c].b = null;\n                            }\n                        } else {\n                            if (value.l != null) {\n                                //左边框\n                                borderInfoCompute[bd_r + '_' + bd_c].l = {\n                                    'color': value.l.color,\n                                    'style': value.l.style\n                                };\n                                let bd_c_left = bd_c - 1;\n                                if (bd_c_left >= 0 && borderInfoCompute[bd_r + '_' + bd_c_left]) {\n                                    if (data[bd_r] != null && getObjType(data[bd_r][bd_c_left]) == 'object' && data[bd_r][bd_c_left].mc != null) {\n                                        let cell_left = data[bd_r][bd_c_left];\n                                        let mc_l = cfg['merge'][cell_left.mc.r + '_' + cell_left.mc.c];\n                                        if (mc_l.c + mc_l.cs - 1 == bd_c_left) {\n                                            borderInfoCompute[bd_r + '_' + bd_c_left].r = {\n                                                'color': value.l.color,\n                                                'style': value.l.style\n                                            };\n                                        }\n                                    } else {\n                                        borderInfoCompute[bd_r + '_' + bd_c_left].r = {\n                                            'color': value.l.color,\n                                            'style': value.l.style\n                                        };\n                                    }\n                                }\n                            } else {\n                                borderInfoCompute[bd_r + '_' + bd_c].l = null;\n                            }\n                            if (value.r != null) {\n                                //右边框\n                                borderInfoCompute[bd_r + '_' + bd_c].r = {\n                                    'color': value.r.color,\n                                    'style': value.r.style\n                                };\n                                let bd_c_right = bd_c + 1;\n                                if (bd_c_right < data[0].length && borderInfoCompute[bd_r + '_' + bd_c_right]) {\n                                    if (data[bd_r] != null && getObjType(data[bd_r][bd_c_right]) == 'object' && data[bd_r][bd_c_right].mc != null) {\n                                        let cell_right = data[bd_r][bd_c_right];\n                                        let mc_r = cfg['merge'][cell_right.mc.r + '_' + cell_right.mc.c];\n                                        if (mc_r.c == bd_c_right) {\n                                            borderInfoCompute[bd_r + '_' + bd_c_right].l = {\n                                                'color': value.r.color,\n                                                'style': value.r.style\n                                            };\n                                        }\n                                    } else {\n                                        borderInfoCompute[bd_r + '_' + bd_c_right].l = {\n                                            'color': value.r.color,\n                                            'style': value.r.style\n                                        };\n                                    }\n                                }\n                            } else {\n                                borderInfoCompute[bd_r + '_' + bd_c].r = null;\n                            }\n                            if (value.t != null) {\n                                //上边框\n                                borderInfoCompute[bd_r + '_' + bd_c].t = {\n                                    'color': value.t.color,\n                                    'style': value.t.style\n                                };\n                                let bd_r_top = bd_r - 1;\n                                if (bd_r_top >= 0 && borderInfoCompute[bd_r_top + '_' + bd_c]) {\n                                    if (data[bd_r_top] != null && getObjType(data[bd_r_top][bd_c]) == 'object' && data[bd_r_top][bd_c].mc != null) {\n                                        let cell_top = data[bd_r_top][bd_c];\n                                        let mc_t = cfg['merge'][cell_top.mc.r + '_' + cell_top.mc.c];\n                                        if (mc_t.r + mc_t.rs - 1 == bd_r_top) {\n                                            borderInfoCompute[bd_r_top + '_' + bd_c].b = {\n                                                'color': value.t.color,\n                                                'style': value.t.style\n                                            };\n                                        }\n                                    } else {\n                                        borderInfoCompute[bd_r_top + '_' + bd_c].b = {\n                                            'color': value.t.color,\n                                            'style': value.t.style\n                                        };\n                                    }\n                                }\n                            } else {\n                                borderInfoCompute[bd_r + '_' + bd_c].t = null;\n                            }\n                            if (value.b != null) {\n                                //下边框\n                                borderInfoCompute[bd_r + '_' + bd_c].b = {\n                                    'color': value.b.color,\n                                    'style': value.b.style\n                                };\n                                let bd_r_bottom = bd_r + 1;\n                                if (bd_r_bottom < data.length && borderInfoCompute[bd_r_bottom + '_' + bd_c]) {\n                                    if (data[bd_r_bottom] != null && getObjType(data[bd_r_bottom][bd_c]) == 'object' && data[bd_r_bottom][bd_c].mc != null) {\n                                        let cell_bottom = data[bd_r_bottom][bd_c];\n                                        let mc_b = cfg['merge'][cell_bottom.mc.r + '_' + cell_bottom.mc.c];\n                                        if (mc_b.r == bd_r_bottom) {\n                                            borderInfoCompute[bd_r_bottom + '_' + bd_c].t = {\n                                                'color': value.b.color,\n                                                'style': value.b.style\n                                            };\n                                        }\n                                    } else {\n                                        borderInfoCompute[bd_r_bottom + '_' + bd_c].t = {\n                                            'color': value.b.color,\n                                            'style': value.b.style\n                                        };\n                                    }\n                                }\n                            } else {\n                                borderInfoCompute[bd_r + '_' + bd_c].b = null;\n                            }\n                        }\n                    } else {\n                        delete borderInfoCompute[bd_r + '_' + bd_c];\n                    }\n                }\n            }\n        }\n        return borderInfoCompute;\n    }\n    function getBorderInfoCompute(sheetIndex) {\n        let borderInfoCompute = {};\n        let cfg, data;\n        if (sheetIndex == null) {\n            cfg = Store.config;\n            data = Store.flowdata;\n        } else {\n            cfg = Store.luckysheetfile[getSheetIndex(sheetIndex)].config;\n            data = Store.luckysheetfile[getSheetIndex(sheetIndex)].data;\n        }\n        borderInfoCompute = getBorderInfoComputeRange(0, data.length, 0, data[0].length, sheetIndex);\n        return borderInfoCompute;\n    }\n    return {\n        getBorderInfoCompute,\n        getBorderInfoComputeRange\n    };\n});"]}