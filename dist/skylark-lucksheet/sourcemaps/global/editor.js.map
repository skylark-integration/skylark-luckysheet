{"version":3,"sources":["global/editor.js"],"names":["define","browser","formula","m_getdata","m_refresh","m_get","Store","datagridgrowth","jfrefreshgrid","jfrefreshgridall","jfrefreshrange","getSheetIndex","deepCopyFlowDataState","deepCopyFlowDataCache","deepCopyFlowDataWorker","deepCopyFlowData","flowData","_this","this","terminate","flowdata","$","extend","webWorkerFlowDataCache","worker","funcTxt","isIE","response","Worker","postMessage","onmessage","e","data","controlHandler","dataChe","range","d","last","luckysheet_select_save","length","curR","curC","rlen","clen","addr","addc","concat","r","x","c","value","clearRangeByindex","st_r","ed_r","st_c","ed_c","sheetIndex","index","luckysheetfile","delFunctionGroup","execFunctionGroup","currentSheetIndex","row","column","controlHandlerD","r1","r2","c1","c2","i","j"],"mappings":"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","file":"../../global/editor.js","sourcesContent":["define([\n    './browser',\n    './formula',\n    './getdata',\n    './refresh',\n    '../methods/get',\n    '../store'\n], function (browser, formula, m_getdata, m_refresh, m_get, Store) {\n    'use strict';\n    const {datagridgrowth} = m_getdata;\n    const {jfrefreshgrid, jfrefreshgridall, jfrefreshrange} = m_refresh;\n    const {getSheetIndex} = m_get;\n    const editor = {\n        //worker+blob实现深拷贝替换extend\n        deepCopyFlowDataState: false,\n        deepCopyFlowDataCache: '',\n        deepCopyFlowDataWorker: null,\n        deepCopyFlowData: function (flowData) {\n            let _this = this;\n            if (_this.deepCopyFlowDataState) {\n                if (_this.deepCopyFlowDataWorker != null) {\n                    _this.deepCopyFlowDataWorker.terminate();\n                }\n                return _this.deepCopyFlowDataCache;\n            } else {\n                if (flowData == null) {\n                    flowData = Store.flowdata;\n                }\n                return $.extend(true, [], flowData);\n            }\n        },\n        webWorkerFlowDataCache: function (flowData) {\n            let _this = this;\n            try {\n                if (_this.deepCopyFlowDataWorker != null) {\n                    //存新的webwork前先销毁以前的\n                    _this.deepCopyFlowDataWorker.terminate();\n                }\n                let funcTxt = 'data:text/javascript;chartset=US-ASCII,onmessage = function (e) { postMessage(e.data); };';\n                _this.deepCopyFlowDataState = false;    //适配IE\n                //适配IE\n                let worker;\n                if (browser.isIE() == 1) {\n                    let response = 'self.onmessage=function(e){postMessage(e.data);}';\n                    worker = new Worker('./plugins/Worker-helper.js');\n                    worker.postMessage(response);\n                } else {\n                    worker = new Worker(funcTxt);\n                }\n                _this.deepCopyFlowDataWorker = worker;\n                worker.postMessage(flowData);\n                worker.onmessage = function (e) {\n                    _this.deepCopyFlowDataCache = e.data;\n                    _this.deepCopyFlowDataState = true;\n                };\n            } catch (e) {\n                _this.deepCopyFlowDataCache = $.extend(true, [], flowData);\n            }\n        },\n        /**\n     * @param {Array} dataChe \n     * @param {Object} range 是否指定选区，默认为当前选区\n     * @since Add range parameter. Update by siwei@2020-09-10. \n     */\n        controlHandler: function (dataChe, range) {\n            let _this = this;\n            let d = _this.deepCopyFlowData(Store.flowdata);    //取数据\n                                                               // let last = Store.luckysheet_select_save[Store.luckysheet_select_save.length - 1];\n            //取数据\n            // let last = Store.luckysheet_select_save[Store.luckysheet_select_save.length - 1];\n            let last = range || Store.luckysheet_select_save[Store.luckysheet_select_save.length - 1];\n            let curR = last['row'] == null ? 0 : last['row'][0];\n            let curC = last['column'] == null ? 0 : last['column'][0];\n            let rlen = dataChe.length, clen = dataChe[0].length;\n            let addr = curR + rlen - d.length, addc = curC + clen - d[0].length;\n            if (addr > 0 || addc > 0) {\n                d = datagridgrowth([].concat(d), addr, addc, true);\n            }\n            for (let r = 0; r < rlen; r++) {\n                let x = [].concat(d[r + curR]);\n                for (let c = 0; c < clen; c++) {\n                    let value = '';\n                    if (dataChe[r] != null && dataChe[r][c] != null) {\n                        value = dataChe[r][c];\n                    }\n                    x[c + curC] = value;\n                }\n                d[r + curR] = x;\n            }\n            if (addr > 0 || addc > 0) {\n                jfrefreshgridall(d[0].length, d.length, d, null, Store.luckysheet_select_save, 'datachangeAll');\n            } else {\n                jfrefreshrange(d, Store.luckysheet_select_save);\n            }\n        },\n        clearRangeByindex: function (st_r, ed_r, st_c, ed_c, sheetIndex) {\n            let index = getSheetIndex(sheetIndex);\n            let d = $.extend(true, [], Store.luckysheetfile[index]['data']);\n            for (let r = st_r; r <= ed_r; r++) {\n                let x = [].concat(d[r]);\n                for (let c = st_c; c <= ed_c; c++) {\n                    formula.delFunctionGroup(r, c);\n                    formula.execFunctionGroup(r, c, '');\n                    x[c] = null;\n                }\n                d[r] = x;\n            }\n            if (sheetIndex == Store.currentSheetIndex) {\n                let rlen = ed_r - st_r + 1, clen = ed_c - st_c + 1;\n                if (rlen > 5000) {\n                    jfrefreshgrid(d, [{\n                            'row': [\n                                st_r,\n                                ed_r\n                            ],\n                            'column': [\n                                st_c,\n                                ed_c\n                            ]\n                        }]);\n                } else {\n                    jfrefreshrange(d, {\n                        'row': [\n                            st_r,\n                            ed_r\n                        ],\n                        'column': [\n                            st_c,\n                            ed_c\n                        ]\n                    });\n                }\n            } else {\n                Store.luckysheetfile[index]['data'] = d;\n            }\n        },\n        controlHandlerD: function (dataChe) {\n            let _this = this;\n            let d = _this.deepCopyFlowData(Store.flowdata);    //取数据\n            //取数据\n            let last = Store.luckysheet_select_save[Store.luckysheet_select_save.length - 1];\n            let r1 = last['row'][0], r2 = last['row'][1];\n            let c1 = last['column'][0], c2 = last['column'][1];\n            let rlen = dataChe.length, clen = dataChe[0].length;\n            let addr = r1 + rlen - d.length, addc = c1 + clen - d[0].length;\n            if (addr > 0 || addc > 0) {\n                d = datagridgrowth([].concat(d), addr, addc, true);\n            }\n            for (let r = r1; r <= r2; r++) {\n                for (let c = c1; c <= c2; c++) {\n                    d[r][c] = null;\n                }\n            }\n            for (let i = 0; i < rlen; i++) {\n                for (let j = 0; j < clen; j++) {\n                    d[r1 + i][c1 + j] = dataChe[i][j];\n                }\n            }\n            let range = [\n                {\n                    'row': [\n                        r1,\n                        r2\n                    ],\n                    'column': [\n                        c1,\n                        c2\n                    ]\n                },\n                {\n                    'row': [\n                        r1,\n                        r1 + rlen - 1\n                    ],\n                    'column': [\n                        c1,\n                        c1 + clen - 1\n                    ]\n                }\n            ];\n            jfrefreshgrid(d, range);\n        }\n    };\n    return editor;\n});"]}