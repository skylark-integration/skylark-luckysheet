{"version":3,"sources":["global/func_methods.js"],"names":["define","m_util","m_validate","m_format","formula","dayjs","getObjType","isRealNum","isRealNull","valueIsError","update","error","getCellDataArr","rangeObj","nullCellType","isNeglectNullCell","dataArr","data","push","i","length","j","cell","value","v","getCellDataDyadicArr","rowArr","getDataArr","arr","isNeglectNaN","getDataDyadicArr","isDyadicArr","isDyadic","collen","getFirstValue","_this","this","startCell","cell_r","window","luckysheetCurrentRow","cell_c","luckysheetCurrentColumn","rowl","coll","mc","rs","cs","cellrange","getcellrange","str","row","edr","stc","column","edc","getCellBoolen","cumulative","toLowerCase","parseFloat","getCellDate","date_text","ct","t","getCellrangeDate","date","concat","getRegExpStr","replace","factorial","num","factorialDouble","variance","num_arr","sum","count","avg","sum_variance","number","variance_s","standardDeviation","Math","sqrt","standardDeviation_s","isLeapYear","year","Date","getMonth","feb29Between","date1","date2","year1","mar1year1","set","month","year2","mar1year2","findResultIndex","database","criterias","matches","maxCriteriaLength","k","l","currentCriteriaResult","hasMatchingCriteria","criteria","criteriaField","p","Function","result","n","findField","title","index","rest","array","idx","slice","compact"],"mappings":"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","file":"../../global/func_methods.js","sourcesContent":["define([\n    '../utils/util',\n    './validate',\n    './format',\n    './formula',\n    'skylark-moment'\n], function (m_util, m_validate, m_format, formula, dayjs) {\n    'use strict';\n    const {getObjType} = m_util;\n    const {isRealNum, isRealNull, valueIsError} = m_validate;\n    const {update} = m_format;\n    const error = {\n        v: '#VALUE!',\n        //错误的参数或运算符\n        n: '#NAME?',\n        //公式名称错误\n        na: '#N/A',\n        //函数或公式中没有可用数值\n        r: '#REF!',\n        //删除了由其他公式引用的单元格\n        d: '#DIV/0!',\n        //除数是0或空单元格\n        nm: '#NUM!',\n        //当公式或函数中某个数字有问题时\n        nl: '#NULL!',\n        //交叉运算符（空格）使用不正确\n        sp: '#SPILL!'    //数组范围有其它值\n    };\n    //数组范围有其它值\n    const func_methods = {\n        //单元格数据生成一维数组\n        getCellDataArr: function (rangeObj, nullCellType, isNeglectNullCell) {\n            let dataArr = [];\n            if (rangeObj.data == null) {\n                if (!isNeglectNullCell) {\n                    if (nullCellType === 'number') {\n                        dataArr.push(0);\n                    } else if (nullCellType === 'text') {\n                        dataArr.push('');\n                    }\n                }\n            } else {\n                if (getObjType(rangeObj.data) === 'array') {\n                    for (let i = 0; i < rangeObj.data.length; i++) {\n                        for (let j = 0; j < rangeObj.data[i].length; j++) {\n                            let cell = rangeObj.data[i][j];\n                            let value = cell;\n                            if (getObjType(cell) === 'object') {\n                                value = cell.v;\n                            }\n                            if (value == null) {\n                                if (!isNeglectNullCell) {\n                                    if (nullCellType === 'number') {\n                                        value = 0;\n                                    } else if (nullCellType === 'text') {\n                                        value = '';\n                                    }\n                                    dataArr.push(value);\n                                }\n                            } else {\n                                dataArr.push(value);\n                            }\n                        }\n                    }\n                } else {\n                    if (isRealNull(rangeObj.data.v)) {\n                        if (!isNeglectNullCell) {\n                            if (nullCellType == 'number') {\n                                dataArr.push(0);\n                            } else if (nullCellType == 'text') {\n                                dataArr.push('');\n                            }\n                        }\n                    } else {\n                        dataArr.push(rangeObj.data.v);\n                    }\n                }\n            }\n            return dataArr;\n        },\n        //单元格数据生成二维数组\n        getCellDataDyadicArr: function (rangeObj, nullCellType) {\n            let dataArr = [];\n            if (rangeObj.data == null) {\n                let rowArr = [];\n                if (nullCellType == 'number') {\n                    rowArr.push(0);\n                } else if (nullCellType == 'text') {\n                    rowArr.push('');\n                }\n                dataArr.push(rowArr);\n            } else {\n                if (getObjType(rangeObj.data) == 'array') {\n                    for (let i = 0; i < rangeObj.data.length; i++) {\n                        let rowArr = [];\n                        for (let j = 0; j < rangeObj.data[i].length; j++) {\n                            let cell = rangeObj.data[i][j];\n                            let value = cell;\n                            if (getObjType(cell) === 'object') {\n                                value = cell.v;\n                            }\n                            if (value == null) {\n                                if (nullCellType === 'number') {\n                                    value = 0;\n                                } else if (nullCellType === 'text') {\n                                    value = '';\n                                }\n                            }\n                            rowArr.push(value);\n                        }\n                        dataArr.push(rowArr);\n                    }\n                } else {\n                    let rowArr = [];\n                    let value = rangeObj.data.v;\n                    if (isRealNull(value)) {\n                        if (nullCellType == 'number') {\n                            value = 0;\n                        } else if (nullCellType == 'text') {\n                            value = '';\n                        }\n                    }\n                    rowArr.push(value);\n                    dataArr.push(rowArr);\n                }\n            }\n            return dataArr;\n        },\n        //数组数据生成一维数组\n        getDataArr: function (arr, isNeglectNaN) {\n            let dataArr = [];\n            if (isNeglectNaN == null) {\n                isNeglectNaN = false;\n            }\n            if (getObjType(arr[0]) == 'array') {\n                for (let i = 0; i < arr.length; i++) {\n                    for (let j = 0; j < arr[i].length; j++) {\n                        if (isNeglectNaN && !isRealNum(arr[i][j])) {\n                            continue;\n                        }\n                        dataArr.push(arr[i][j]);\n                    }\n                }\n            } else {\n                for (let i = 0; i < arr.length; i++) {\n                    if (isNeglectNaN && !isRealNum(arr[i])) {\n                        continue;\n                    }\n                    dataArr.push(arr[i]);\n                }\n            }\n            return dataArr;\n        },\n        getDataDyadicArr: function (arr) {\n            let dataArr = [];\n            if (getObjType(arr[0]) == 'array') {\n                for (let i = 0; i < arr.length; i++) {\n                    let rowArr = [];\n                    for (let j = 0; j < arr[i].length; j++) {\n                        rowArr.push(arr[i][j]);\n                    }\n                    dataArr.push(rowArr);\n                }\n            } else {\n                let rowArr = [];\n                for (let i = 0; i < arr.length; i++) {\n                    rowArr.push(arr[i]);\n                }\n                dataArr.push(rowArr);\n            }\n            return dataArr;\n        },\n        //是否是规则二维数组\n        isDyadicArr: function (arr) {\n            let isDyadic = true;\n            if (arr.length > 1) {\n                let collen = arr[0].length;\n                for (let i = 1; i < arr.length; i++) {\n                    if (arr[i].length != collen) {\n                        isDyadic = false;\n                        break;\n                    }\n                }\n            }\n            return isDyadic;\n        },\n        //获取单个单元格数据，数组第一个值\n        getFirstValue: function (data, nullCellType) {\n            let _this = this;\n            if (nullCellType == null) {\n                nullCellType = 'number';\n            }\n            let value;\n            if (getObjType(data) == 'array') {\n                if (getObjType(data[0]) == 'array') {\n                    if (!_this.isDyadicArr(data)) {\n                        return error.v;\n                    }\n                    value = data[0][0];\n                } else {\n                    value = data[0];\n                }\n            } else if (getObjType(data) == 'object' && data.startCell != null) {\n                if (data.data == null) {\n                    if (nullCellType == 'number') {\n                        value = 0;\n                    } else if (nullCellType == 'text') {\n                        value = '';\n                    }\n                } else {\n                    let cell_r = window.luckysheetCurrentRow;\n                    let cell_c = window.luckysheetCurrentColumn;\n                    if (data.rowl == 1 && data.coll == 1) {\n                        value = data.data;\n                        if (value == null || isRealNull(value.v)) {\n                            if (nullCellType == 'number') {\n                                value = 0;\n                            } else if (nullCellType == 'text') {\n                                value = '';\n                            }\n                        } else {\n                            value = value.v;\n                        }\n                    } else {\n                        if (data.data[0][0].mc != null && data.data[0][0].mc.rs == data.rowl && data.data[0][0].mc.cs == data.coll) {\n                            value = data.data[0][0];\n                            if (value == null || isRealNull(value.v)) {\n                                if (nullCellType == 'number') {\n                                    value = 0;\n                                } else if (nullCellType == 'text') {\n                                    value = '';\n                                }\n                            } else {\n                                value = value.v;\n                            }\n                        } else if (data.rowl == 1 || data.coll == 1) {\n                            let cellrange = formula.getcellrange(data.startCell);\n                            let str = cellrange.row[0], edr = str + data.rowl - 1, stc = cellrange.column[0], edc = stc + data.coll - 1;\n                            if (data.rowl == 1) {\n                                if (cell_c < stc || cell_c > edc) {\n                                    return error.v;\n                                }\n                                value = data.data[0][cell_c - stc];\n                            } else if (data.coll == 1) {\n                                if (cell_r < str || cell_r > edr) {\n                                    return error.v;\n                                }\n                                value = data.data[cell_r - str][0];\n                            }\n                            if (value == null || isRealNull(value.v) || value.mc != null) {\n                                if (nullCellType == 'number') {\n                                    value = 0;\n                                } else if (nullCellType == 'text') {\n                                    value = '';\n                                }\n                            } else {\n                                value = value.v;\n                            }\n                        } else {\n                            return error.v;\n                        }\n                    }\n                }\n            } else {\n                value = data;\n            }\n            return value;\n        },\n        //获取单元格的逻辑值\n        getCellBoolen: function (data) {\n            let _this = this;\n            let cumulative = _this.getFirstValue(data);\n            if (valueIsError(cumulative)) {\n                return cumulative;\n            }\n            if (getObjType(cumulative) == 'boolean') {\n            } else if (getObjType(cumulative) == 'string' && (cumulative.toLowerCase() == 'true' || cumulative.toLowerCase() == 'false')) {\n                if (cumulative.toLowerCase() == 'true') {\n                    cumulative = true;\n                } else if (cumulative.toLowerCase() == 'false') {\n                    cumulative = false;\n                }\n            } else if (isRealNum(cumulative)) {\n                cumulative = parseFloat(cumulative);\n                cumulative = cumulative == 0 ? false : true;\n            } else {\n                return error.v;\n            }\n            return cumulative;\n        },\n        //获取单元格的日期\n        getCellDate: function (data) {\n            let _this = this;\n            let date_text;\n            if (getObjType(data) == 'array') {\n                if (getObjType(data[0]) == 'array') {\n                    if (!_this.isDyadicArr(data)) {\n                        return error.v;\n                    }\n                    date_text = data[0][0];\n                } else {\n                    date_text = data[0];\n                }\n            } else if (getObjType(data) == 'object' && data.startCell != null) {\n                if (data.data == null || getObjType(data.data) == 'array' || isRealNull(data.data.v)) {\n                    return error.v;\n                }\n                date_text = data.data.v;\n                if (data.data.ct != null && data.data.ct.t == 'd') {\n                    date_text = update('YYYY-MM-DD h:mm:ss', date_text);\n                }\n            } else {\n                date_text = data;\n            }\n            return date_text;\n        },\n        getCellrangeDate: function (data) {\n            let _this = this;\n            let date = [];\n            if (getObjType(data) == 'array') {\n                if (getObjType(data[0]) == 'array' && !_this.isDyadicArr(data)) {\n                    return error.v;\n                }\n                date = date.concat(_this.getDataArr(data, false));\n            } else if (getObjType(data) == 'object' && data.startCell != null) {\n                if (data.data == null) {\n                    date.push(0);\n                } else {\n                    if (getObjType(data.data) == 'array') {\n                        for (let i = 0; i < data.data.length; i++) {\n                            for (let j = 0; j < data.data[i].length; j++) {\n                                if (data.data[i][j] != null && !isRealNull(data.data[i][j].v)) {\n                                    let value = data.data[i][j].v;\n                                    if (data.data[i][j].ct != null && data.data[i][j].ct.t == 'd') {\n                                        value = update('YYYY-MM-DD h:mm:ss', value);\n                                    }\n                                    date.push(value);\n                                } else {\n                                    date.push(0);\n                                }\n                            }\n                        }\n                    } else {\n                        let value = data.data.v;\n                        if (data.data.ct != null && data.data.ct.t == 'd') {\n                            value = update('YYYY-MM-DD h:mm:ss', value);\n                        }\n                        date.push(value);\n                    }\n                }\n            } else {\n                date.push(data);\n            }\n            return date;\n        },\n        //获取正则字符串（处理 . * ? ~* ~?）\n        getRegExpStr: function (str) {\n            return str.replace('~*', '\\\\*').replace('~?', '\\\\?').replace('.', '\\\\.').replace('*', '.*').replace('?', '.');\n        },\n        //阶乘\n        factorial: function (num) {\n            if (num == 0 || num == 1) {\n                return 1;\n            } else {\n                return num * this.factorial(num - 1);\n            }\n        },\n        //双阶乘\n        factorialDouble: function (num) {\n            if (num <= 0) {\n                return 1;\n            } else {\n                return num * this.factorialDouble(num - 2);\n            }\n        },\n        //总体方差\n        variance: function (num_arr) {\n            let sum = 0, count = 0;\n            for (let i = 0; i < num_arr.length; i++) {\n                let number = num_arr[i];\n                sum += number;\n                count++;\n            }\n            let avg = sum / count;\n            let sum_variance = 0;\n            for (let j = 0; j < num_arr.length; j++) {\n                let number = num_arr[j];\n                sum_variance += (number - avg) * (number - avg);\n            }\n            return sum_variance / count;\n        },\n        //样本方差\n        variance_s: function (num_arr) {\n            let sum = 0, count = 0;\n            for (let i = 0; i < num_arr.length; i++) {\n                let number = num_arr[i];\n                sum += number;\n                count++;\n            }\n            let avg = sum / count;\n            let sum_variance = 0;\n            for (let j = 0; j < num_arr.length; j++) {\n                let number = num_arr[j];\n                sum_variance += (number - avg) * (number - avg);\n            }\n            return sum_variance / (count - 1);\n        },\n        //总体标准偏差\n        standardDeviation: function (num_arr) {\n            let sum = 0, count = 0;\n            for (let i = 0; i < num_arr.length; i++) {\n                let number = num_arr[i];\n                sum += number;\n                count++;\n            }\n            let avg = sum / count;\n            let sum_variance = 0;\n            for (let j = 0; j < num_arr.length; j++) {\n                let number = num_arr[j];\n                sum_variance += (number - avg) * (number - avg);\n            }\n            return Math.sqrt(sum_variance / count);\n        },\n        //样本标准偏差\n        standardDeviation_s: function (num_arr) {\n            let sum = 0, count = 0;\n            for (let i = 0; i < num_arr.length; i++) {\n                let number = num_arr[i];\n                sum += number;\n                count++;\n            }\n            let avg = sum / count;\n            let sum_variance = 0;\n            for (let j = 0; j < num_arr.length; j++) {\n                let number = num_arr[j];\n                sum_variance += (number - avg) * (number - avg);\n            }\n            return Math.sqrt(sum_variance / (count - 1));\n        },\n        //是否是闰年\n        isLeapYear: function (year) {\n            return new Date(year, 1, 29).getMonth() === 1;\n        },\n        //2月是否有29\n        feb29Between: function (date1, date2) {\n            let _this = this;\n            let year1 = dayjs(date1).year();\n            let mar1year1 = dayjs().set({\n                'year': year1,\n                'month': 2,\n                'date': 1\n            });\n            if (_this.isLeapYear(year1) && dayjs(date1) < dayjs(mar1year1) && dayjs(date2) >= dayjs(mar1year1)) {\n                return true;\n            }\n            let year2 = dayjs(date2).year();\n            let mar1year2 = dayjs().set({\n                'year': year2,\n                'month': 2,\n                'date': 1\n            });\n            return _this.isLeapYear(year2) && dayjs(date2) >= dayjs(mar1year2) && dayjs(date1) < dayjs(mar1year2);\n        },\n        //SQL 查询\n        findResultIndex: function (database, criterias) {\n            let matches = {};\n            for (let i = 1; i < database[0].length; ++i) {\n                matches[i] = true;\n            }\n            let maxCriteriaLength = criterias[0].length;\n            for (i = 1; i < criterias.length; ++i) {\n                if (criterias[i].length > maxCriteriaLength) {\n                    maxCriteriaLength = criterias[i].length;\n                }\n            }\n            for (let k = 1; k < database.length; ++k) {\n                for (let l = 1; l < database[k].length; ++l) {\n                    let currentCriteriaResult = false;\n                    let hasMatchingCriteria = false;\n                    for (let j = 0; j < criterias.length; ++j) {\n                        let criteria = criterias[j];\n                        if (criteria.length < maxCriteriaLength) {\n                            continue;\n                        }\n                        let criteriaField = criteria[0];\n                        if (database[k][0] !== criteriaField) {\n                            continue;\n                        }\n                        hasMatchingCriteria = true;\n                        for (let p = 1; p < criteria.length; ++p) {\n                            currentCriteriaResult = currentCriteriaResult || new Function('return ' + database[k][l] + criteria[p])();    // jshint ignore:line\n                        }\n                    }\n                    // jshint ignore:line\n                    if (hasMatchingCriteria) {\n                        matches[l] = matches[l] && currentCriteriaResult;\n                    }\n                }\n            }\n            let result = [];\n            for (let n = 0; n < database[0].length; ++n) {\n                if (matches[n]) {\n                    result.push(n - 1);\n                }\n            }\n            return result;\n        },\n        findField: function (database, title) {\n            let index = null;\n            for (let i = 0; i < database.length; i++) {\n                if (database[i][0] == title) {\n                    index = i;\n                    break;\n                }\n            }\n            if (index == null) {\n                return error.v;\n            }\n            return index;\n        },\n        rest: function (array, idx) {\n            idx = idx || 1;\n            if (!array || typeof array.slice !== 'function') {\n                return array;\n            }\n            return array.slice(idx);\n        },\n        compact: function (array) {\n            if (!array) {\n                return array;\n            }\n            let result = [];\n            for (let i = 0; i < array.length; ++i) {\n                if (!array[i]) {\n                    continue;\n                }\n                result.push(array[i]);\n            }\n            return result;\n        }\n    };\n    return func_methods;\n});"]}