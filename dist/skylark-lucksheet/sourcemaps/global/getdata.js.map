{"version":3,"sources":["global/getdata.js"],"names":["define","m_util","m_get","server","formula","editor","m_dynamicArray","sheetmanage","m_inlineString","locale","Store","getObjType","rgbTohex","getSheetIndex","dynamicArrayCompute","isInlineStringCT","isInlineStringCell","convertCssToStyleList","getcellvalue","r","c","data","type","d_value","flowdata","map","col","i","row","retv","functionHTMLGenerate","ct","t","m","undefined","getOrigincell","getSheetByIndex","getFontStyleByCell","cell","checksAF","checksCF","isCheck","style","locale_fontarray","fontarray","key","value","checkstatusByCell","f","isNaN","parseInt","color","fs","Math","floor","a","foucsStatus","bl","it","ff","cl","un","indexOf","toString","substr","getdatabyselection","range","sheetIndex","luckysheet_select_save","length","d","cfg","currentSheetIndex","luckysheetfile","deepCopyFlowData","config","push","getdatabyselectionD","dynamicArray_compute","getdatabyselectionNoCopy","datagridgrowth","addr","addc","iscallback","dataClen","coladd","rowadd","concat","saveParam","k","getcellFormula","getRealCellValue","s","getInlineStringNoStyle","strings","strObj","v","getInlineStringStyle","textTrim","x","replace"],"mappings":"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","file":"../../global/getdata.js","sourcesContent":["define([\n    '../utils/util',\n    '../methods/get',\n    '../controllers/server',\n    './formula',\n    './editor',\n    './dynamicArray',\n    '../controllers/sheetmanage',\n    '../controllers/inlineString',\n    '../locale/locale',\n    '../store'\n], function (m_util, m_get, server, formula, editor, m_dynamicArray, sheetmanage, m_inlineString, locale, Store) {\n    'use strict';\n    const {getObjType, rgbTohex} = m_util;\n    const {getSheetIndex} = m_get;\n    const {dynamicArrayCompute} = m_dynamicArray;\n    const {isInlineStringCT, isInlineStringCell, convertCssToStyleList} = m_inlineString;\n    function getdatabyselection(range, sheetIndex) {\n        if (range == null) {\n            range = Store.luckysheet_select_save[0];\n        }\n        if (range['row'] == null || range['row'].length == 0) {\n            return [];\n        }    //取数据\n        //取数据\n        let d, cfg;\n        if (sheetIndex != null && sheetIndex != Store.currentSheetIndex) {\n            d = Store.luckysheetfile[getSheetIndex(sheetIndex)]['data'];\n            cfg = Store.luckysheetfile[getSheetIndex(sheetIndex)]['config'];\n        } else {\n            d = editor.deepCopyFlowData(Store.flowdata);\n            cfg = Store.config;\n        }\n        let data = [];\n        for (let r = range['row'][0]; r <= range['row'][1]; r++) {\n            if (d[r] == null) {\n                continue;\n            }\n            if (cfg['rowhidden'] != null && cfg['rowhidden'][r] != null) {\n                continue;\n            }\n            let row = [];\n            for (let c = range['column'][0]; c <= range['column'][1]; c++) {\n                row.push(d[r][c]);\n            }\n            data.push(row);\n        }\n        return data;\n    }\n    function getdatabyselectionD(d, range) {\n        if (range == null || range['row'] == null || range['row'].length == 0) {\n            return [];\n        }\n        let dynamicArray_compute = dynamicArrayCompute(Store.luckysheetfile[getSheetIndex(Store.currentSheetIndex)]['dynamicArray']);\n        let data = [];\n        if (d == null) {\n            return data;\n        }\n        for (let r = range['row'][0]; r <= range['row'][1]; r++) {\n            if (d[r] == null) {\n                continue;\n            }    // if (Store.config[\"rowhidden\"] != null && Store.config[\"rowhidden\"][r] != null) {\n                 //     continue;\n                 // }\n            // if (Store.config[\"rowhidden\"] != null && Store.config[\"rowhidden\"][r] != null) {\n            //     continue;\n            // }\n            let row = [];\n            for (let c = range['column'][0]; c <= range['column'][1]; c++) {\n                let value;\n                if (r + '_' + c in dynamicArray_compute) {\n                    value = dynamicArray_compute[r + '_' + c];\n                } else {\n                    value = d[r][c];\n                }\n                row.push(value);\n            }\n            data.push(row);\n        }\n        return data;\n    }\n    function getdatabyselectionNoCopy(range) {\n        if (range == null || range['row'] == null || range['row'].length == 0) {\n            return [];\n        }\n        let data = [];\n        for (let r = range['row'][0]; r <= range['row'][1]; r++) {\n            let row = [];\n            if (Store.config['rowhidden'] != null && Store.config['rowhidden'][r] != null) {\n                continue;\n            }\n            for (let c = range['column'][0]; c <= range['column'][1]; c++) {\n                let value = '';\n                if (Store.flowdata[r] != null && Store.flowdata[r][c] != null) {\n                    value = Store.flowdata[r][c];\n                }\n                row.push(value);\n            }\n            data.push(row);\n        }\n        return data;\n    }\n    function getcellvalue(r, c, data, type) {\n        if (type == null) {\n            type = 'v';\n        }\n        if (data == null) {\n            data = Store.flowdata;\n        }\n        let d_value;\n        if (r != null && c != null) {\n            d_value = data[r][c];\n        } else if (r != null) {\n            d_value = data[r];\n        } else if (c != null) {\n            let newData = data[0].map(function (col, i) {\n                return data.map(function (row) {\n                    return row[i];\n                });\n            });\n            d_value = newData[c];\n        } else {\n            return data;\n        }\n        let retv = d_value;\n        if (getObjType(d_value) == 'object') {\n            retv = d_value[type];\n            if (type == 'f' && retv != null) {\n                retv = formula.functionHTMLGenerate(retv);\n            } else if (type == 'f') {\n                retv = d_value['v'];\n            } else if (d_value && d_value.ct && d_value.ct.t == 'd') {\n                retv = d_value.m;\n            }\n        }\n        if (retv == undefined) {\n            retv = null;\n        }\n        return retv;\n    }\n    function datagridgrowth(data, addr, addc, iscallback) {\n        if (addr <= 0 && addc <= 0) {\n            return data;\n        }\n        if (addr <= 0) {\n            addr = 0;\n        }\n        if (addc <= 0) {\n            addc = 0;\n        }\n        let dataClen = 0;\n        if (data.length == 0) {\n            data = [];\n            dataClen = 0;\n        } else {\n            dataClen = data[0].length;\n        }\n        let coladd = [];    //需要额外增加的空列\n        //需要额外增加的空列\n        for (let c = 0; c < addc; c++) {\n            coladd.push(null);\n        }\n        let rowadd = [];    //完整的一个空行\n        //完整的一个空行\n        for (let r = 0; r < dataClen + addc; r++) {\n            rowadd.push(null);\n        }\n        for (let r = 0; r < data.length; r++) {\n            data[r] = [].concat(data[r].concat(coladd));\n        }\n        for (let r = 0; r < addr; r++) {\n            data.push([].concat(rowadd));\n        }\n        if (!!iscallback) {\n            server.saveParam('all', Store.currentSheetIndex, data.length, { 'k': 'row' });\n            server.saveParam('all', Store.currentSheetIndex, data[0].length, { 'k': 'column' });\n        }\n        return data;\n    }\n    function getcellFormula(r, c, i, data) {\n        let cell;\n        if (data != null) {\n            cell = data[r][c];\n        } else {\n            cell = getOrigincell(r, c, i);\n        }\n        if (cell == null) {\n            return null;\n        }\n        return cell.f;\n    }\n    function getOrigincell(r, c, i) {\n        if (r == null || c == null) {\n            return;\n        }\n        let data;\n        if (i == null) {\n            data = Store.flowdata;\n        } else {\n            let sheet = sheetmanage.getSheetByIndex(i);\n            data = sheet.data;\n        }\n        if (!data || !data[r] || !data[r][c]) {\n            return;\n        }\n        return data[r][c];\n    }\n    function getRealCellValue(r, c) {\n        let value = getcellvalue(r, c, null, 'm');\n        if (value == null) {\n            value = getcellvalue(r, c);\n            if (value == null) {\n                let ct = getcellvalue(r, c, null, 'ct');\n                if (isInlineStringCT(ct)) {\n                    value = ct.s;\n                }\n            }\n        }\n        return value;\n    }\n    function getInlineStringNoStyle(r, c) {\n        let ct = getcellvalue(r, c, null, 'ct');\n        if (isInlineStringCT(ct)) {\n            let strings = ct.s, value = '';\n            for (let i = 0; i < strings.length; i++) {\n                let strObj = strings[i];\n                if (strObj.v != null) {\n                    value += strObj.v;\n                }\n            }\n            return value;\n        }\n        return '';\n    }\n    function getInlineStringStyle(r, c, data) {\n        let ct = getcellvalue(r, c, data, 'ct');\n        if (data == null) {\n            data = Store.flowdata;\n        }\n        let cell = data[r][c];\n        if (isInlineStringCT(ct)) {\n            let strings = ct.s, value = '';\n            for (let i = 0; i < strings.length; i++) {\n                let strObj = strings[i];\n                if (strObj.v != null) {\n                    let style = getFontStyleByCell(strObj);\n                    value += \"<span index='\" + i + \"' style='\" + style + \"'>\" + strObj.v + '</span>';\n                }\n            }\n            return value;\n        }\n        return '';\n    }\n    function getFontStyleByCell(cell, checksAF, checksCF, isCheck = true) {\n        if (cell == null) {\n            return;\n        }\n        let style = '';\n        const _locale = locale();\n        const locale_fontarray = _locale.fontarray;\n        for (let key in cell) {\n            let value = cell[key];\n            if (isCheck) {\n                value = checkstatusByCell(cell, key);\n            }\n            if (key == 'bl' && value != '0') {\n                style += 'font-weight: bold;';\n            }\n            if (key == 'it' && value != '0') {\n                style += 'font-style:italic;';\n            }\n            if (key == 'ff') {\n                let f = value;\n                if (!isNaN(parseInt(value))) {\n                    f = locale_fontarray[parseInt(value)];\n                } else {\n                    f = value;\n                }\n                style += 'font-family: ' + f + ';';\n            }\n            if (key == 'fs' && value != '10') {\n                style += 'font-size: ' + value + 'pt;';\n            }\n            if (key == 'fc' && value != '#000000' || checksAF != null || checksCF != null && checksCF['textColor'] != null) {\n                if (checksCF != null && checksCF['textColor'] != null) {\n                    style += 'color: ' + checksCF['textColor'] + ';';\n                } else if (checksAF != null) {\n                    style += 'color: ' + checksAF[0] + ';';\n                } else {\n                    style += 'color: ' + value + ';';\n                }\n            }\n            if (key == 'cl' && value != '0') {\n                style += 'text-decoration: line-through;';\n            }\n            if (key == 'un' && (value == '1' || value == '3')) {\n                let color = cell['_color'];\n                if (color == null) {\n                    color = cell['fc'];\n                }\n                let fs = cell['_fontSize'];\n                if (fs == null) {\n                    fs = cell['fs'];\n                }\n                style += 'border-bottom: ' + Math.floor(fs / 9) + 'px solid ' + color + ';';\n            }\n        }\n        return style;\n    }\n    function checkstatusByCell(cell, a) {\n        let foucsStatus = cell;\n        let tf = {\n            'bl': 1,\n            'it': 1,\n            'ff': 1,\n            'cl': 1,\n            'un': 1\n        };\n        if (a in tf || a == 'fs' && isInlineStringCell(cell)) {\n            if (foucsStatus == null) {\n                foucsStatus = '0';\n            } else {\n                // var  w = window.getSelection(), isInlineEdit=false; \n                // if(w.type!=\"None\"){\n                //     var range = w.getRangeAt(0);\n                //     let startContainer = range.startContainer;\n                //     if (parseInt($(\"#luckysheet-input-box\").css(\"top\")) > 0 && startContainer.parentNode.tagName==\"SPAN\" && !range.collapsed) {\n                //         let span = startContainer.parentNode;\n                //         let styleList = convertCssToStyleList(span.style.cssText);\n                //         foucsStatus = styleList[a];\n                //         isInlineEdit = true;\n                //     }\n                // }\n                // if(!isInlineEdit){       \n                //     if(isInlineStringCell(cell)){\n                //         foucsStatus = cell.ct.s[0][a];\n                //     }\n                //     else{\n                //         foucsStatus = foucsStatus[a];\n                //     }\n                // }   \n                foucsStatus = foucsStatus[a];\n                if (foucsStatus == null) {\n                    foucsStatus = '0';\n                }\n            }\n        } else if (a == 'fc') {\n            if (foucsStatus == null) {\n                foucsStatus = '#000000';\n            } else {\n                foucsStatus = foucsStatus[a];\n                if (foucsStatus == null) {\n                    foucsStatus = '#000000';\n                }\n                if (foucsStatus.indexOf('rgba') > -1) {\n                    foucsStatus = rgbTohex(foucsStatus);\n                }\n            }\n        } else if (a == 'bg') {\n            if (foucsStatus == null) {\n                foucsStatus = null;\n            } else {\n                foucsStatus = foucsStatus[a];\n                if (foucsStatus == null) {\n                    foucsStatus = null;\n                } else if (foucsStatus.toString().indexOf('rgba') > -1) {\n                    foucsStatus = rgbTohex(foucsStatus);\n                }\n            }\n        } else if (a.substr(0, 2) == 'bs') {\n            if (foucsStatus == null) {\n                foucsStatus = 'none';\n            } else {\n                foucsStatus = foucsStatus[a];\n                if (foucsStatus == null) {\n                    foucsStatus = 'none';\n                }\n            }\n        } else if (a.substr(0, 2) == 'bc') {\n            if (foucsStatus == null) {\n                foucsStatus = '#000000';\n            } else {\n                foucsStatus = foucsStatus[a];\n                if (foucsStatus == null) {\n                    foucsStatus = '#000000';\n                }\n            }\n        } else if (a == 'ht') {\n            if (foucsStatus == null) {\n                foucsStatus = '1';\n            } else {\n                foucsStatus = foucsStatus[a];\n                if (foucsStatus == null) {\n                    foucsStatus = '1';\n                }\n            }\n            if ([\n                    '0',\n                    '1',\n                    '2'\n                ].indexOf(foucsStatus.toString()) == -1) {\n                foucsStatus = '1';\n            }\n        } else if (a == 'vt') {\n            //默认垂直居中\n            if (foucsStatus == null) {\n                foucsStatus = '0';\n            } else {\n                foucsStatus = foucsStatus[a];\n                if (foucsStatus == null) {\n                    foucsStatus = '0';\n                }\n            }\n            if ([\n                    '0',\n                    '1',\n                    '2'\n                ].indexOf(foucsStatus.toString()) == -1) {\n                foucsStatus = '0';\n            }\n        } else if (a == 'ct') {\n            if (foucsStatus == null) {\n                foucsStatus = null;\n            } else {\n                foucsStatus = foucsStatus[a];\n                if (foucsStatus == null) {\n                    foucsStatus = null;\n                }\n            }\n        } else if (a == 'fs') {\n            if (foucsStatus == null) {\n                foucsStatus = '10';\n            } else {\n                foucsStatus = foucsStatus[a];\n                if (foucsStatus == null) {\n                    foucsStatus = '10';\n                }\n            }\n        } else if (a == 'tb') {\n            if (foucsStatus == null) {\n                foucsStatus = '0';\n            } else {\n                foucsStatus = foucsStatus[a];\n                if (foucsStatus == null) {\n                    foucsStatus = '0';\n                }\n            }\n        } else if (a == 'tr') {\n            if (foucsStatus == null) {\n                foucsStatus = '0';\n            } else {\n                foucsStatus = foucsStatus[a];\n                if (foucsStatus == null) {\n                    foucsStatus = '0';\n                }\n            }\n        } else if (a == 'rt') {\n            if (foucsStatus == null) {\n                foucsStatus = null;\n            } else {\n                foucsStatus = foucsStatus[a];\n                if (foucsStatus == null) {\n                    foucsStatus = null;\n                }\n            }\n        }\n        return foucsStatus;\n    }\n    function textTrim(x) {\n        if (x == null || x.length == 0) {\n            return x;\n        }\n        return x.replace(/^\\s+|\\s+$/gm, '');\n    }\n    return {\n        getdatabyselection: getdatabyselection,\n        getdatabyselectionD: getdatabyselectionD,\n        getdatabyselectionNoCopy: getdatabyselectionNoCopy,\n        getcellvalue: getcellvalue,\n        datagridgrowth: datagridgrowth,\n        getcellFormula: getcellFormula,\n        getOrigincell: getOrigincell,\n        getRealCellValue: getRealCellValue,\n        getInlineStringNoStyle: getInlineStringNoStyle,\n        getInlineStringStyle: getInlineStringStyle,\n        getFontStyleByCell: getFontStyleByCell,\n        checkstatusByCell: checkstatusByCell,\n        textTrim: textTrim\n    };\n});"]}