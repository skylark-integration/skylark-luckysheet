{"version":3,"sources":["global/extend.js"],"names":["define","editor","formula","m_refresh","m_getdata","m_setdata","conditionformat","luckysheetFreezen","m_select","m_sheetSearch","m_protection","m_get","Store","jfrefreshgrid_adRC","jfrefreshgrid_deleteCell","jfrefreshgrid_rhcw","datagridgrowth","getcellFormula","setcellvalue","selectHightlightShow","luckysheet_searcharray","checkProtectionAuthorityNormal","checkProtectionNotEnable","getSheetIndex","getMoveRange","type","str","edr","stc","edc","r1","r2","c1","c2","rlen","clen","newRange","push","row","column","range","concat","luckysheetextendtable","index","value","direction","sheetIndex","currentSheetIndex","curOrder","file","luckysheetfile","d","$","extend","data","Math","floor","cfg","config","merge_new","m","mc","r","c","rs","cs","calcChain","newCalcChain","length","i","calc","calc_r","calc_c","calc_i","calc_funcStr","functionStr","functionStrChange","f","filter_select","filter","newFilterObj","JSON","stringify","f_r1","f_r2","f_c1","f_c2","k","f_rowhidden","rowhidden","f_rowhidden_new","n","parseFloat","f_cindex","cindex","CFarr","luckysheet_conditionformat_save","newCFarr","cf_range","cellrange","cf_new_range","j","CFr1","CFr2","CFc1","CFc2","cf","AFarr","luckysheet_alternateformat_save","newAFarr","AFr1","AFr2","AFc1","AFc2","af","newFreezen","freezenhorizontaldata","freezenverticaldata","freezen_scrollTop","freezen_row_st","freezen_top","visibledatarow","columnHeaderHeight","cutVolumn","freezen_scrollLeft","freezen_col_st","freezen_left","visibledatacolumn","rowHeaderWidth","dataVerification","newDataVerification","key","Number","split","item","type1","hyperlink","newHyperlink","rowlen_new","rowhidden_new","borderInfo","rangeType","borderRange","emptyRange","bd_r1","bd_r2","bd_obj","borderType","style","color","row_index","arr","Function","join","columnlen_new","colhidden_new","col","bd_c1","bd_c2","col_index","unshift","splice","len","rc","restore","luckysheet_select_save","scrollLeft","scrollTop","winH","height","width","row_pre","hide","luckysheetextendData","rowlen","newData","deepCopyFlowData","flowdata","collen","addNullData","v","webWorkerFlowDataCache","luckysheetdeletetable","st","ed","slen","freezen_st","freezen_st2","addcol","luckysheetDeleteCell","r_i","c_i","f_stc","f_edc","k2","addrow"],"mappings":"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","file":"../../global/extend.js","sourcesContent":["define([\n    './editor',\n    './formula',\n    './refresh',\n    './getdata',\n    './setdata',\n    '../controllers/conditionformat',\n    '../controllers/freezen',\n    '../controllers/select',\n    '../controllers/sheetSearch',\n    '../controllers/protection',\n    '../methods/get',\n    '../store'\n], function (editor, formula, m_refresh, m_getdata, m_setdata, conditionformat, luckysheetFreezen, m_select, m_sheetSearch, m_protection, m_get, Store) {\n    'use strict';\n    const {jfrefreshgrid_adRC, jfrefreshgrid_deleteCell, jfrefreshgrid_rhcw} = m_refresh;\n    const {datagridgrowth, getcellFormula} = m_getdata;\n    const {setcellvalue} = m_setdata;\n    const {selectHightlightShow} = m_select;\n    const {luckysheet_searcharray} = m_sheetSearch;\n    const {checkProtectionAuthorityNormal, checkProtectionNotEnable} = m_protection;\n    const {getSheetIndex} = m_get;\n    //增加行列\n    function luckysheetextendtable(type, index, value, direction, sheetIndex) {\n        sheetIndex = sheetIndex || Store.currentSheetIndex;\n        if (type == 'row' && !checkProtectionAuthorityNormal(sheetIndex, 'insertRows')) {\n            return;\n        } else if (type == 'column' && !checkProtectionAuthorityNormal(sheetIndex, 'insertColumns')) {\n            return;\n        }\n        let curOrder = getSheetIndex(sheetIndex);\n        let file = Store.luckysheetfile[curOrder];\n        let d = $.extend(true, [], file.data);\n        value = Math.floor(value);\n        let cfg = $.extend(true, {}, file.config);    //合并单元格配置变动\n        //合并单元格配置变动\n        if (cfg['merge'] == null) {\n            cfg['merge'] = {};\n        }\n        let merge_new = {};\n        for (let m in cfg['merge']) {\n            let mc = cfg['merge'][m];\n            let r = mc.r, c = mc.c, rs = mc.rs, cs = mc.cs;\n            if (type == 'row') {\n                if (index < r) {\n                    merge_new[r + value + '_' + c] = {\n                        'r': r + value,\n                        'c': c,\n                        'rs': rs,\n                        'cs': cs\n                    };\n                } else if (index == r) {\n                    if (direction == 'lefttop') {\n                        merge_new[r + value + '_' + c] = {\n                            'r': r + value,\n                            'c': c,\n                            'rs': rs,\n                            'cs': cs\n                        };\n                    } else {\n                        merge_new[r + '_' + c] = {\n                            'r': r,\n                            'c': c,\n                            'rs': rs + value,\n                            'cs': cs\n                        };\n                    }\n                } else if (index < r + rs - 1) {\n                    merge_new[r + '_' + c] = {\n                        'r': r,\n                        'c': c,\n                        'rs': rs + value,\n                        'cs': cs\n                    };\n                } else if (index == r + rs - 1) {\n                    if (direction == 'lefttop') {\n                        merge_new[r + '_' + c] = {\n                            'r': r,\n                            'c': c,\n                            'rs': rs + value,\n                            'cs': cs\n                        };\n                    } else {\n                        merge_new[r + '_' + c] = {\n                            'r': r,\n                            'c': c,\n                            'rs': rs,\n                            'cs': cs\n                        };\n                    }\n                } else {\n                    merge_new[r + '_' + c] = {\n                        'r': r,\n                        'c': c,\n                        'rs': rs,\n                        'cs': cs\n                    };\n                }\n            } else if (type == 'column') {\n                if (index < c) {\n                    merge_new[r + '_' + (c + value)] = {\n                        'r': r,\n                        'c': c + value,\n                        'rs': rs,\n                        'cs': cs\n                    };\n                } else if (index == c) {\n                    if (direction == 'lefttop') {\n                        merge_new[r + '_' + (c + value)] = {\n                            'r': r,\n                            'c': c + value,\n                            'rs': rs,\n                            'cs': cs\n                        };\n                    } else {\n                        merge_new[r + '_' + c] = {\n                            'r': r,\n                            'c': c,\n                            'rs': rs,\n                            'cs': cs + value\n                        };\n                    }\n                } else if (index < c + cs - 1) {\n                    merge_new[r + '_' + c] = {\n                        'r': r,\n                        'c': c,\n                        'rs': rs,\n                        'cs': cs + value\n                    };\n                } else if (index == c + cs - 1) {\n                    if (direction == 'lefttop') {\n                        merge_new[r + '_' + c] = {\n                            'r': r,\n                            'c': c,\n                            'rs': rs,\n                            'cs': cs + value\n                        };\n                    } else {\n                        merge_new[r + '_' + c] = {\n                            'r': r,\n                            'c': c,\n                            'rs': rs,\n                            'cs': cs\n                        };\n                    }\n                } else {\n                    merge_new[r + '_' + c] = {\n                        'r': r,\n                        'c': c,\n                        'rs': rs,\n                        'cs': cs\n                    };\n                }\n            }\n        }\n        cfg['merge'] = merge_new;    //公式配置变动\n        //公式配置变动\n        let calcChain = file.calcChain;\n        let newCalcChain = [];\n        if (calcChain != null && calcChain.length > 0) {\n            for (let i = 0; i < calcChain.length; i++) {\n                let calc = $.extend(true, {}, calcChain[i]);\n                let calc_r = calc.r, calc_c = calc.c, calc_i = calc.index, calc_funcStr = getcellFormula(calc_r, calc_c, calc_i);\n                if (type == 'row') {\n                    let functionStr = '=' + formula.functionStrChange(calc_funcStr, 'add', 'row', direction, index, value);\n                    if (d[calc_r][calc_c] && d[calc_r][calc_c].f == calc_funcStr) {\n                        d[calc_r][calc_c].f = functionStr;\n                    }\n                    if (direction == 'lefttop') {\n                        if (calc_r >= index) {\n                            calc.r += value;\n                        }\n                    } else if (direction == 'rightbottom') {\n                        if (calc_r > index) {\n                            calc.r += value;\n                        }\n                    }\n                    newCalcChain.push(calc);\n                } else if (type == 'column') {\n                    let functionStr = '=' + formula.functionStrChange(calc_funcStr, 'add', 'col', direction, index, value);\n                    if (d[calc_r][calc_c] && d[calc_r][calc_c].f == calc_funcStr) {\n                        d[calc_r][calc_c].f = functionStr;\n                    }\n                    if (direction == 'lefttop') {\n                        if (calc_c >= index) {\n                            calc.c += value;\n                        }\n                    } else if (direction == 'rightbottom') {\n                        if (calc_c > index) {\n                            calc.c += value;\n                        }\n                    }\n                    newCalcChain.push(calc);\n                }\n            }\n        }    //筛选配置变动\n        //筛选配置变动\n        let filter_select = file.filter_select;\n        let filter = file.filter;\n        let newFilterObj = null;\n        if (filter_select != null && JSON.stringify(filter_select) != '{}') {\n            newFilterObj = {\n                'filter_select': null,\n                'filter': null\n            };\n            let f_r1 = filter_select.row[0], f_r2 = filter_select.row[1];\n            let f_c1 = filter_select.column[0], f_c2 = filter_select.column[1];\n            if (type == 'row') {\n                if (f_r1 < index) {\n                    if (f_r2 == index && direction == 'lefttop') {\n                        f_r2 += value;\n                    } else if (f_r2 > index) {\n                        f_r2 += value;\n                    }\n                } else if (f_r1 == index) {\n                    if (direction == 'lefttop') {\n                        f_r1 += value;\n                        f_r2 += value;\n                    } else if (direction == 'rightbottom' && f_r2 > index) {\n                        f_r2 += value;\n                    }\n                } else {\n                    f_r1 += value;\n                    f_r2 += value;\n                }\n                if (filter != null) {\n                    newFilterObj.filter = {};\n                    for (let k in filter) {\n                        let f_rowhidden = filter[k].rowhidden;\n                        let f_rowhidden_new = {};\n                        for (let n in f_rowhidden) {\n                            n = parseFloat(n);\n                            if (n < index) {\n                                f_rowhidden_new[n] = 0;\n                            } else if (n == index) {\n                                if (direction == 'lefttop') {\n                                    f_rowhidden_new[n + value] = 0;\n                                } else if (direction == 'rightbottom') {\n                                    f_rowhidden_new[n] = 0;\n                                }\n                            } else {\n                                f_rowhidden_new[n + value] = 0;\n                            }\n                        }\n                        newFilterObj.filter[k] = $.extend(true, {}, filter[k]);\n                        newFilterObj.filter[k].rowhidden = f_rowhidden_new;\n                        newFilterObj.filter[k].str = f_r1;\n                        newFilterObj.filter[k].edr = f_r2;\n                    }\n                }\n            } else if (type == 'column') {\n                if (f_c1 < index) {\n                    if (f_c2 == index && direction == 'lefttop') {\n                        f_c2 += value;\n                    } else if (f_c2 > index) {\n                        f_c2 += value;\n                    }\n                } else if (f_c1 == index) {\n                    if (direction == 'lefttop') {\n                        f_c1 += value;\n                        f_c2 += value;\n                    } else if (direction == 'rightbottom' && f_c2 > index) {\n                        f_c2 += value;\n                    }\n                } else {\n                    f_c1 += value;\n                    f_c2 += value;\n                }\n                if (filter != null) {\n                    newFilterObj.filter = {};\n                    for (let k in filter) {\n                        let f_cindex = filter[k].cindex;\n                        if (f_cindex == index && direction == 'lefttop') {\n                            f_cindex += value;\n                        } else if (f_cindex > index) {\n                            f_cindex += value;\n                        }\n                        newFilterObj.filter[f_cindex - f_c1] = $.extend(true, {}, filter[k]);\n                        newFilterObj.filter[f_cindex - f_c1].cindex = f_cindex;\n                        newFilterObj.filter[f_cindex - f_c1].stc = f_c1;\n                        newFilterObj.filter[f_cindex - f_c1].edc = f_c2;\n                    }\n                }\n            }\n            newFilterObj.filter_select = {\n                'row': [\n                    f_r1,\n                    f_r2\n                ],\n                'column': [\n                    f_c1,\n                    f_c2\n                ]\n            };\n        }\n        if (newFilterObj != null && newFilterObj.filter != null) {\n            if (cfg['rowhidden'] == null) {\n                cfg['rowhidden'] = {};\n            }\n            for (let k in newFilterObj.filter) {\n                let f_rowhidden = newFilterObj.filter[k].rowhidden;\n                for (let n in f_rowhidden) {\n                    cfg['rowhidden'][n] = 0;\n                }\n            }\n        }    //条件格式配置变动\n        //条件格式配置变动\n        let CFarr = file.luckysheet_conditionformat_save;\n        let newCFarr = [];\n        if (CFarr != null && CFarr.length > 0) {\n            for (let i = 0; i < CFarr.length; i++) {\n                let cf_range = CFarr[i].cellrange;\n                let cf_new_range = [];\n                for (let j = 0; j < cf_range.length; j++) {\n                    let CFr1 = cf_range[j].row[0], CFr2 = cf_range[j].row[1], CFc1 = cf_range[j].column[0], CFc2 = cf_range[j].column[1];\n                    if (type == 'row') {\n                        if (CFr1 < index) {\n                            if (CFr2 == index && direction == 'lefttop') {\n                                CFr2 += value;\n                            } else if (CFr2 > index) {\n                                CFr2 += value;\n                            }\n                        } else if (CFr1 == index) {\n                            if (direction == 'lefttop') {\n                                CFr1 += value;\n                                CFr2 += value;\n                            } else if (direction == 'rightbottom' && CFr2 > index) {\n                                CFr2 += value;\n                            }\n                        } else {\n                            CFr1 += value;\n                            CFr2 += value;\n                        }\n                    } else if (type == 'column') {\n                        if (CFc1 < index) {\n                            if (CFc2 == index && direction == 'lefttop') {\n                                CFc2 += value;\n                            } else if (CFc2 > index) {\n                                CFc2 += value;\n                            }\n                        } else if (CFc1 == index) {\n                            if (direction == 'lefttop') {\n                                CFc1 += value;\n                                CFc2 += value;\n                            } else if (direction == 'rightbottom' && CFc2 > index) {\n                                CFc2 += value;\n                            }\n                        } else {\n                            CFc1 += value;\n                            CFc2 += value;\n                        }\n                    }\n                    cf_new_range.push({\n                        'row': [\n                            CFr1,\n                            CFr2\n                        ],\n                        'column': [\n                            CFc1,\n                            CFc2\n                        ]\n                    });\n                }\n                let cf = $.extend(true, {}, CFarr[i]);\n                cf.cellrange = cf_new_range;\n                newCFarr.push(cf);\n            }\n        }    //交替颜色配置变动\n        //交替颜色配置变动\n        let AFarr = file.luckysheet_alternateformat_save;\n        let newAFarr = [];\n        if (AFarr != null && AFarr.length > 0) {\n            for (let i = 0; i < AFarr.length; i++) {\n                let AFr1 = AFarr[i].cellrange.row[0], AFr2 = AFarr[i].cellrange.row[1], AFc1 = AFarr[i].cellrange.column[0], AFc2 = AFarr[i].cellrange.column[1];\n                let af = $.extend(true, {}, AFarr[i]);\n                if (type == 'row') {\n                    if (AFr1 < index) {\n                        if (AFr2 == index && direction == 'lefttop') {\n                            AFr2 += value;\n                        } else if (AFr2 > index) {\n                            AFr2 += value;\n                        }\n                    } else if (AFr1 == index) {\n                        if (direction == 'lefttop') {\n                            AFr1 += value;\n                            AFr2 += value;\n                        } else if (direction == 'rightbottom' && AFr2 > index) {\n                            AFr2 += value;\n                        }\n                    } else {\n                        AFr1 += value;\n                        AFr2 += value;\n                    }\n                } else if (type == 'column') {\n                    if (AFc1 < index) {\n                        if (AFc2 == index && direction == 'lefttop') {\n                            AFc2 += value;\n                        } else if (AFc2 > index) {\n                            AFc2 += value;\n                        }\n                    } else if (AFc1 == index) {\n                        if (direction == 'lefttop') {\n                            AFc1 += value;\n                            AFc2 += value;\n                        } else if (direction == 'rightbottom' && AFc2 > index) {\n                            AFc2 += value;\n                        }\n                    } else {\n                        AFc1 += value;\n                        AFc2 += value;\n                    }\n                }\n                af.cellrange = {\n                    'row': [\n                        AFr1,\n                        AFr2\n                    ],\n                    'column': [\n                        AFc1,\n                        AFc2\n                    ]\n                };\n                newAFarr.push(af);\n            }\n        }    //冻结配置变动\n        //冻结配置变动\n        let newFreezen = {\n            'freezenhorizontaldata': null,\n            'freezenverticaldata': null\n        };\n        if (luckysheetFreezen.freezenhorizontaldata != null && type == 'row') {\n            let freezen_scrollTop = luckysheetFreezen.freezenhorizontaldata[2];\n            let freezen_row_st = luckysheetFreezen.freezenhorizontaldata[1] - 1;\n            if (freezen_row_st == index && direction == 'lefttop') {\n                freezen_row_st += value;\n            } else if (freezen_row_st > index) {\n                freezen_row_st += value;\n            }\n            let freezen_top = Store.visibledatarow[freezen_row_st] - 2 - freezen_scrollTop + Store.columnHeaderHeight;\n            newFreezen.freezenhorizontaldata = [\n                Store.visibledatarow[freezen_row_st],\n                freezen_row_st + 1,\n                freezen_scrollTop,\n                luckysheetFreezen.cutVolumn(Store.visibledatarow, freezen_row_st + 1),\n                freezen_top\n            ];\n        } else {\n            newFreezen.freezenhorizontaldata = luckysheetFreezen.freezenhorizontaldata;\n        }\n        if (luckysheetFreezen.freezenverticaldata != null && type == 'column') {\n            let freezen_scrollLeft = luckysheetFreezen.freezenverticaldata[2];\n            let freezen_col_st = luckysheetFreezen.freezenverticaldata[1] - 1;\n            if (freezen_col_st == index && direction == 'lefttop') {\n                freezen_col_st += value;\n            } else if (freezen_col_st > index) {\n                freezen_col_st += value;\n            }\n            let freezen_left = Store.visibledatacolumn[freezen_col_st] - 2 - freezen_scrollLeft + Store.rowHeaderWidth;\n            newFreezen.freezenverticaldata = [\n                Store.visibledatacolumn[freezen_col_st],\n                freezen_col_st + 1,\n                freezen_scrollLeft,\n                luckysheetFreezen.cutVolumn(Store.visibledatacolumn, freezen_col_st + 1),\n                freezen_left\n            ];\n        } else {\n            newFreezen.freezenverticaldata = luckysheetFreezen.freezenverticaldata;\n        }    //数据验证配置变动\n        //数据验证配置变动\n        let dataVerification = file.dataVerification;\n        let newDataVerification = {};\n        if (dataVerification != null) {\n            for (let key in dataVerification) {\n                let r = Number(key.split('_')[0]), c = Number(key.split('_')[1]);\n                let item = dataVerification[key];\n                if (type == 'row') {\n                    if (index < r) {\n                        newDataVerification[r + value + '_' + c] = item;\n                    } else if (index == r) {\n                        if (direction == 'lefttop') {\n                            newDataVerification[r + value + '_' + c] = item;\n                            for (let i = 0; i < value; i++) {\n                                newDataVerification[r + i + '_' + c] = item;\n                            }\n                        } else {\n                            newDataVerification[r + '_' + c] = item;\n                            for (let i = 0; i < value; i++) {\n                                newDataVerification[r + i + 1 + '_' + c] = item;\n                            }\n                        }\n                    } else {\n                        newDataVerification[r + '_' + c] = item;\n                    }\n                } else if (type == 'column') {\n                    if (index < c) {\n                        newDataVerification[r + '_' + (c + value)] = item;\n                    } else if (index == c) {\n                        if (direction == 'lefttop') {\n                            newDataVerification[r + '_' + (c + value)] = item;\n                            for (let i = 0; i < value; i++) {\n                                newDataVerification[r + '_' + (c + i)] = item;\n                            }\n                        } else {\n                            newDataVerification[r + '_' + c] = item;\n                            for (let i = 0; i < value; i++) {\n                                newDataVerification[r + '_' + (c + i + 1)] = item;\n                            }\n                        }\n                    } else {\n                        newDataVerification[r + '_' + c] = item;\n                    }\n                }\n            }\n        }    //超链接配置变动\n        //超链接配置变动\n        let hyperlink = file.hyperlink;\n        let newHyperlink = {};\n        if (hyperlink != null) {\n            for (let key in hyperlink) {\n                let r = Number(key.split('_')[0]), c = Number(key.split('_')[1]);\n                let item = hyperlink[key];\n                if (type == 'row') {\n                    if (index < r) {\n                        newHyperlink[r + value + '_' + c] = item;\n                    } else if (index == r) {\n                        if (direction == 'lefttop') {\n                            newHyperlink[r + value + '_' + c] = item;\n                        } else {\n                            newHyperlink[r + '_' + c] = item;\n                        }\n                    } else {\n                        newHyperlink[r + '_' + c] = item;\n                    }\n                } else if (type == 'column') {\n                    if (index < c) {\n                        newHyperlink[r + '_' + (c + value)] = item;\n                    } else if (index == c) {\n                        if (direction == 'lefttop') {\n                            newHyperlink[r + '_' + (c + value)] = item;\n                        } else {\n                            newHyperlink[r + '_' + c] = item;\n                        }\n                    } else {\n                        newHyperlink[r + '_' + c] = item;\n                    }\n                }\n            }\n        }\n        let type1;\n        if (type == 'row') {\n            type1 = 'r';    //行高配置变动\n            //行高配置变动\n            if (cfg['rowlen'] != null) {\n                let rowlen_new = {};\n                for (let r in cfg['rowlen']) {\n                    r = parseFloat(r);\n                    if (r < index) {\n                        rowlen_new[r] = cfg['rowlen'][r];\n                    } else if (r == index) {\n                        if (direction == 'lefttop') {\n                            rowlen_new[r + value] = cfg['rowlen'][r];\n                        } else if (direction == 'rightbottom') {\n                            rowlen_new[r] = cfg['rowlen'][r];\n                        }\n                    } else {\n                        rowlen_new[r + value] = cfg['rowlen'][r];\n                    }\n                }\n                cfg['rowlen'] = rowlen_new;\n            }    //隐藏行配置变动\n            //隐藏行配置变动\n            if (cfg['rowhidden'] != null) {\n                let rowhidden_new = {};\n                for (let r in cfg['rowhidden']) {\n                    r = parseFloat(r);\n                    if (r < index) {\n                        rowhidden_new[r] = cfg['rowhidden'][r];\n                    } else if (r == index) {\n                        if (direction == 'lefttop') {\n                            rowhidden_new[r + value] = cfg['rowhidden'][r];\n                        } else if (direction == 'rightbottom') {\n                            rowhidden_new[r] = cfg['rowhidden'][r];\n                        }\n                    } else {\n                        rowhidden_new[r + value] = cfg['rowhidden'][r];\n                    }\n                }\n                cfg['rowhidden'] = rowhidden_new;\n            }    //空行模板\n            //空行模板\n            let row = [];\n            for (let c = 0; c < d[0].length; c++) {\n                row.push(null);\n            }    //边框\n            //边框\n            if (cfg['borderInfo'] && cfg['borderInfo'].length > 0) {\n                let borderInfo = [];\n                for (let i = 0; i < cfg['borderInfo'].length; i++) {\n                    let rangeType = cfg['borderInfo'][i].rangeType;\n                    if (rangeType == 'range') {\n                        let borderRange = cfg['borderInfo'][i].range;\n                        let emptyRange = [];\n                        for (let j = 0; j < borderRange.length; j++) {\n                            let bd_r1 = borderRange[j].row[0], bd_r2 = borderRange[j].row[1];\n                            if (direction == 'lefttop') {\n                                if (index <= bd_r1) {\n                                    bd_r1 += value;\n                                    bd_r2 += value;\n                                } else if (index <= bd_r2) {\n                                    bd_r2 += value;\n                                }\n                            } else {\n                                if (index < bd_r1) {\n                                    bd_r1 += value;\n                                    bd_r2 += value;\n                                } else if (index < bd_r2) {\n                                    bd_r2 += value;\n                                }\n                            }\n                            if (bd_r2 >= bd_r1) {\n                                emptyRange.push({\n                                    'row': [\n                                        bd_r1,\n                                        bd_r2\n                                    ],\n                                    'column': borderRange[j].column\n                                });\n                            }\n                        }\n                        if (emptyRange.length > 0) {\n                            let bd_obj = {\n                                'rangeType': 'range',\n                                'borderType': cfg['borderInfo'][i].borderType,\n                                'style': cfg['borderInfo'][i].style,\n                                'color': cfg['borderInfo'][i].color,\n                                'range': emptyRange\n                            };\n                            borderInfo.push(bd_obj);\n                        }\n                    } else if (rangeType == 'cell') {\n                        let row_index = cfg['borderInfo'][i].value.row_index;\n                        if (direction == 'lefttop') {\n                            if (index <= row_index) {\n                                row_index += value;\n                            }\n                        } else {\n                            if (index < row_index) {\n                                row_index += value;\n                            }\n                        }\n                        cfg['borderInfo'][i].value.row_index = row_index;\n                        borderInfo.push(cfg['borderInfo'][i]);\n                    }\n                }\n                cfg['borderInfo'] = borderInfo;\n            }\n            let arr = [];\n            for (let r = 0; r < value; r++) {\n                arr.push(JSON.stringify(row));\n            }\n            if (direction == 'lefttop') {\n                if (index == 0) {\n                    new Function('d', 'return ' + 'd.unshift(' + arr.join(',') + ')')(d);\n                } else {\n                    new Function('d', 'return ' + 'd.splice(' + index + ', 0, ' + arr.join(',') + ')')(d);\n                }\n            } else {\n                new Function('d', 'return ' + 'd.splice(' + (index + 1) + ', 0, ' + arr.join(',') + ')')(d);\n            }\n        } else {\n            type1 = 'c';    //行高配置变动\n            //行高配置变动\n            if (cfg['columnlen'] != null) {\n                let columnlen_new = {};\n                for (let c in cfg['columnlen']) {\n                    c = parseFloat(c);\n                    if (c < index) {\n                        columnlen_new[c] = cfg['columnlen'][c];\n                    } else if (c == index) {\n                        if (direction == 'lefttop') {\n                            columnlen_new[c + value] = cfg['columnlen'][c];\n                        } else if (direction == 'rightbottom') {\n                            columnlen_new[c] = cfg['columnlen'][c];\n                        }\n                    } else {\n                        columnlen_new[c + value] = cfg['columnlen'][c];\n                    }\n                }\n                cfg['columnlen'] = columnlen_new;\n            }    //隐藏列配置变动\n            //隐藏列配置变动\n            if (cfg['colhidden'] != null) {\n                let colhidden_new = {};\n                for (let c in cfg['colhidden']) {\n                    c = parseFloat(c);\n                    if (c < index) {\n                        colhidden_new[c] = cfg['colhidden'][c];\n                    } else if (c == index) {\n                        if (direction == 'lefttop') {\n                            colhidden_new[c + value] = cfg['colhidden'][c];\n                        } else if (direction == 'rightbottom') {\n                            colhidden_new[c] = cfg['colhidden'][c];\n                        }\n                    } else {\n                        colhidden_new[c + value] = cfg['colhidden'][c];\n                    }\n                }\n                cfg['colhidden'] = colhidden_new;\n            }    //空列模板\n            //空列模板\n            let col = [];\n            for (let r = 0; r < d.length; r++) {\n                col.push(null);\n            }    //边框\n            //边框\n            if (cfg['borderInfo'] && cfg['borderInfo'].length > 0) {\n                let borderInfo = [];\n                for (let i = 0; i < cfg['borderInfo'].length; i++) {\n                    let rangeType = cfg['borderInfo'][i].rangeType;\n                    if (rangeType == 'range') {\n                        let borderRange = cfg['borderInfo'][i].range;\n                        let emptyRange = [];\n                        for (let j = 0; j < borderRange.length; j++) {\n                            let bd_c1 = borderRange[j].column[0], bd_c2 = borderRange[j].column[1];\n                            if (direction == 'lefttop') {\n                                if (index <= bd_c1) {\n                                    bd_c1 += value;\n                                    bd_c2 += value;\n                                } else if (index <= bd_c2) {\n                                    bd_c2 += value;\n                                }\n                            } else {\n                                if (index < bd_c1) {\n                                    bd_c1 += value;\n                                    bd_c2 += value;\n                                } else if (index < bd_c2) {\n                                    bd_c2 += value;\n                                }\n                            }\n                            if (bd_c2 >= bd_c1) {\n                                emptyRange.push({\n                                    'row': borderRange[j].row,\n                                    'column': [\n                                        bd_c1,\n                                        bd_c2\n                                    ]\n                                });\n                            }\n                        }\n                        if (emptyRange.length > 0) {\n                            let bd_obj = {\n                                'rangeType': 'range',\n                                'borderType': cfg['borderInfo'][i].borderType,\n                                'style': cfg['borderInfo'][i].style,\n                                'color': cfg['borderInfo'][i].color,\n                                'range': emptyRange\n                            };\n                            borderInfo.push(bd_obj);\n                        }\n                    } else if (rangeType == 'cell') {\n                        let col_index = cfg['borderInfo'][i].value.col_index;\n                        if (direction == 'lefttop') {\n                            if (index <= col_index) {\n                                col_index += value;\n                            }\n                        } else {\n                            if (index < col_index) {\n                                col_index += value;\n                            }\n                        }\n                        cfg['borderInfo'][i].value.col_index = col_index;\n                        borderInfo.push(cfg['borderInfo'][i]);\n                    }\n                }\n                cfg['borderInfo'] = borderInfo;\n            }\n            for (let r = 0; r < d.length; r++) {\n                let row = d[r];\n                for (let i = 0; i < value; i++) {\n                    if (direction == 'lefttop') {\n                        if (index == 0) {\n                            row.unshift(col[r]);\n                        } else {\n                            row.splice(index, 0, col[r]);\n                        }\n                    } else {\n                        row.splice(index + 1, 0, col[r]);\n                    }\n                }\n            }\n        }    // 修改当前sheet页时刷新\n        // 修改当前sheet页时刷新\n        if (file.index == Store.currentSheetIndex) {\n            jfrefreshgrid_adRC(d, cfg, 'addRC', {\n                'index': index,\n                'len': value,\n                'direction': direction,\n                'rc': type1,\n                'restore': false\n            }, newCalcChain, newFilterObj, newCFarr, newAFarr, newFreezen, newDataVerification, newHyperlink);\n        } else {\n            file.data = d;\n            file.config = cfg;\n            file.calcChain = newCalcChain;\n            file.filter = newFilterObj.filter;\n            file.filter_select = newFilterObj.filter_select;\n            file.luckysheet_conditionformat_save = newCFarr;\n            file.luckysheet_alternateformat_save = newAFarr;\n            file.dataVerification = newDataVerification;\n            file.hyperlink = newHyperlink;\n        }\n        let range = null;\n        if (type == 'row') {\n            if (direction == 'lefttop') {\n                range = [{\n                        'row': [\n                            index,\n                            index + value - 1\n                        ],\n                        'column': [\n                            0,\n                            d[0].length - 1\n                        ]\n                    }];\n            } else {\n                range = [{\n                        'row': [\n                            index + 1,\n                            index + value\n                        ],\n                        'column': [\n                            0,\n                            d[0].length - 1\n                        ]\n                    }];\n            }\n        } else {\n            if (direction == 'lefttop') {\n                range = [{\n                        'row': [\n                            0,\n                            d.length - 1\n                        ],\n                        'column': [\n                            index,\n                            index + value - 1\n                        ]\n                    }];\n            } else {\n                range = [{\n                        'row': [\n                            0,\n                            d.length - 1\n                        ],\n                        'column': [\n                            index + 1,\n                            index + value\n                        ]\n                    }];\n            }\n        }\n        file.luckysheet_select_save = range;\n        if (file.index == Store.currentSheetIndex) {\n            Store.luckysheet_select_save = range;\n            selectHightlightShow();\n        }\n        if (type == 'row') {\n            let scrollLeft = $('#luckysheet-cell-main').scrollLeft(), scrollTop = $('#luckysheet-cell-main').scrollTop();\n            let winH = $('#luckysheet-cell-main').height(), winW = $('#luckysheet-cell-main').width();\n            let row = Store.visibledatarow[range[0].row[1]], row_pre = range[0].row[0] - 1 == -1 ? 0 : Store.visibledatarow[range[0].row[0] - 1];\n            if (row - scrollTop - winH + 20 > 0) {\n                $('#luckysheet-scrollbar-y').scrollTop(row - winH + 20);\n            } else if (row_pre - scrollTop - 20 < 0) {\n                $('#luckysheet-scrollbar-y').scrollTop(row_pre - 20);\n            }\n            if (value > 30) {\n                $('#luckysheet-row-count-show').hide();\n                $('#luckysheet-column-count-show').hide();\n            }\n        }\n    }\n    function luckysheetextendData(rowlen, newData) {\n        let d = editor.deepCopyFlowData(Store.flowdata);\n        let cfg = $.extend(true, {}, Store.config);\n        if (cfg['merge'] == null) {\n            cfg['merge'] = {};\n        }\n        let collen = d[0].length;\n        let addNullData = datagridgrowth([], rowlen, collen);\n        d = d.concat(addNullData);\n        for (let i = 0; i < newData.length; i++) {\n            let r = newData[i].r, c = newData[i].c, v = newData[i].v;\n            setcellvalue(r, c, d, v);\n            if (v != null && v.mc != null && v.mc.rs != null) {\n                cfg['merge'][v.mc.r + '_' + v.mc.c] = $.extend(true, {}, v.mc);\n            }\n        }    //luckysheet.flowdata\n        //luckysheet.flowdata\n        Store.flowdata = d;\n        editor.webWorkerFlowDataCache(Store.flowdata);    //worker存数据\n        //worker存数据\n        Store.luckysheetfile[getSheetIndex(Store.currentSheetIndex)].data = d;    //config\n        //config\n        Store.config = cfg;\n        Store.luckysheetfile[getSheetIndex(Store.currentSheetIndex)].config = Store.config;    //行高、列宽刷新\n        //行高、列宽刷新\n        jfrefreshgrid_rhcw(Store.flowdata.length, Store.flowdata[0].length);\n    }    //删除行列\n    //删除行列\n    function luckysheetdeletetable(type, st, ed, sheetIndex) {\n        sheetIndex = sheetIndex || Store.currentSheetIndex;\n        if (type == 'row' && !checkProtectionAuthorityNormal(sheetIndex, 'deleteRows')) {\n            return;\n        } else if (type == 'column' && !checkProtectionAuthorityNormal(sheetIndex, 'deleteColumns')) {\n            return;\n        }\n        let curOrder = getSheetIndex(sheetIndex);\n        let file = Store.luckysheetfile[curOrder];\n        let d = $.extend(true, [], file.data);\n        if (st < 0) {\n            st = 0;\n        }\n        if (ed < 0) {\n            ed = 0;\n        }\n        if (type == 'row') {\n            if (st > d.length - 1) {\n                st = d.length - 1;\n            }\n            if (ed > d.length - 1) {\n                ed = d.length - 1;\n            }\n        } else {\n            if (st > d[0].length - 1) {\n                st = d[0].length - 1;\n            }\n            if (ed > d[0].length - 1) {\n                ed = d[0].length - 1;\n            }\n        }\n        if (st > ed) {\n            return;\n        }\n        let slen = ed - st + 1;\n        let cfg = $.extend(true, {}, file.config);    //合并单元格配置变动\n        //合并单元格配置变动\n        if (cfg['merge'] == null) {\n            cfg['merge'] = {};\n        }\n        let merge_new = {};\n        for (let m in cfg['merge']) {\n            let mc = cfg['merge'][m];\n            let r = mc.r, c = mc.c, rs = mc.rs, cs = mc.cs;\n            if (type == 'row') {\n                if (r < st) {\n                    if (r + rs - 1 < st) {\n                        merge_new[r + '_' + c] = {\n                            'r': r,\n                            'c': c,\n                            'rs': rs,\n                            'cs': cs\n                        };\n                    } else if (r + rs - 1 >= st && r + rs - 1 < ed) {\n                        merge_new[r + '_' + c] = {\n                            'r': r,\n                            'c': c,\n                            'rs': st - r,\n                            'cs': cs\n                        };\n                    } else if (r + rs - 1 >= ed) {\n                        merge_new[r + '_' + c] = {\n                            'r': r,\n                            'c': c,\n                            'rs': rs - slen,\n                            'cs': cs\n                        };\n                    }\n                } else if (r >= st && r <= ed) {\n                    if (r + rs - 1 > ed) {\n                        merge_new[st + '_' + c] = {\n                            'r': st,\n                            'c': c,\n                            'rs': r + rs - 1 - ed,\n                            'cs': cs\n                        };\n                    }\n                } else if (r > ed) {\n                    merge_new[r - slen + '_' + c] = {\n                        'r': r - slen,\n                        'c': c,\n                        'rs': rs,\n                        'cs': cs\n                    };\n                }\n            } else if (type == 'column') {\n                if (c < st) {\n                    if (c + cs - 1 < st) {\n                        merge_new[r + '_' + c] = {\n                            'r': r,\n                            'c': c,\n                            'rs': rs,\n                            'cs': cs\n                        };\n                    } else if (c + cs - 1 >= st && c + cs - 1 < ed) {\n                        merge_new[r + '_' + c] = {\n                            'r': r,\n                            'c': c,\n                            'rs': rs,\n                            'cs': st - c\n                        };\n                    } else if (c + cs - 1 >= ed) {\n                        merge_new[r + '_' + c] = {\n                            'r': r,\n                            'c': c,\n                            'rs': rs,\n                            'cs': cs - slen\n                        };\n                    }\n                } else if (c >= st && c <= ed) {\n                    if (c + cs - 1 > ed) {\n                        merge_new[r + '_' + st] = {\n                            'r': r,\n                            'c': st,\n                            'rs': rs,\n                            'cs': c + cs - 1 - ed\n                        };\n                    }\n                } else if (c > ed) {\n                    merge_new[r + '_' + (c - slen)] = {\n                        'r': r,\n                        'c': c - slen,\n                        'rs': rs,\n                        'cs': cs\n                    };\n                }\n            }\n        }\n        cfg['merge'] = merge_new;    //公式配置变动\n        //公式配置变动\n        let calcChain = file.calcChain;\n        let newCalcChain = [];\n        if (calcChain != null && calcChain.length > 0) {\n            for (let i = 0; i < calcChain.length; i++) {\n                let calc = $.extend(true, {}, calcChain[i]);\n                let calc_r = calc.r, calc_c = calc.c, calc_i = calc.index, calc_funcStr = getcellFormula(calc_r, calc_c, calc_i);\n                if (type == 'row') {\n                    if (calc_r < st || calc_r > ed) {\n                        let functionStr = '=' + formula.functionStrChange(calc_funcStr, 'del', 'row', null, st, slen);\n                        if (d[calc_r][calc_c] && d[calc_r][calc_c].f == calc_funcStr) {\n                            d[calc_r][calc_c].f = functionStr;\n                        }\n                        if (calc_r > ed) {\n                            calc.r = calc_r - slen;\n                        }\n                        newCalcChain.push(calc);\n                    }\n                } else if (type == 'column') {\n                    if (calc_c < st || calc_c > ed) {\n                        let functionStr = '=' + formula.functionStrChange(calc_funcStr, 'del', 'col', null, st, slen);\n                        if (d[calc_r][calc_c] && d[calc_r][calc_c].f == calc_funcStr) {\n                            d[calc_r][calc_c].f = functionStr;\n                        }\n                        if (calc_c > ed) {\n                            calc.c = calc_c - slen;\n                        }\n                        newCalcChain.push(calc);\n                    }\n                }\n            }\n        }    //筛选配置变动\n        //筛选配置变动\n        let filter_select = file.filter_select;\n        let filter = file.filter;\n        let newFilterObj = null;\n        if (filter_select != null && JSON.stringify(filter_select) != '{}') {\n            newFilterObj = {\n                'filter_select': null,\n                'filter': null\n            };\n            let f_r1 = filter_select.row[0], f_r2 = filter_select.row[1];\n            let f_c1 = filter_select.column[0], f_c2 = filter_select.column[1];\n            if (type == 'row') {\n                if (f_r1 > ed) {\n                    f_r1 -= slen;\n                    f_r2 -= slen;\n                    newFilterObj.filter_select = {\n                        'row': [\n                            f_r1,\n                            f_r2\n                        ],\n                        'column': [\n                            f_c1,\n                            f_c2\n                        ]\n                    };\n                } else if (f_r1 < st) {\n                    if (f_r2 < st) {\n                    } else if (f_r2 <= ed) {\n                        f_r2 = st - 1;\n                    } else {\n                        f_r2 -= slen;\n                    }\n                    newFilterObj.filter_select = {\n                        'row': [\n                            f_r1,\n                            f_r2\n                        ],\n                        'column': [\n                            f_c1,\n                            f_c2\n                        ]\n                    };\n                }\n                if (newFilterObj.filter_select != null && filter != null) {\n                    for (let k in filter) {\n                        let f_rowhidden = filter[k].rowhidden;\n                        let f_rowhidden_new = {};\n                        for (let n in f_rowhidden) {\n                            if (n < st) {\n                                f_rowhidden_new[n] = 0;\n                            } else if (n > ed) {\n                                f_rowhidden_new[n - slen] = 0;\n                            }\n                        }\n                        if (JSON.stringify(f_rowhidden_new) != '{}') {\n                            if (newFilterObj.filter == null) {\n                                newFilterObj.filter = {};\n                            }\n                            newFilterObj.filter[k] = $.extend(true, {}, filter[k]);\n                            newFilterObj.filter[k].rowhidden = f_rowhidden_new;\n                            newFilterObj.filter[k].str = f_r1;\n                            newFilterObj.filter[k].edr = f_r2;\n                        }\n                    }\n                }\n            } else if (type == 'column') {\n                if (f_c1 > ed) {\n                    f_c1 -= slen;\n                    f_c2 -= slen;\n                    newFilterObj.filter_select = {\n                        'row': [\n                            f_r1,\n                            f_r2\n                        ],\n                        'column': [\n                            f_c1,\n                            f_c2\n                        ]\n                    };\n                } else if (f_c1 < st) {\n                    if (f_c2 < st) {\n                    } else if (f_c2 <= ed) {\n                        f_c2 = st - 1;\n                    } else {\n                        f_c2 -= slen;\n                    }\n                    newFilterObj.filter_select = {\n                        'row': [\n                            f_r1,\n                            f_r2\n                        ],\n                        'column': [\n                            f_c1,\n                            f_c2\n                        ]\n                    };\n                } else {\n                    if (f_c2 > ed) {\n                        f_c1 = st;\n                        f_c2 -= slen;\n                        newFilterObj.filter_select = {\n                            'row': [\n                                f_r1,\n                                f_r2\n                            ],\n                            'column': [\n                                f_c1,\n                                f_c2\n                            ]\n                        };\n                    }\n                }\n                if (newFilterObj.filter_select != null && filter != null) {\n                    for (let k in filter) {\n                        let f_cindex = filter[k].cindex;\n                        if (f_cindex < st) {\n                            if (newFilterObj.filter == null) {\n                                newFilterObj.filter = {};\n                            }\n                            newFilterObj.filter[f_cindex - f_c1] = $.extend(true, {}, filter[k]);\n                            newFilterObj.filter[f_cindex - f_c1].edc = f_c2;\n                        } else if (f_cindex > ed) {\n                            f_cindex -= slen;\n                            if (newFilterObj.filter == null) {\n                                newFilterObj.filter = {};\n                            }\n                            newFilterObj.filter[f_cindex - f_c1] = $.extend(true, {}, filter[k]);\n                            newFilterObj.filter[f_cindex - f_c1].cindex = f_cindex;\n                            newFilterObj.filter[f_cindex - f_c1].stc = f_c1;\n                            newFilterObj.filter[f_cindex - f_c1].edc = f_c2;\n                        }\n                    }\n                }\n            }\n        }\n        if (newFilterObj != null && newFilterObj.filter != null) {\n            if (cfg['rowhidden'] == null) {\n                cfg['rowhidden'] = {};\n            }\n            for (let k in newFilterObj.filter) {\n                let f_rowhidden = newFilterObj.filter[k].rowhidden;\n                for (let n in f_rowhidden) {\n                    cfg['rowhidden'][n] = 0;\n                }\n            }\n        }    //条件格式配置变动\n        //条件格式配置变动\n        let CFarr = file.luckysheet_conditionformat_save;\n        let newCFarr = [];\n        if (CFarr != null && CFarr.length > 0) {\n            for (let i = 0; i < CFarr.length; i++) {\n                let cf_range = CFarr[i].cellrange;\n                let cf_new_range = [];\n                for (let j = 0; j < cf_range.length; j++) {\n                    let CFr1 = cf_range[j].row[0], CFr2 = cf_range[j].row[1], CFc1 = cf_range[j].column[0], CFc2 = cf_range[j].column[1];\n                    if (type == 'row') {\n                        if (!(CFr1 >= st && CFr2 <= ed)) {\n                            if (CFr1 > ed) {\n                                CFr1 -= slen;\n                                CFr2 -= slen;\n                            } else if (CFr1 < st) {\n                                if (CFr2 < st) {\n                                } else if (CFr2 <= ed) {\n                                    CFr2 = st - 1;\n                                } else {\n                                    CFr2 -= slen;\n                                }\n                            } else {\n                                if (CFr2 > ed) {\n                                    CFr1 = st;\n                                    CFr2 -= slen;\n                                }\n                            }\n                            cf_new_range.push({\n                                'row': [\n                                    CFr1,\n                                    CFr2\n                                ],\n                                'column': [\n                                    CFc1,\n                                    CFc2\n                                ]\n                            });\n                        }\n                    } else if (type == 'column') {\n                        if (!(CFc1 >= st && CFc2 <= ed)) {\n                            if (CFc1 > ed) {\n                                CFc1 -= slen;\n                                CFc2 -= slen;\n                            } else if (CFc1 < st) {\n                                if (CFc2 < st) {\n                                } else if (CFc2 <= ed) {\n                                    CFc2 = st - 1;\n                                } else {\n                                    CFc2 -= slen;\n                                }\n                            } else {\n                                if (CFc2 > ed) {\n                                    CFc1 = st;\n                                    CFc2 -= slen;\n                                }\n                            }\n                            cf_new_range.push({\n                                'row': [\n                                    CFr1,\n                                    CFr2\n                                ],\n                                'column': [\n                                    CFc1,\n                                    CFc2\n                                ]\n                            });\n                        }\n                    }\n                }\n                if (cf_new_range.length > 0) {\n                    let cf = $.extend(true, {}, CFarr[i]);\n                    cf.cellrange = cf_new_range;\n                    newCFarr.push(cf);\n                }\n            }\n        }    //交替颜色配置变动\n        //交替颜色配置变动\n        let AFarr = file.luckysheet_alternateformat_save;\n        let newAFarr = [];\n        if (AFarr != null && AFarr.length > 0) {\n            for (let i = 0; i < AFarr.length; i++) {\n                let AFr1 = AFarr[i].cellrange.row[0], AFr2 = AFarr[i].cellrange.row[1], AFc1 = AFarr[i].cellrange.column[0], AFc2 = AFarr[i].cellrange.column[1];\n                if (type == 'row') {\n                    if (!(AFr1 >= st && AFr2 <= ed)) {\n                        let af = $.extend(true, {}, AFarr[i]);\n                        if (AFr1 > ed) {\n                            AFr1 -= slen;\n                            AFr2 -= slen;\n                        } else if (AFr1 < st) {\n                            if (AFr2 < st) {\n                            } else if (AFr2 <= ed) {\n                                AFr2 = st - 1;\n                            } else {\n                                AFr2 -= slen;\n                            }\n                        } else {\n                            if (AFr2 > ed) {\n                                AFr1 = st;\n                                AFr2 -= slen;\n                            }\n                        }\n                        af.cellrange = {\n                            'row': [\n                                AFr1,\n                                AFr2\n                            ],\n                            'column': [\n                                AFc1,\n                                AFc2\n                            ]\n                        };\n                        newAFarr.push(af);\n                    }\n                } else if (type == 'column') {\n                    if (!(AFc1 >= st && AFc2 <= ed)) {\n                        let af = $.extend(true, {}, AFarr[i]);\n                        if (AFc1 > ed) {\n                            AFc1 -= slen;\n                            AFc2 -= slen;\n                        } else if (AFc1 < st) {\n                            if (AFc2 < st) {\n                            } else if (AFc2 <= ed) {\n                                AFc2 = st - 1;\n                            } else {\n                                AFc2 -= slen;\n                            }\n                        } else {\n                            if (AFc2 > ed) {\n                                AFc1 = st;\n                                AFc2 -= slen;\n                            }\n                        }\n                        af.cellrange = {\n                            'row': [\n                                AFr1,\n                                AFr2\n                            ],\n                            'column': [\n                                AFc1,\n                                AFc2\n                            ]\n                        };\n                        newAFarr.push(af);\n                    }\n                }\n            }\n        }    //冻结配置变动\n        //冻结配置变动\n        let newFreezen = {\n            'freezenhorizontaldata': null,\n            'freezenverticaldata': null\n        };\n        if (luckysheetFreezen.freezenhorizontaldata != null && type == 'row') {\n            let freezen_scrollTop = luckysheetFreezen.freezenhorizontaldata[2];\n            let freezen_st = luckysheet_searcharray(Store.visibledatarow, freezen_scrollTop);\n            if (freezen_st == -1) {\n                freezen_st = 0;\n            }\n            let freezen_row_st = luckysheetFreezen.freezenhorizontaldata[1] - 1;\n            if (freezen_row_st >= st) {\n                if (freezen_row_st < ed) {\n                    freezen_row_st = st - 1;\n                } else {\n                    freezen_row_st -= slen;\n                }\n            }\n            if (freezen_row_st < freezen_st) {\n                freezen_row_st = freezen_st;\n            }\n            let freezen_top = Store.visibledatarow[freezen_row_st] - 2 - freezen_scrollTop + Store.columnHeaderHeight;\n            newFreezen.freezenhorizontaldata = [\n                Store.visibledatarow[freezen_row_st],\n                freezen_row_st + 1,\n                freezen_scrollTop,\n                luckysheetFreezen.cutVolumn(Store.visibledatarow, freezen_row_st + 1),\n                freezen_top\n            ];\n        } else {\n            newFreezen.freezenhorizontaldata = luckysheetFreezen.freezenhorizontaldata;\n        }\n        if (luckysheetFreezen.freezenverticaldata != null && type == 'column') {\n            let freezen_scrollLeft = luckysheetFreezen.freezenverticaldata[2];\n            let freezen_st2 = luckysheet_searcharray(Store.visibledatacolumn, freezen_scrollLeft);\n            if (freezen_st2 == -1) {\n                freezen_st2 = 0;\n            }\n            let freezen_col_st = luckysheetFreezen.freezenverticaldata[1] - 1;\n            if (freezen_col_st >= st) {\n                if (freezen_col_st < ed) {\n                    freezen_col_st = st - 1;\n                } else {\n                    freezen_col_st -= slen;\n                }\n            }\n            if (freezen_col_st < freezen_st2) {\n                freezen_col_st = freezen_st2;\n            }\n            let freezen_left = Store.visibledatacolumn[freezen_col_st] - 2 - freezen_scrollLeft + Store.rowHeaderWidth;\n            newFreezen.freezenverticaldata = [\n                Store.visibledatacolumn[freezen_col_st],\n                freezen_col_st + 1,\n                freezen_scrollLeft,\n                luckysheetFreezen.cutVolumn(Store.visibledatacolumn, freezen_col_st + 1),\n                freezen_left\n            ];\n        } else {\n            newFreezen.freezenverticaldata = luckysheetFreezen.freezenverticaldata;\n        }    //数据验证配置变动\n        //数据验证配置变动\n        let dataVerification = file.dataVerification;\n        let newDataVerification = {};\n        if (dataVerification != null) {\n            for (let key in dataVerification) {\n                let r = Number(key.split('_')[0]), c = Number(key.split('_')[1]);\n                let item = dataVerification[key];\n                if (type == 'row') {\n                    if (r < st) {\n                        newDataVerification[r + '_' + c] = item;\n                    } else if (r > ed) {\n                        newDataVerification[r - slen + '_' + c] = item;\n                    }\n                } else if (type == 'column') {\n                    if (c < st) {\n                        newDataVerification[r + '_' + c] = item;\n                    } else if (c > ed) {\n                        newDataVerification[r + '_' + (c - slen)] = item;\n                    }\n                }\n            }\n        }    //超链接配置变动\n        //超链接配置变动\n        let hyperlink = file.hyperlink;\n        let newHyperlink = {};\n        if (hyperlink != null) {\n            for (let key in hyperlink) {\n                let r = Number(key.split('_')[0]), c = Number(key.split('_')[1]);\n                let item = hyperlink[key];\n                if (type == 'row') {\n                    if (r < st) {\n                        newHyperlink[r + '_' + c] = item;\n                    } else if (r > ed) {\n                        newHyperlink[r - slen + '_' + c] = item;\n                    }\n                } else if (type == 'column') {\n                    if (c < st) {\n                        newHyperlink[r + '_' + c] = item;\n                    } else if (c > ed) {\n                        newHyperlink[r + '_' + (c - slen)] = item;\n                    }\n                }\n            }\n        }    //主逻辑\n        //主逻辑\n        let type1;\n        if (type == 'row') {\n            type1 = 'r';    //行高配置变动\n            //行高配置变动\n            if (cfg['rowlen'] == null) {\n                cfg['rowlen'] = {};\n            }\n            let rowlen_new = {};\n            for (let r in cfg['rowlen']) {\n                if (r < st) {\n                    rowlen_new[r] = cfg['rowlen'][r];\n                } else if (r > ed) {\n                    rowlen_new[r - slen] = cfg['rowlen'][r];\n                }\n            }\n            cfg['rowlen'] = rowlen_new;    //隐藏行配置变动\n            //隐藏行配置变动\n            if (cfg['rowhidden'] == null) {\n                cfg['rowhidden'] = {};\n            }\n            let rowhidden_new = {};\n            for (let r in cfg['rowhidden']) {\n                if (r < st) {\n                    rowhidden_new[r] = cfg['rowhidden'][r];\n                } else if (r > ed) {\n                    rowhidden_new[r - slen] = cfg['rowhidden'][r];\n                }\n            }\n            cfg['rowhidden'] = rowhidden_new;    //边框配置变动\n            //边框配置变动\n            if (cfg['borderInfo'] && cfg['borderInfo'].length > 0) {\n                let borderInfo = [];\n                for (let i = 0; i < cfg['borderInfo'].length; i++) {\n                    let rangeType = cfg['borderInfo'][i].rangeType;\n                    if (rangeType == 'range') {\n                        let borderRange = cfg['borderInfo'][i].range;\n                        let emptyRange = [];\n                        for (let j = 0; j < borderRange.length; j++) {\n                            let bd_r1 = borderRange[j].row[0], bd_r2 = borderRange[j].row[1];\n                            for (let r = st; r <= ed; r++) {\n                                if (r < borderRange[j].row[0]) {\n                                    bd_r1 -= 1;\n                                    bd_r2 -= 1;\n                                } else if (r <= borderRange[j].row[1]) {\n                                    bd_r2 -= 1;\n                                }\n                            }\n                            if (bd_r2 >= bd_r1) {\n                                emptyRange.push({\n                                    'row': [\n                                        bd_r1,\n                                        bd_r2\n                                    ],\n                                    'column': borderRange[j].column\n                                });\n                            }\n                        }\n                        if (emptyRange.length > 0) {\n                            let bd_obj = {\n                                'rangeType': 'range',\n                                'borderType': cfg['borderInfo'][i].borderType,\n                                'style': cfg['borderInfo'][i].style,\n                                'color': cfg['borderInfo'][i].color,\n                                'range': emptyRange\n                            };\n                            borderInfo.push(bd_obj);\n                        }\n                    } else if (rangeType == 'cell') {\n                        let row_index = cfg['borderInfo'][i].value.row_index;\n                        if (row_index < st) {\n                            borderInfo.push(cfg['borderInfo'][i]);\n                        } else if (row_index > ed) {\n                            cfg['borderInfo'][i].value.row_index = row_index - (ed - st + 1);\n                            borderInfo.push(cfg['borderInfo'][i]);\n                        }\n                    }\n                }\n                cfg['borderInfo'] = borderInfo;\n            }    // 备注：该处理方式会在删除多行的时候会存在bug\n                 // 说明：删除多行后，会把同一个row空数组(引用类型)添加成为data多行的数据源，导致设置这些行数据时产生错误。\n                 //空白行模板\n                 // let row = [];\n                 // for (let c = 0; c < d[0].length; c++) {\n                 //     row.push(null);\n                 // }\n                 // //删除选中行\n                 // d.splice(st, slen);\n                 // //删除多少行，增加多少行空白行                \n                 // for (let r = 0; r < slen; r++) {\n                 //     d.push(row);\n                 // }\n                 //删除选中行\n            // 备注：该处理方式会在删除多行的时候会存在bug\n            // 说明：删除多行后，会把同一个row空数组(引用类型)添加成为data多行的数据源，导致设置这些行数据时产生错误。\n            //空白行模板\n            // let row = [];\n            // for (let c = 0; c < d[0].length; c++) {\n            //     row.push(null);\n            // }\n            // //删除选中行\n            // d.splice(st, slen);\n            // //删除多少行，增加多少行空白行                \n            // for (let r = 0; r < slen; r++) {\n            //     d.push(row);\n            // }\n            //删除选中行\n            d.splice(st, slen);    //删除多少行，增加多少行空白行                \n            //删除多少行，增加多少行空白行                \n            for (let r = 0; r < slen; r++) {\n                let row = [];\n                for (let c = 0; c < d[0].length; c++) {\n                    row.push(null);\n                }\n                d.push(row);\n            }\n        } else {\n            type1 = 'c';    //列宽配置变动\n            //列宽配置变动\n            if (cfg['columnlen'] == null) {\n                cfg['columnlen'] = {};\n            }\n            let columnlen_new = {};\n            for (let c in cfg['columnlen']) {\n                if (c < st) {\n                    columnlen_new[c] = cfg['columnlen'][c];\n                } else if (c > ed) {\n                    columnlen_new[c - slen] = cfg['columnlen'][c];\n                }\n            }\n            cfg['columnlen'] = columnlen_new;    //隐藏列配置变动\n            //隐藏列配置变动\n            if (cfg['colhidden'] == null) {\n                cfg['colhidden'] = {};\n            }\n            let colhidden_new = {};\n            for (let c in cfg['colhidden']) {\n                if (c < st) {\n                    colhidden_new[c] = cfg['colhidden'][c];\n                } else if (c > ed) {\n                    colhidden_new[c - slen] = cfg['colhidden'][c];\n                }\n            }\n            cfg['colhidden'] = colhidden_new;    //边框配置变动\n            //边框配置变动\n            if (cfg['borderInfo'] && cfg['borderInfo'].length > 0) {\n                let borderInfo = [];\n                for (let i = 0; i < cfg['borderInfo'].length; i++) {\n                    let rangeType = cfg['borderInfo'][i].rangeType;\n                    if (rangeType == 'range') {\n                        let borderRange = cfg['borderInfo'][i].range;\n                        let emptyRange = [];\n                        for (let j = 0; j < borderRange.length; j++) {\n                            let bd_c1 = borderRange[j].column[0], bd_c2 = borderRange[j].column[1];\n                            for (let c = st; c <= ed; c++) {\n                                if (c < borderRange[j].column[0]) {\n                                    bd_c1 -= 1;\n                                    bd_c2 -= 1;\n                                } else if (c <= borderRange[j].column[1]) {\n                                    bd_c2 -= 1;\n                                }\n                            }\n                            if (bd_c2 >= bd_c1) {\n                                emptyRange.push({\n                                    'row': borderRange[j].row,\n                                    'column': [\n                                        bd_c1,\n                                        bd_c2\n                                    ]\n                                });\n                            }\n                        }\n                        if (emptyRange.length > 0) {\n                            let bd_obj = {\n                                'rangeType': 'range',\n                                'borderType': cfg['borderInfo'][i].borderType,\n                                'style': cfg['borderInfo'][i].style,\n                                'color': cfg['borderInfo'][i].color,\n                                'range': emptyRange\n                            };\n                            borderInfo.push(bd_obj);\n                        }\n                    } else if (rangeType == 'cell') {\n                        let col_index = cfg['borderInfo'][i].value.col_index;\n                        if (col_index < st) {\n                            borderInfo.push(cfg['borderInfo'][i]);\n                        } else if (col_index > ed) {\n                            cfg['borderInfo'][i].value.col_index = col_index - (ed - st + 1);\n                            borderInfo.push(cfg['borderInfo'][i]);\n                        }\n                    }\n                }\n                cfg['borderInfo'] = borderInfo;\n            }    //空白列模板\n            //空白列模板\n            let addcol = [];\n            for (let r = 0; r < slen; r++) {\n                addcol.push(null);\n            }\n            for (let r = 0; r < d.length; r++) {\n                let row = [].concat(d[r]);    //删除选中列\n                //删除选中列\n                row.splice(st, slen);\n                d[r] = row.concat(addcol);\n            }\n        }    // 修改当前sheet页时刷新\n        // 修改当前sheet页时刷新\n        if (file.index == Store.currentSheetIndex) {\n            jfrefreshgrid_adRC(d, cfg, 'delRC', {\n                'index': st,\n                'len': ed - st + 1,\n                'rc': type1\n            }, newCalcChain, newFilterObj, newCFarr, newAFarr, newFreezen, newDataVerification, newHyperlink);\n        } else {\n            file.data = d;\n            file.config = cfg;\n            file.calcChain = newCalcChain;\n            file.filter = newFilterObj.filter;\n            file.filter_select = newFilterObj.filter_select;\n            file.luckysheet_conditionformat_save = newCFarr;\n            file.luckysheet_alternateformat_save = newAFarr;\n            file.dataVerification = newDataVerification;\n            file.hyperlink = newHyperlink;\n        }\n    }    //删除单元格\n    //删除单元格\n    function luckysheetDeleteCell(type, str, edr, stc, edc, sheetIndex) {\n        sheetIndex = sheetIndex || Store.currentSheetIndex;\n        if (!checkProtectionNotEnable(sheetIndex)) {\n            return;\n        }\n        let curOrder = getSheetIndex(sheetIndex);\n        let file = Store.luckysheetfile[curOrder];\n        let d = $.extend(true, [], file.data);\n        let rlen = edr - str + 1;\n        let clen = edc - stc + 1;\n        let cfg = $.extend(true, {}, Store.config);    //合并单元格配置变动\n        //合并单元格配置变动\n        if (cfg['merge'] == null) {\n            cfg['merge'] = {};\n        }\n        let merge_new = {};\n        for (let m in cfg['merge']) {\n            let mc = cfg['merge'][m];\n            let r = mc.r, c = mc.c, rs = mc.rs, cs = mc.cs;\n            if (type == 'moveLeft') {\n                if (str > r + rs - 1 || edr < r || stc > c + cs - 1) {\n                    merge_new[r + '_' + c] = {\n                        'r': r,\n                        'c': c,\n                        'rs': rs,\n                        'cs': cs\n                    };\n                } else if (str <= r && edr >= r + rs - 1 && edc < c) {\n                    merge_new[r + '_' + (c - clen)] = {\n                        'r': r,\n                        'c': c - clen,\n                        'rs': rs,\n                        'cs': cs\n                    };\n                } else {\n                    for (let r_i = r; r_i <= r + rs - 1; r_i++) {\n                        for (let c_i = c; c_i <= c + cs - 1; c_i++) {\n                            delete d[r_i][c_i].mc;\n                        }\n                    }\n                }\n            } else if (type == 'moveUp') {\n                if (stc > c + cs - 1 || edc < c || str > r + rs - 1) {\n                    merge_new[r + '_' + c] = {\n                        'r': r,\n                        'c': c,\n                        'rs': rs,\n                        'cs': cs\n                    };\n                } else if (stc <= c && edc >= c + cs - 1 && edr < r) {\n                    merge_new[r - rlen + '_' + c] = {\n                        'r': r - rlen,\n                        'c': c,\n                        'rs': rs,\n                        'cs': cs\n                    };\n                } else {\n                    for (let r_i = r; r_i <= r + rs - 1; r_i++) {\n                        for (let c_i = c; c_i <= c + cs - 1; c_i++) {\n                            delete d[r_i][c_i].mc;\n                        }\n                    }\n                }\n            }\n        }\n        cfg['merge'] = merge_new;    //公式配置变动\n        //公式配置变动\n        let calcChain = file.calcChain;\n        let newCalcChain = [];\n        if (calcChain != null && calcChain.length > 0) {\n            for (let i = 0; i < calcChain.length; i++) {\n                let calc = $.extend(true, {}, calcChain[i]);\n                let calc_r = calc.r, calc_c = calc.c, calc_i = calc.index, calc_funcStr = getcellFormula(calc_r, calc_c, calc_i);\n                if (calc_r < str || calc_r > edr || calc_c < stc || calc_c > edc) {\n                    let functionStr;\n                    if (type == 'moveLeft') {\n                        functionStr = '=' + formula.functionStrChange(calc_funcStr, 'del', 'col', null, stc, clen);\n                        if (calc_c > edc && calc_r >= str && calc_r <= edr) {\n                            calc.c = calc_c - clen;\n                        }\n                    } else if (type == 'moveUp') {\n                        functionStr = '=' + formula.functionStrChange(calc_funcStr, 'del', 'row', null, str, rlen);\n                        if (calc_r > edr && calc_c >= stc && calc_c <= edc) {\n                            calc.r = calc_r - rlen;\n                        }\n                    }\n                    if (d[calc_r][calc_c] && d[calc_r][calc_c].f == calc_funcStr) {\n                        d[calc_r][calc_c].f = functionStr;\n                    }\n                    newCalcChain.push(calc);\n                }\n            }\n        }    //筛选配置变动\n        //筛选配置变动\n        let filter_select = file.filter_select;\n        let filter = file.filter;\n        let newFilterObj = null;\n        if (filter_select != null && JSON.stringify(filter_select) != '{}') {\n            newFilterObj = {\n                'filter_select': null,\n                'filter': null\n            };\n            let f_r1 = filter_select.row[0], f_r2 = filter_select.row[1];\n            let f_c1 = filter_select.column[0], f_c2 = filter_select.column[1];\n            if (type == 'moveUp') {\n                if (f_c1 >= stc && f_c2 <= edc) {\n                    if (f_r1 > edr) {\n                        newFilterObj.filter_select = {\n                            'row': [\n                                f_r1 - rlen,\n                                f_r2 - rlen\n                            ],\n                            'column': [\n                                f_c1,\n                                f_c2\n                            ]\n                        };\n                    } else if (f_r2 < str) {\n                        newFilterObj.filter_select = {\n                            'row': [\n                                f_r1,\n                                f_r2\n                            ],\n                            'column': [\n                                f_c1,\n                                f_c2\n                            ]\n                        };\n                    } else if (f_r1 < str) {\n                        if (f_r2 > edr) {\n                            newFilterObj.filter_select = {\n                                'row': [\n                                    f_r1,\n                                    f_r2 - rlen\n                                ],\n                                'column': [\n                                    f_c1,\n                                    f_c2\n                                ]\n                            };\n                        } else {\n                            newFilterObj.filter_select = {\n                                'row': [\n                                    f_r1,\n                                    str - 1\n                                ],\n                                'column': [\n                                    f_c1,\n                                    f_c2\n                                ]\n                            };\n                        }\n                    }\n                    if (newFilterObj.filter_select != null && filter != null) {\n                        for (let k in filter) {\n                            let f_rowhidden = filter[k].rowhidden;\n                            let f_rowhidden_new = {};\n                            for (let n in f_rowhidden) {\n                                if (n < str) {\n                                    f_rowhidden_new[n] = 0;\n                                } else if (n > edr) {\n                                    f_rowhidden_new[n - slen] = 0;\n                                }\n                            }\n                            if (newFilterObj.filter == null) {\n                                newFilterObj.filter = {};\n                            }\n                            newFilterObj.filter[k] = $.extend(true, {}, filter[k]);\n                            if (JSON.stringify(f_rowhidden_new) != '{}') {\n                                newFilterObj.filter[k].rowhidden = f_rowhidden_new;\n                            }\n                            newFilterObj.filter[k].str = newFilterObj.filter_select.row[0];\n                            newFilterObj.filter[k].edr = newFilterObj.filter_select.row[1];\n                        }\n                    }\n                } else if (f_r1 >= str && f_r2 <= edr) {\n                    if (f_c1 > edc) {\n                        newFilterObj.filter_select = {\n                            'row': [\n                                f_r1,\n                                f_r2\n                            ],\n                            'column': [\n                                f_c1,\n                                f_c2\n                            ]\n                        };\n                    } else if (f_c1 >= stc) {\n                        if (f_c2 > edc) {\n                            newFilterObj.filter_select = {\n                                'row': [\n                                    f_r1,\n                                    f_r2\n                                ],\n                                'column': [\n                                    stc,\n                                    f_c2 - clen\n                                ]\n                            };\n                        }\n                    } else {\n                        if (f_c2 < stc) {\n                            newFilterObj.filter_select = {\n                                'row': [\n                                    f_r1,\n                                    f_r2\n                                ],\n                                'column': [\n                                    f_c1,\n                                    f_c2\n                                ]\n                            };\n                        } else if (f_c2 <= edc) {\n                            newFilterObj.filter_select = {\n                                'row': [\n                                    f_r1,\n                                    f_r2\n                                ],\n                                'column': [\n                                    f_c1,\n                                    stc - 1\n                                ]\n                            };\n                        } else {\n                            newFilterObj.filter_select = {\n                                'row': [\n                                    f_r1,\n                                    f_r2\n                                ],\n                                'column': [\n                                    f_c1,\n                                    f_c2 - clen\n                                ]\n                            };\n                        }\n                    }\n                    if (newFilterObj.filter_select != null && filter != null) {\n                        for (let k in filter) {\n                            let f_stc = newFilterObj.filter_select.column[0];\n                            let f_edc = newFilterObj.filter_select.column[1];\n                            let f_cindex = filter[k].cindex;\n                            if (f_cindex < stc || f_cindex > edc) {\n                                if (newFilterObj.filter == null) {\n                                    newFilterObj.filter = {};\n                                }\n                                if (f_cindex > edc) {\n                                    f_cindex -= clen;\n                                }\n                                let k2 = f_cindex - f_stc;\n                                newFilterObj.filter[k2] = $.extend(true, {}, filter[k]);\n                                newFilterObj.filter[k2].cindex = f_cindex;\n                                newFilterObj.filter[k2].stc = f_stc;\n                                newFilterObj.filter[k2].edc = f_edc;\n                            }\n                        }\n                    }\n                } else {\n                    newFilterObj.filter_select = {\n                        'row': [\n                            f_r1,\n                            f_r2\n                        ],\n                        'column': [\n                            f_c1,\n                            f_c2\n                        ]\n                    };\n                    if (filter != null) {\n                        newFilterObj.filter = filter;\n                    }\n                }\n            } else if (type == 'moveLeft') {\n                if (f_r1 >= str && f_r2 <= edr) {\n                    if (f_c1 > edc) {\n                        newFilterObj.filter_select = {\n                            'row': [\n                                f_r1,\n                                f_r2\n                            ],\n                            'column': [\n                                f_c1 - clen,\n                                f_c2 - clen\n                            ]\n                        };\n                    } else if (f_c2 < stc) {\n                        newFilterObj.filter_select = {\n                            'row': [\n                                f_r1,\n                                f_r2\n                            ],\n                            'column': [\n                                f_c1,\n                                f_c2\n                            ]\n                        };\n                    } else if (f_c1 < stc) {\n                        if (f_c2 > edc) {\n                            newFilterObj.filter_select = {\n                                'row': [\n                                    f_r1,\n                                    f_r2\n                                ],\n                                'column': [\n                                    f_c1,\n                                    f_c2 - clen\n                                ]\n                            };\n                        } else {\n                            newFilterObj.filter_select = {\n                                'row': [\n                                    f_r1,\n                                    f_r2\n                                ],\n                                'column': [\n                                    f_c1,\n                                    stc - 1\n                                ]\n                            };\n                        }\n                    }\n                    if (newFilterObj.filter_select != null && filter != null) {\n                        for (let k in filter) {\n                            let f_stc = newFilterObj.filter_select.column[0];\n                            let f_edc = newFilterObj.filter_select.column[1];\n                            let f_cindex = filter[k].cindex;\n                            if (f_cindex < stc || f_cindex > edc) {\n                                if (newFilterObj.filter == null) {\n                                    newFilterObj.filter = {};\n                                }\n                                if (f_cindex > edc) {\n                                    f_cindex -= clen;\n                                }\n                                let k2 = f_cindex - f_stc;\n                                newFilterObj.filter[k2] = $.extend(true, {}, filter[k]);\n                                newFilterObj.filter[k2].cindex = f_cindex;\n                                newFilterObj.filter[k2].stc = f_stc;\n                                newFilterObj.filter[k2].edc = f_edc;\n                            }\n                        }\n                    }\n                } else if (f_c1 >= stc && f_c2 <= edc) {\n                    if (f_r1 < str || f_r1 > edr) {\n                        newFilterObj.filter_select = {\n                            'row': [\n                                f_r1,\n                                f_r2\n                            ],\n                            'column': [\n                                f_c1,\n                                f_c2\n                            ]\n                        };\n                        if (filter != null) {\n                            newFilterObj.filter = filter;\n                        }\n                    }\n                } else {\n                    newFilterObj.filter_select = {\n                        'row': [\n                            f_r1,\n                            f_r2\n                        ],\n                        'column': [\n                            f_c1,\n                            f_c2\n                        ]\n                    };\n                    if (filter != null) {\n                        newFilterObj.filter = filter;\n                    }\n                }\n            }\n        }\n        if (newFilterObj != null && newFilterObj.filter != null) {\n            if (cfg['rowhidden'] == null) {\n                cfg['rowhidden'] = {};\n            }\n            for (let k in newFilterObj.filter) {\n                let f_rowhidden = newFilterObj.filter[k].rowhidden;\n                for (let n in f_rowhidden) {\n                    cfg['rowhidden'][n] = 0;\n                }\n            }\n        }    //条件格式配置变动\n        //条件格式配置变动\n        let CFarr = file.luckysheet_conditionformat_save;\n        let newCFarr = [];\n        if (CFarr != null && CFarr.length > 0) {\n            for (let i = 0; i < CFarr.length; i++) {\n                let cf_range = CFarr[i].cellrange;\n                let cf_new_range = [];\n                for (let j = 0; j < cf_range.length; j++) {\n                    let CFr1 = cf_range[j].row[0], CFr2 = cf_range[j].row[1], CFc1 = cf_range[j].column[0], CFc2 = cf_range[j].column[1];\n                    if (!(str <= CFr1 && edr >= CFr2 && stc <= CFc1 && edc >= CFc2)) {\n                        cf_new_range = getMoveRange(type, str, edr, stc, edc, CFr1, CFr2, CFc1, CFc2, rlen, clen);\n                    }\n                }\n                if (cf_new_range.length > 0) {\n                    let cf = $.extend(true, {}, CFarr[i]);\n                    cf.cellrange = cf_new_range;\n                    newCFarr.push(cf);\n                }\n            }\n        }    //数据验证配置变动\n        //数据验证配置变动\n        let dataVerification = file.dataVerification;\n        let newDataVerification = {};\n        if (dataVerification != null) {\n            for (let key in dataVerification) {\n                let r = Number(key.split('_')[0]), c = Number(key.split('_')[1]);\n                let item = dataVerification[key];\n                if (r < str || r > edr || c < stc || c > edc) {\n                    if (type == 'moveLeft') {\n                        if (c > edc && r >= str && r <= edr) {\n                            newDataVerification[r + '_' + (c - clen)] = item;\n                        } else {\n                            newDataVerification[r + '_' + c] = item;\n                        }\n                    } else if (type == 'moveUp') {\n                        if (r > edr && c >= stc && c <= edc) {\n                            newDataVerification[r - rlen + '_' + c] = item;\n                        } else {\n                            newDataVerification[r + '_' + c] = item;\n                        }\n                    }\n                }\n            }\n        }    //超链接配置变动\n        //超链接配置变动\n        let hyperlink = file.hyperlink;\n        let newHyperlink = {};\n        if (hyperlink != null) {\n            for (let key in hyperlink) {\n                let r = Number(key.split('_')[0]), c = Number(key.split('_')[1]);\n                let item = hyperlink[key];\n                if (r < str || r > edr || c < stc || c > edc) {\n                    if (type == 'moveLeft') {\n                        if (c > edc && r >= str && r <= edr) {\n                            newHyperlink[r + '_' + (c - clen)] = item;\n                        } else {\n                            newHyperlink[r + '_' + c] = item;\n                        }\n                    } else if (type == 'moveUp') {\n                        if (r > edr && c >= stc && c <= edc) {\n                            newHyperlink[r - rlen + '_' + c] = item;\n                        } else {\n                            newHyperlink[r + '_' + c] = item;\n                        }\n                    }\n                }\n            }\n        }    //边框配置变动\n        //边框配置变动\n        if (cfg['borderInfo'] && cfg['borderInfo'].length > 0) {\n            let borderInfo = [];\n            for (let i = 0; i < cfg['borderInfo'].length; i++) {\n                let rangeType = cfg['borderInfo'][i].rangeType;\n                if (rangeType == 'range') {\n                    let borderRange = cfg['borderInfo'][i].range;\n                    let emptyRange = [];\n                    for (let j = 0; j < borderRange.length; j++) {\n                        let bd_r1 = borderRange[j].row[0], bd_r2 = borderRange[j].row[1], bd_c1 = borderRange[j].column[0], bd_c2 = borderRange[j].column[1];\n                        if (!(str <= bd_r1 && edr >= bd_r2 && stc <= bd_c1 && edc >= bd_c2)) {\n                            emptyRange = getMoveRange(type, str, edr, stc, edc, bd_r1, bd_r2, bd_c1, bd_c2, rlen, clen);\n                        }\n                    }\n                    if (emptyRange.length > 0) {\n                        let bd_obj = {\n                            'rangeType': 'range',\n                            'borderType': cfg['borderInfo'][i].borderType,\n                            'style': cfg['borderInfo'][i].style,\n                            'color': cfg['borderInfo'][i].color,\n                            'range': emptyRange\n                        };\n                        borderInfo.push(bd_obj);\n                    }\n                } else if (rangeType == 'cell') {\n                    let row_index = cfg['borderInfo'][i].value.row_index;\n                    let col_index = cfg['borderInfo'][i].value.col_index;\n                    if (row_index < str || row_index > edr || col_index < stc || col_index > edc) {\n                        if (type == 'moveLeft') {\n                            if (col_index > edc && row_index >= str && row_index <= edr) {\n                                col_index -= clen;\n                                cfg['borderInfo'][i].value.col_index = col_index;\n                            }\n                        } else if (type == 'moveUp') {\n                            if (row_index > edr && col_index >= stc && col_index <= edc) {\n                                row_index -= rlen;\n                                cfg['borderInfo'][i].value.row_index = row_index;\n                            }\n                        }\n                        borderInfo.push(cfg['borderInfo'][i]);\n                    }\n                }\n            }\n            cfg['borderInfo'] = borderInfo;\n        }    //空白列模板\n        //空白列模板\n        let addcol = [];\n        for (let c = stc; c <= edc; c++) {\n            addcol.push(null);\n        }\n        if (type == 'moveUp') {\n            //上移\n            let data = [];\n            for (let r = str; r <= d.length - 1; r++) {\n                let row = [];\n                for (let c = stc; c <= edc; c++) {\n                    row.push(d[r][c]);\n                }\n                data.push(row);\n            }\n            data.splice(0, rlen);    //空白行模板\n            //空白行模板\n            let addrow = [];\n            for (let r = str; r <= edr; r++) {\n                addrow.push(addcol);\n            }\n            data = data.concat(addrow);\n            for (let r = str; r <= d.length - 1; r++) {\n                for (let c = stc; c <= edc; c++) {\n                    d[r][c] = data[r - str][c - stc];\n                }\n            }\n        } else if (type == 'moveLeft') {\n            //左移\n            for (let r = str; r <= edr; r++) {\n                d[r].splice(stc, clen);\n                d[r] = d[r].concat(addcol);\n            }\n        }\n        if (file.index == Store.currentSheetIndex) {\n            jfrefreshgrid_deleteCell(d, cfg, {\n                type: type,\n                'str': str,\n                'edr': edr,\n                'stc': stc,\n                'edc': edc\n            }, newCalcChain, newFilterObj, newCFarr, newDataVerification, newHyperlink);\n        } else {\n            file.data = d;\n            file.config = cfg;\n            file.calcChain = newCalcChain;\n            file.filter = newFilterObj.filter;\n            file.filter_select = newFilterObj.filter_select;\n            file.luckysheet_conditionformat_save = newCFarr;\n            file.dataVerification = newDataVerification;\n            file.hyperlink = newHyperlink;\n        }\n    }\n    function getMoveRange(type, str, edr, stc, edc, r1, r2, c1, c2, rlen, clen) {\n        let newRange = [];\n        if (type == 'moveLeft') {\n            if (str > r2 || edr < r1 || stc > c2) {\n                newRange.push({\n                    'row': [\n                        r1,\n                        r2\n                    ],\n                    'column': [\n                        c1,\n                        c2\n                    ]\n                });\n            } else if (edc < c1) {\n                if (str <= r1 && edr >= r2) {\n                    newRange.push({\n                        'row': [\n                            r1,\n                            r2\n                        ],\n                        'column': [\n                            c1 - clen,\n                            c2 - clen\n                        ]\n                    });\n                } else if (str > r1 && edr < r2) {\n                    let range = [\n                        {\n                            'row': [\n                                r1,\n                                str - 1\n                            ],\n                            'column': [\n                                c1,\n                                c2\n                            ]\n                        },\n                        {\n                            'row': [\n                                edr + 1,\n                                r2\n                            ],\n                            'column': [\n                                c1,\n                                c2\n                            ]\n                        },\n                        {\n                            'row': [\n                                str,\n                                edr\n                            ],\n                            'column': [\n                                c1 - clen,\n                                c2 - clen\n                            ]\n                        }\n                    ];\n                    newRange = newRange.concat(range);\n                } else if (str > r1) {\n                    let range = [\n                        {\n                            'row': [\n                                r1,\n                                str - 1\n                            ],\n                            'column': [\n                                c1,\n                                c2\n                            ]\n                        },\n                        {\n                            'row': [\n                                str,\n                                r2\n                            ],\n                            'column': [\n                                c1 - clen,\n                                c2 - clen\n                            ]\n                        }\n                    ];\n                    newRange = newRange.concat(range);\n                } else if (edr < r2) {\n                    let range = [\n                        {\n                            'row': [\n                                r1,\n                                edr\n                            ],\n                            'column': [\n                                c1 - clen,\n                                c2 - clen\n                            ]\n                        },\n                        {\n                            'row': [\n                                edr + 1,\n                                r2\n                            ],\n                            'column': [\n                                c1,\n                                c2\n                            ]\n                        }\n                    ];\n                    newRange = newRange.concat(range);\n                }\n            } else if (edc >= c1) {\n                if (stc <= c1 && edc >= c2) {\n                    if (str > r1 && edr < r2) {\n                        let range = [\n                            {\n                                'row': [\n                                    r1,\n                                    str - 1\n                                ],\n                                'column': [\n                                    c1,\n                                    c2\n                                ]\n                            },\n                            {\n                                'row': [\n                                    edr + 1,\n                                    r2\n                                ],\n                                'column': [\n                                    c1,\n                                    c2\n                                ]\n                            }\n                        ];\n                        newRange = newRange.concat(range);\n                    } else if (str > r1) {\n                        let range = [{\n                                'row': [\n                                    r1,\n                                    str - 1\n                                ],\n                                'column': [\n                                    c1,\n                                    c2\n                                ]\n                            }];\n                        newRange = newRange.concat(range);\n                    } else if (edr < r2) {\n                        let range = [{\n                                'row': [\n                                    edr + 1,\n                                    r2\n                                ],\n                                'column': [\n                                    c1,\n                                    c2\n                                ]\n                            }];\n                        newRange = newRange.concat(range);\n                    }\n                } else if (stc > c1 && edc < c2) {\n                    if (str <= r1 && edr >= r2) {\n                        newRange.push({\n                            'row': [\n                                r1,\n                                r2\n                            ],\n                            'column': [\n                                c1,\n                                c2 - clen\n                            ]\n                        });\n                    } else if (str > r1 && edr < r2) {\n                        let range = [\n                            {\n                                'row': [\n                                    r1,\n                                    str - 1\n                                ],\n                                'column': [\n                                    c1,\n                                    c2\n                                ]\n                            },\n                            {\n                                'row': [\n                                    edr + 1,\n                                    r2\n                                ],\n                                'column': [\n                                    c1,\n                                    c2\n                                ]\n                            },\n                            {\n                                'row': [\n                                    str,\n                                    edr\n                                ],\n                                'column': [\n                                    c1,\n                                    c2 - clen\n                                ]\n                            }\n                        ];\n                        newRange = newRange.concat(range);\n                    } else if (str > r1) {\n                        let range = [\n                            {\n                                'row': [\n                                    r1,\n                                    str - 1\n                                ],\n                                'column': [\n                                    c1,\n                                    c2\n                                ]\n                            },\n                            {\n                                'row': [\n                                    str,\n                                    r2\n                                ],\n                                'column': [\n                                    c1,\n                                    c2 - clen\n                                ]\n                            }\n                        ];\n                        newRange = newRange.concat(range);\n                    } else if (edr < r2) {\n                        let range = [\n                            {\n                                'row': [\n                                    r1,\n                                    edr\n                                ],\n                                'column': [\n                                    c1,\n                                    c2 - clen\n                                ]\n                            },\n                            {\n                                'row': [\n                                    edr + 1,\n                                    r2\n                                ],\n                                'column': [\n                                    c1,\n                                    c2\n                                ]\n                            }\n                        ];\n                        newRange = newRange.concat(range);\n                    }\n                } else if (stc > c1) {\n                    if (str <= r1 && edr >= r2) {\n                        newRange.push({\n                            'row': [\n                                r1,\n                                r2\n                            ],\n                            'column': [\n                                c1,\n                                stc - 1\n                            ]\n                        });\n                    } else if (str > r1 && edr < r2) {\n                        let range = [\n                            {\n                                'row': [\n                                    r1,\n                                    str - 1\n                                ],\n                                'column': [\n                                    c1,\n                                    c2\n                                ]\n                            },\n                            {\n                                'row': [\n                                    edr + 1,\n                                    r2\n                                ],\n                                'column': [\n                                    c1,\n                                    c2\n                                ]\n                            },\n                            {\n                                'row': [\n                                    str,\n                                    edr\n                                ],\n                                'column': [\n                                    c1,\n                                    stc - 1\n                                ]\n                            }\n                        ];\n                        newRange = newRange.concat(range);\n                    } else if (str > r1) {\n                        let range = [\n                            {\n                                'row': [\n                                    r1,\n                                    str - 1\n                                ],\n                                'column': [\n                                    c1,\n                                    c2\n                                ]\n                            },\n                            {\n                                'row': [\n                                    str,\n                                    r2\n                                ],\n                                'column': [\n                                    c1,\n                                    stc - 1\n                                ]\n                            }\n                        ];\n                        newRange = newRange.concat(range);\n                    } else if (edr < r2) {\n                        let range = [\n                            {\n                                'row': [\n                                    r1,\n                                    edr\n                                ],\n                                'column': [\n                                    c1,\n                                    stc - 1\n                                ]\n                            },\n                            {\n                                'row': [\n                                    edr + 1,\n                                    r2\n                                ],\n                                'column': [\n                                    c1,\n                                    c2\n                                ]\n                            }\n                        ];\n                        newRange = newRange.concat(range);\n                    }\n                } else if (edc < c2) {\n                    if (str <= r1 && edr >= r2) {\n                        newRange.push({\n                            'row': [\n                                r1,\n                                r2\n                            ],\n                            'column': [\n                                c1 - clen,\n                                c2 - clen\n                            ]\n                        });\n                    } else if (str > r1 && edr < r2) {\n                        let range = [\n                            {\n                                'row': [\n                                    r1,\n                                    str - 1\n                                ],\n                                'column': [\n                                    c1,\n                                    c2\n                                ]\n                            },\n                            {\n                                'row': [\n                                    edr + 1,\n                                    r2\n                                ],\n                                'column': [\n                                    c1,\n                                    c2\n                                ]\n                            },\n                            {\n                                'row': [\n                                    str,\n                                    edr\n                                ],\n                                'column': [\n                                    c1 - clen,\n                                    c2 - clen\n                                ]\n                            }\n                        ];\n                        newRange = newRange.concat(range);\n                    } else if (str > r1) {\n                        let range = [\n                            {\n                                'row': [\n                                    r1,\n                                    str - 1\n                                ],\n                                'column': [\n                                    c1,\n                                    c2\n                                ]\n                            },\n                            {\n                                'row': [\n                                    str,\n                                    r2\n                                ],\n                                'column': [\n                                    c1 - clen,\n                                    c2 - clen\n                                ]\n                            }\n                        ];\n                        newRange = newRange.concat(range);\n                    } else if (edr < r2) {\n                        let range = [\n                            {\n                                'row': [\n                                    r1,\n                                    edr\n                                ],\n                                'column': [\n                                    c1 - clen,\n                                    c2 - clen\n                                ]\n                            },\n                            {\n                                'row': [\n                                    edr + 1,\n                                    r2\n                                ],\n                                'column': [\n                                    c1,\n                                    c2\n                                ]\n                            }\n                        ];\n                        newRange = newRange.concat(range);\n                    }\n                }\n            }\n        } else if (type == 'moveUp') {\n            if (stc > c2 || edc < c1 || str > r2) {\n                newRange.push({\n                    'row': [\n                        r1,\n                        r2\n                    ],\n                    'column': [\n                        c1,\n                        c2\n                    ]\n                });\n            } else if (edr < r1) {\n                if (stc <= c1 && edc >= c2) {\n                    newRange.push({\n                        'row': [\n                            r1 - rlen,\n                            r2 - rlen\n                        ],\n                        'column': [\n                            c1,\n                            c2\n                        ]\n                    });\n                } else if (stc > c1 && edc < c2) {\n                    let range = [\n                        {\n                            'row': [\n                                r1,\n                                r2\n                            ],\n                            'column': [\n                                c1,\n                                stc - 1\n                            ]\n                        },\n                        {\n                            'row': [\n                                r1,\n                                r2\n                            ],\n                            'column': [\n                                edc + 1,\n                                c2\n                            ]\n                        },\n                        {\n                            'row': [\n                                r1 - rlen,\n                                r2 - rlen\n                            ],\n                            'column': [\n                                stc,\n                                edc\n                            ]\n                        }\n                    ];\n                    newRange = newRange.concat(range);\n                } else if (stc > c1) {\n                    let range = [\n                        {\n                            'row': [\n                                r1,\n                                r2\n                            ],\n                            'column': [\n                                c1,\n                                stc - 1\n                            ]\n                        },\n                        {\n                            'row': [\n                                r1 - rlen,\n                                r2 - rlen\n                            ],\n                            'column': [\n                                stc,\n                                c2\n                            ]\n                        }\n                    ];\n                    newRange = newRange.concat(range);\n                } else if (edc < c2) {\n                    let range = [\n                        {\n                            'row': [\n                                r1 - rlen,\n                                r2 - rlen\n                            ],\n                            'column': [\n                                c1,\n                                edc\n                            ]\n                        },\n                        {\n                            'row': [\n                                r1,\n                                r2\n                            ],\n                            'column': [\n                                edc + 1,\n                                c2\n                            ]\n                        }\n                    ];\n                    newRange = newRange.concat(range);\n                }\n            } else if (edr >= r1) {\n                if (str <= r1 && edr >= r2) {\n                    if (stc > c1 && edc < c2) {\n                        let range = [\n                            {\n                                'row': [\n                                    r1,\n                                    r2\n                                ],\n                                'column': [\n                                    c1,\n                                    stc - 1\n                                ]\n                            },\n                            {\n                                'row': [\n                                    r1,\n                                    r2\n                                ],\n                                'column': [\n                                    edc + 1,\n                                    c2\n                                ]\n                            }\n                        ];\n                        newRange = newRange.concat(range);\n                    } else if (stc > c1) {\n                        let range = [{\n                                'row': [\n                                    r1,\n                                    r2\n                                ],\n                                'column': [\n                                    c1,\n                                    stc - 1\n                                ]\n                            }];\n                        newRange = newRange.concat(range);\n                    } else if (edc < c2) {\n                        let range = [{\n                                'row': [\n                                    r1,\n                                    r2\n                                ],\n                                'column': [\n                                    edc + 1,\n                                    c2\n                                ]\n                            }];\n                        newRange = newRange.concat(range);\n                    }\n                } else if (str > r1 && edr < r2) {\n                    if (stc <= c1 && edc >= c2) {\n                        newRange.push({\n                            'row': [\n                                r1,\n                                r2 - rlen\n                            ],\n                            'column': [\n                                c1,\n                                c2\n                            ]\n                        });\n                    } else if (stc > c1 && edc < c2) {\n                        let range = [\n                            {\n                                'row': [\n                                    r1,\n                                    r2\n                                ],\n                                'column': [\n                                    c1,\n                                    stc - 1\n                                ]\n                            },\n                            {\n                                'row': [\n                                    r1,\n                                    r2\n                                ],\n                                'column': [\n                                    edc + 1,\n                                    c2\n                                ]\n                            },\n                            {\n                                'row': [\n                                    r1,\n                                    r2 - rlen\n                                ],\n                                'column': [\n                                    stc,\n                                    edc\n                                ]\n                            }\n                        ];\n                        newRange = newRange.concat(range);\n                    } else if (stc > c1) {\n                        let range = [\n                            {\n                                'row': [\n                                    r1,\n                                    r2\n                                ],\n                                'column': [\n                                    c1,\n                                    stc - 1\n                                ]\n                            },\n                            {\n                                'row': [\n                                    r1,\n                                    r2 - rlen\n                                ],\n                                'column': [\n                                    stc,\n                                    c2\n                                ]\n                            }\n                        ];\n                        newRange = newRange.concat(range);\n                    } else if (edc < c2) {\n                        let range = [\n                            {\n                                'row': [\n                                    r1,\n                                    r2 - rlen\n                                ],\n                                'column': [\n                                    c1,\n                                    edc\n                                ]\n                            },\n                            {\n                                'row': [\n                                    r1,\n                                    r2\n                                ],\n                                'column': [\n                                    edc + 1,\n                                    c2\n                                ]\n                            }\n                        ];\n                        newRange = newRange.concat(range);\n                    }\n                } else if (str > r1) {\n                    if (stc <= c1 && edc >= c2) {\n                        newRange.push({\n                            'row': [\n                                r1,\n                                str - 1\n                            ],\n                            'column': [\n                                c1,\n                                c2\n                            ]\n                        });\n                    } else if (stc > c1 && edc < c2) {\n                        let range = [\n                            {\n                                'row': [\n                                    r1,\n                                    r2\n                                ],\n                                'column': [\n                                    c1,\n                                    stc - 1\n                                ]\n                            },\n                            {\n                                'row': [\n                                    r1,\n                                    r2\n                                ],\n                                'column': [\n                                    edc + 1,\n                                    c2\n                                ]\n                            },\n                            {\n                                'row': [\n                                    r1,\n                                    str - 1\n                                ],\n                                'column': [\n                                    stc,\n                                    edc\n                                ]\n                            }\n                        ];\n                        newRange = newRange.concat(range);\n                    } else if (stc > c1) {\n                        let range = [\n                            {\n                                'row': [\n                                    r1,\n                                    r2\n                                ],\n                                'column': [\n                                    c1,\n                                    stc - 1\n                                ]\n                            },\n                            {\n                                'row': [\n                                    r1,\n                                    str - 1\n                                ],\n                                'column': [\n                                    stc,\n                                    c2\n                                ]\n                            }\n                        ];\n                        newRange = newRange.concat(range);\n                    } else if (edc < c2) {\n                        let range = [\n                            {\n                                'row': [\n                                    r1,\n                                    str - 1\n                                ],\n                                'column': [\n                                    c1,\n                                    edc\n                                ]\n                            },\n                            {\n                                'row': [\n                                    r1,\n                                    r2\n                                ],\n                                'column': [\n                                    edc + 1,\n                                    c2\n                                ]\n                            }\n                        ];\n                        newRange = newRange.concat(range);\n                    }\n                } else if (edr < r2) {\n                    if (stc <= c1 && edc >= c2) {\n                        newRange.push({\n                            'row': [\n                                r1 - rlen,\n                                r2 - rlen\n                            ],\n                            'column': [\n                                c1,\n                                c2\n                            ]\n                        });\n                    } else if (stc > c1 && edc < c2) {\n                        let range = [\n                            {\n                                'row': [\n                                    r1,\n                                    r2\n                                ],\n                                'column': [\n                                    c1,\n                                    stc - 1\n                                ]\n                            },\n                            {\n                                'row': [\n                                    r1,\n                                    r2\n                                ],\n                                'column': [\n                                    edc + 1,\n                                    c2\n                                ]\n                            },\n                            {\n                                'row': [\n                                    r1 - rlen,\n                                    r2 - rlen\n                                ],\n                                'column': [\n                                    stc,\n                                    edc\n                                ]\n                            }\n                        ];\n                        newRange = newRange.concat(range);\n                    } else if (stc > c1) {\n                        let range = [\n                            {\n                                'row': [\n                                    r1,\n                                    r2\n                                ],\n                                'column': [\n                                    c1,\n                                    stc - 1\n                                ]\n                            },\n                            {\n                                'row': [\n                                    r1 - rlen,\n                                    r2 - rlen\n                                ],\n                                'column': [\n                                    stc,\n                                    c2\n                                ]\n                            }\n                        ];\n                        newRange = newRange.concat(range);\n                    } else if (edc < c2) {\n                        let range = [\n                            {\n                                'row': [\n                                    r1 - rlen,\n                                    r2 - rlen\n                                ],\n                                'column': [\n                                    c1,\n                                    edc\n                                ]\n                            },\n                            {\n                                'row': [\n                                    r1,\n                                    r2\n                                ],\n                                'column': [\n                                    edc + 1,\n                                    c2\n                                ]\n                            }\n                        ];\n                        newRange = newRange.concat(range);\n                    }\n                }\n            }\n        }\n        return newRange;\n    }\n    return {\n        luckysheetextendtable,\n        luckysheetextendData,\n        luckysheetdeletetable,\n        luckysheetDeleteCell\n    };\n});"]}