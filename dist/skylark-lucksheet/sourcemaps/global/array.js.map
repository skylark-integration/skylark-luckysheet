{"version":3,"sources":["global/array.js"],"names":["define","m_getdata","getcellvalue","transpose","getdata","useGetcellValue","arr","length","c","a","r","value","push","minusClear","p","m","row","column","ret","row1","column1","row2","column2"],"mappings":";;;;;;;AAAAA,QAAQ,aAAc,SAAUC,GAC5B,aACA,MAAMC,aAACA,GAAgBD,EAmFvB,OAjFIE,UAAW,SAAUC,EAASC,GAAkB,GAC5C,IAAIC,KACJ,GAAsB,GAAlBF,EAAQG,OACR,SAEJ,GAAyB,GAArBH,EAAQ,GAAGG,OACX,SAEJ,IAAK,IAAIC,EAAI,EAAGA,EAAIJ,EAAQ,GAAGG,OAAQC,IAAK,CACxC,IAAIC,KACJ,IAAK,IAAIC,EAAI,EAAGA,EAAIN,EAAQG,OAAQG,IAAK,CACrC,IAAIC,EAAQ,GACM,MAAdP,EAAQM,IAA+B,MAAjBN,EAAQM,GAAGF,KAE7BG,EADAN,EACQH,EAAaQ,EAAGF,EAAGJ,GAEnBA,EAAQM,GAAGF,IAG3BC,EAAEG,KAAKD,GAEXL,EAAIM,KAAKH,GAEb,OAAOH,GAEXO,WAAY,SAAUC,EAAGC,GACrB,GAAIA,EAAEC,IAAI,GAAKF,EAAEE,IAAI,IAAMD,EAAEC,IAAI,GAAKF,EAAEE,IAAI,IAAMD,EAAEE,OAAO,GAAKH,EAAEG,OAAO,IAAMF,EAAEE,OAAO,GAAKH,EAAEG,OAAO,GAClG,OAAO,KAEX,GAAIF,EAAEC,IAAI,IAAMF,EAAEE,IAAI,IAAMD,EAAEC,IAAI,GAAKF,EAAEE,IAAI,IAAMD,EAAEE,OAAO,GAAKH,EAAEG,OAAO,IAAMF,EAAEE,OAAO,GAAKH,EAAEG,OAAO,GACnG,SAEJ,IAAIC,KAIAC,EAAO,KAAMC,GACTN,EAAEG,OAAO,GACTH,EAAEG,OAAO,IAEbF,EAAEC,IAAI,GAAKF,EAAEE,IAAI,IAAMD,EAAEC,IAAI,GAAKF,EAAEE,IAAI,GACxCG,GACIJ,EAAEC,IAAI,GAAK,EACXF,EAAEE,IAAI,IAEHD,EAAEC,IAAI,GAAKF,EAAEE,IAAI,IAAMD,EAAEC,IAAI,GAAKF,EAAEE,IAAI,KAC/CG,GACIL,EAAEE,IAAI,GACND,EAAEC,IAAI,GAAK,IAGP,MAARG,GACAD,EAAIN,MACAI,IAAOG,EACPF,OAAUG,IAGlB,IAAIC,GACIP,EAAEE,IAAI,GACNF,EAAEE,IAAI,IACPM,EAAU,KAkBjB,OAjBIP,EAAEE,OAAO,GAAKH,EAAEG,OAAO,IAAMF,EAAEE,OAAO,GAAKH,EAAEG,OAAO,GACpDK,GACIP,EAAEE,OAAO,GAAK,EACdH,EAAEG,OAAO,IAENF,EAAEE,OAAO,GAAKH,EAAEG,OAAO,IAAMF,EAAEE,OAAO,GAAKH,EAAEG,OAAO,KAC3DK,GACIR,EAAEG,OAAO,GACTF,EAAEE,OAAO,GAAK,IAGP,MAAXK,GACAJ,EAAIN,MACAI,IAAOK,EACPJ,OAAUK,IAGXJ","file":"../../global/array.js","sourcesContent":["define(['./getdata'], function (m_getdata) {\n    'use strict';\n    const {getcellvalue} = m_getdata;\n    const luckysheetArray = {\n        transpose: function (getdata, useGetcellValue = true) {\n            let arr = [];\n            if (getdata.length == 0) {\n                return [];\n            }\n            if (getdata[0].length == 0) {\n                return [];\n            }\n            for (let c = 0; c < getdata[0].length; c++) {\n                let a = [];\n                for (let r = 0; r < getdata.length; r++) {\n                    let value = '';\n                    if (getdata[r] != null && getdata[r][c] != null) {\n                        if (useGetcellValue) {\n                            value = getcellvalue(r, c, getdata);\n                        } else {\n                            value = getdata[r][c];\n                        }\n                    }\n                    a.push(value);\n                }\n                arr.push(a);\n            }\n            return arr;\n        },\n        minusClear: function (p, m) {\n            if (m.row[0] > p.row[1] || m.row[1] < p.row[0] || m.column[0] > p.column[1] || m.column[1] < p.column[0]) {\n                return null;\n            }\n            if (m.row[0] == p.row[0] && m.row[1] < p.row[1] && m.column[0] > p.column[0] && m.column[1] < p.column[1]) {\n                return [];\n            }\n            let ret = [], range = {\n                    row: [],\n                    column: []\n                };\n            let row1 = null, column1 = [\n                    p.column[0],\n                    p.column[1]\n                ];\n            if (m.row[1] > p.row[0] && m.row[1] < p.row[1]) {\n                row1 = [\n                    m.row[1] + 1,\n                    p.row[1]\n                ];\n            } else if (m.row[0] > p.row[0] && m.row[0] < p.row[1]) {\n                row1 = [\n                    p.row[0],\n                    m.row[0] - 1\n                ];\n            }\n            if (row1 != null) {\n                ret.push({\n                    'row': row1,\n                    'column': column1\n                });\n            }\n            let row2 = [\n                    p.row[0],\n                    p.row[1]\n                ], column2 = null;\n            if (m.column[1] > p.column[0] && m.column[1] < p.column[1]) {\n                column2 = [\n                    m.column[1] + 1,\n                    p.column[1]\n                ];\n            } else if (m.column[0] > p.column[0] && m.column[0] < p.column[1]) {\n                column2 = [\n                    p.column[0],\n                    m.column[0] - 1\n                ];\n            }\n            if (column2 != null) {\n                ret.push({\n                    'row': row2,\n                    'column': column2\n                });\n            }\n            return ret;\n        }\n    };\n    return luckysheetArray;\n});"]}