{"version":3,"sources":["methods/setdata.js"],"names":["define","m_util","m_validate","m_format","luckysheetConfigsetting","Store","getObjType","isRealNull","isRealNum","valueIsError","genarate","update","setAccuracy","autoFormatw","accuracy","fmt","acc","undefined","alength","parseInt","i","toString","setcellvalue","r","c","d","v","flowdata","vupdate","cell","f","spl","ct","m","substr","fa","t","qp","toUpperCase","test","parseFloat","Infinity","indexOf","len","split","length","toExponential","v_p","Math","round","mask","allowUpdate","pointEdit","sfmt"],"mappings":";;;;;;;AAAAA,QACI,gBACA,aACA,WACA,4BACA,YACD,SAAUC,EAAQC,EAAYC,EAAUC,EAAyBC,GAChE,aACA,MAAMC,WAACA,GAAcL,GACfM,WAACA,EAAUC,UAAEA,EAASC,aAAEA,GAAgBP,GACxCQ,SAACA,EAAQC,OAAEA,GAAUR,EAwL3B,SAASS,EAAYC,EAAaC,GAC9B,IACIC,EADAC,EAAM,KAEV,GAAmB,QAAfH,EAAuB,CACvB,QAAgBI,GAAZH,EACA,MAAO,IACJ,CACH,IAAII,EAAUC,SAASL,GACvB,GAAe,GAAXI,EACA,MAAO,KAEPF,EAAM,MACN,IAAK,IAAII,EAAI,EAAGA,EAAIF,EAASE,IACzBJ,GAAO,IAEXD,EAAMC,OAGX,CACH,QAAgBC,GAAZH,EACA,MAAO,UACJ,CACH,IAAII,EAAUC,SAASL,GACvB,GAAe,GAAXI,EACA,MAAO,IAEP,IAAK,IAAIE,EAAI,EAAGA,EAAIF,EAASE,IACzBJ,GAAO,IAEXD,EAAMC,GAIlB,OAAOD,EAAIM,WAEf,OACIC,aA1NJ,SAAsBC,EAAGC,EAAGC,EAAGC,GAClB,MAALD,IACAA,EAAIpB,EAAMsB,UAKd,IACIC,EADAC,EAAOJ,EAAEF,GAAGC,GA6BhB,GA3BqB,UAAjBlB,EAAWoB,IACC,MAARG,EACAA,EAAOH,GAEI,MAAPA,EAAEI,IACFD,EAAKC,EAAIJ,EAAEI,GAOF,MAATJ,EAAEK,MACFF,EAAKE,IAAML,EAAEK,KAEL,MAARL,EAAEM,KACFH,EAAKG,GAAKN,EAAEM,KAIhBJ,EADmB,UAAnBtB,EAAWoB,EAAEA,GACHA,EAAEA,EAAEA,EAEJA,EAAEA,GAGhBE,EAAUF,EAEVnB,EAAWqB,GAQX,MAPwB,UAApBtB,EAAWuB,WACJA,EAAKI,SACLJ,EAAKH,GAEZG,EAAO,UAEXJ,EAAEF,GAAGC,GAAKK,GASd,IAHItB,EAAWsB,KAA+B,WAArBvB,EAAWuB,IAA2C,WAArBvB,EAAWuB,KAAuBA,IAASH,KACjGG,MAEmC,KAAnCD,EAAQP,WAAWa,OAAO,EAAG,GAC7BL,EAAKI,EAAIL,EAAQP,WAAWa,OAAO,GACnCL,EAAKG,IACDG,GAAM,IACNC,EAAK,KAETP,EAAKH,EAAIE,EAAQP,WAAWa,OAAO,GACnCL,EAAKQ,GAAK,OACP,GAAe,GAAXR,EAAKQ,GACZR,EAAKI,EAAIL,EAAQP,WACjBQ,EAAKG,IACDG,GAAM,IACNC,EAAK,KAETP,EAAKH,EAAIE,EAAQP,gBACd,GAAyC,SAArCO,EAAQP,WAAWiB,cAC1BT,EAAKI,EAAI,OACTJ,EAAKG,IACDG,GAAM,UACNC,EAAK,KAETP,EAAKH,GAAI,OACN,GAAyC,UAArCE,EAAQP,WAAWiB,cAC1BT,EAAKI,EAAI,QACTJ,EAAKG,IACDG,GAAM,UACNC,EAAK,KAETP,EAAKH,GAAI,OACN,GAAIjB,EAAamB,GACpBC,EAAKI,EAAIL,EAAQP,WAEF,MAAXQ,EAAKG,GACLH,EAAKG,GAAGI,EAAI,IAEZP,EAAKG,IACDG,GAAM,UACNC,EAAK,KAGbP,EAAKH,EAAIE,OAET,GAAc,MAAVC,EAAKC,GAAatB,EAAUoB,KAAa,yEAAyEW,KAAKX,GAQvH,GAPAC,EAAKH,EAAIc,WAAWZ,GACL,MAAXC,EAAKG,KACLH,EAAKG,IACDG,GAAM,UACNC,EAAK,MAGTP,EAAKH,GAAKe,EAAAA,GAAYZ,EAAKH,IAAK,EAAA,EAChCG,EAAKI,EAAIJ,EAAKH,EAAEL,gBAEhB,GAAIQ,EAAKH,EAAEL,WAAWqB,QAAQ,MAAQ,EAAG,CACrC,IAAIC,GAEAA,EADuC,GAAvCd,EAAKH,EAAEL,WAAWuB,MAAM,KAAKC,OACvB,EAEAhB,EAAKH,EAAEL,WAAWuB,MAAM,KAAK,GAAGA,MAAM,KAAK,GAAGC,QAE9C,IACNF,EAAM,GAEVd,EAAKI,EAAIJ,EAAKH,EAAEoB,cAAcH,GAAKtB,eAChC,CACH,IAAI0B,EAAMC,KAAKC,MAAe,IAATpB,EAAKH,GAAkB,IAC5C,GAAe,MAAXG,EAAKG,GAAY,CACjB,IAAIkB,EAAOxC,EAASqC,GACpBlB,EAAKI,EAAIiB,EAAK,GAAG7B,eACd,CACH,IAAI6B,EAAOvC,EAAOkB,EAAKG,GAAGG,GAAIY,GAC9BlB,EAAKI,EAAIiB,EAAK7B,iBAK9B,GAAe,MAAXQ,EAAKG,IAA4B,KAAdH,EAAKG,GAAGG,GAC3BN,EAAKI,EAAIL,EAAQP,WACjBQ,EAAKH,EAAIE,OACN,GAAe,MAAXC,EAAKG,IAA4B,MAAdH,EAAKG,GAAGG,IAA4B,WAAdN,EAAKG,GAAGG,GAAiB,CACrE3B,EAAUoB,KACVA,EAAUY,WAAWZ,IAEzB,IAAIsB,EAAOvC,EAAOkB,EAAKG,GAAGG,GAAIP,GAC1BsB,IAAStB,GAETsB,EAAOxC,EAASkB,GAChBC,EAAKI,EAAIiB,EAAK,GAAG7B,WACjBQ,EAAKG,GAAKkB,EAAK,GACfrB,EAAKH,EAAIwB,EAAK,KAEdrB,EAAKI,EAAIiB,EAAK7B,WACdQ,EAAKH,EAAIE,QAGb,GAAIpB,EAAUoB,KAAa,yEAAyEW,KAAKX,GAOrG,GANAA,EAAUY,WAAWZ,GACrBC,EAAKH,EAAIc,WAAWZ,GACpBC,EAAKG,IACDG,GAAM,UACNC,EAAK,KAELP,EAAKH,GAAKe,EAAAA,GAAYZ,EAAKH,IAAK,EAAA,EAChCG,EAAKI,EAAIJ,EAAKH,EAAEL,eACb,CACH,IAAI6B,EAAOxC,EAASmB,EAAKH,GACzBG,EAAKI,EAAIiB,EAAK,GAAG7B,eAElB,CACH,IAAI6B,EAAOxC,EAASkB,GACpBC,EAAKI,EAAIiB,EAAK,GAAG7B,WACjBQ,EAAKG,GAAKkB,EAAK,GACfrB,EAAKH,EAAIwB,EAAK,GAI1B,IAAK7C,EAAM8C,cAAgB/C,EAAwBgD,WAChC,MAAXvB,EAAKG,IAA0D,GAA5C,wBAAwBO,KAAKV,EAAKG,GAAGG,KAA6B,KAAbN,EAAKG,GAAGI,GAAsB,MAAVP,EAAKH,GAAaP,SAASU,EAAKH,GAAGL,WAAWwB,OAAS,EAAG,CACtJ,IAEIQ,EAAOzC,EAFOR,EAAwBS,YAAYQ,WAAWiB,cAClDlC,EAAwBU,UAE3B,WAARuC,IACAxB,EAAKG,GAAGG,GAAKkB,EACbxB,EAAKI,EAAItB,EAAO0C,EAAMxB,EAAKH,IAIvCD,EAAEF,GAAGC,GAAKK,GAwCVjB,YAAAA","file":"../../methods/setdata.js","sourcesContent":["define([\n    '../utils/util',\n    './validate',\n    './format',\n    './luckysheetConfigsetting',\n    '../store'\n], function (m_util, m_validate, m_format, luckysheetConfigsetting, Store) {\n    'use strict';\n    const {getObjType} = m_util;\n    const {isRealNull, isRealNum, valueIsError} = m_validate;\n    const {genarate, update} = m_format;\n    //Set cell value\n    function setcellvalue(r, c, d, v) {\n        if (d == null) {\n            d = Store.flowdata;\n        }    // 若采用深拷贝，初始化时的单元格属性丢失\n             // let cell = $.extend(true, {}, d[r][c]);\n        // 若采用深拷贝，初始化时的单元格属性丢失\n        // let cell = $.extend(true, {}, d[r][c]);\n        let cell = d[r][c];\n        let vupdate;\n        if (getObjType(v) == 'object') {\n            if (cell == null) {\n                cell = v;\n            } else {\n                if (v.f != null) {\n                    cell.f = v.f;\n                }    // else{\n                     //     delete cell.f;\n                     // }\n                // else{\n                //     delete cell.f;\n                // }\n                if (v.spl != null) {\n                    cell.spl = v.spl;\n                }\n                if (v.ct != null) {\n                    cell.ct = v.ct;\n                }\n            }\n            if (getObjType(v.v) == 'object') {\n                vupdate = v.v.v;\n            } else {\n                vupdate = v.v;\n            }\n        } else {\n            vupdate = v;\n        }\n        if (isRealNull(vupdate)) {\n            if (getObjType(cell) == 'object') {\n                delete cell.m;\n                delete cell.v;\n            } else {\n                cell = null;\n            }\n            d[r][c] = cell;\n            return;\n        }    // 1.为null\n             // 2.数据透视表的数据，flowdata的每个数据可能为字符串，结果就是cell == v == 一个字符串或者数字数据\n        // 1.为null\n        // 2.数据透视表的数据，flowdata的每个数据可能为字符串，结果就是cell == v == 一个字符串或者数字数据\n        if (isRealNull(cell) || (getObjType(cell) === 'string' || getObjType(cell) === 'number') && cell === v) {\n            cell = {};\n        }\n        if (vupdate.toString().substr(0, 1) == \"'\") {\n            cell.m = vupdate.toString().substr(1);\n            cell.ct = {\n                'fa': '@',\n                't': 's'\n            };\n            cell.v = vupdate.toString().substr(1);\n            cell.qp = 1;\n        } else if (cell.qp == 1) {\n            cell.m = vupdate.toString();\n            cell.ct = {\n                'fa': '@',\n                't': 's'\n            };\n            cell.v = vupdate.toString();\n        } else if (vupdate.toString().toUpperCase() === 'TRUE') {\n            cell.m = 'TRUE';\n            cell.ct = {\n                'fa': 'General',\n                't': 'b'\n            };\n            cell.v = true;\n        } else if (vupdate.toString().toUpperCase() === 'FALSE') {\n            cell.m = 'FALSE';\n            cell.ct = {\n                'fa': 'General',\n                't': 'b'\n            };\n            cell.v = false;\n        } else if (valueIsError(vupdate)) {\n            cell.m = vupdate.toString();    // cell.ct = { \"fa\": \"General\", \"t\": \"e\" };\n            // cell.ct = { \"fa\": \"General\", \"t\": \"e\" };\n            if (cell.ct != null) {\n                cell.ct.t = 'e';\n            } else {\n                cell.ct = {\n                    'fa': 'General',\n                    't': 'e'\n                };\n            }\n            cell.v = vupdate;\n        } else {\n            if (cell.f != null && isRealNum(vupdate) && !/^\\d{6}(18|19|20)?\\d{2}(0[1-9]|1[12])(0[1-9]|[12]\\d|3[01])\\d{3}(\\d|X)$/i.test(vupdate)) {\n                cell.v = parseFloat(vupdate);\n                if (cell.ct == null) {\n                    cell.ct = {\n                        'fa': 'General',\n                        't': 'n'\n                    };\n                }\n                if (cell.v == Infinity || cell.v == -Infinity) {\n                    cell.m = cell.v.toString();\n                } else {\n                    if (cell.v.toString().indexOf('e') > -1) {\n                        let len;\n                        if (cell.v.toString().split('.').length == 1) {\n                            len = 0;\n                        } else {\n                            len = cell.v.toString().split('.')[1].split('e')[0].length;\n                        }\n                        if (len > 5) {\n                            len = 5;\n                        }\n                        cell.m = cell.v.toExponential(len).toString();\n                    } else {\n                        let v_p = Math.round(cell.v * 1000000000) / 1000000000;\n                        if (cell.ct == null) {\n                            let mask = genarate(v_p);\n                            cell.m = mask[0].toString();\n                        } else {\n                            let mask = update(cell.ct.fa, v_p);\n                            cell.m = mask.toString();\n                        }    // cell.m = mask[0].toString();\n                    }\n                }\n            } else // cell.m = mask[0].toString();\n            if (cell.ct != null && cell.ct.fa == '@') {\n                cell.m = vupdate.toString();\n                cell.v = vupdate;\n            } else if (cell.ct != null && cell.ct.fa != null && cell.ct.fa != 'General') {\n                if (isRealNum(vupdate)) {\n                    vupdate = parseFloat(vupdate);\n                }\n                let mask = update(cell.ct.fa, vupdate);\n                if (mask === vupdate) {\n                    //若原来单元格格式 应用不了 要更新的值，则获取更新值的 格式\n                    mask = genarate(vupdate);\n                    cell.m = mask[0].toString();\n                    cell.ct = mask[1];\n                    cell.v = mask[2];\n                } else {\n                    cell.m = mask.toString();\n                    cell.v = vupdate;\n                }\n            } else {\n                if (isRealNum(vupdate) && !/^\\d{6}(18|19|20)?\\d{2}(0[1-9]|1[12])(0[1-9]|[12]\\d|3[01])\\d{3}(\\d|X)$/i.test(vupdate)) {\n                    vupdate = parseFloat(vupdate);\n                    cell.v = parseFloat(vupdate);\n                    cell.ct = {\n                        'fa': 'General',\n                        't': 'n'\n                    };\n                    if (cell.v == Infinity || cell.v == -Infinity) {\n                        cell.m = cell.v.toString();\n                    } else {\n                        let mask = genarate(cell.v);\n                        cell.m = mask[0].toString();\n                    }\n                } else {\n                    let mask = genarate(vupdate);\n                    cell.m = mask[0].toString();\n                    cell.ct = mask[1];\n                    cell.v = mask[2];\n                }\n            }\n        }\n        if (!Store.allowUpdate && !luckysheetConfigsetting.pointEdit) {\n            if (cell.ct != null && /^(w|W)((0?)|(0\\.0+))$/.test(cell.ct.fa) == false && cell.ct.t == 'n' && cell.v != null && parseInt(cell.v).toString().length > 4) {\n                let autoFormatw = luckysheetConfigsetting.autoFormatw.toString().toUpperCase();\n                let accuracy = luckysheetConfigsetting.accuracy;\n                let sfmt = setAccuracy(autoFormatw, accuracy);\n                if (sfmt != 'General') {\n                    cell.ct.fa = sfmt;\n                    cell.m = update(sfmt, cell.v);\n                }\n            }\n        }\n        d[r][c] = cell;\n    }    //new runze 根据亿万格式autoFormatw和精确度accuracy 转换成 w/w0/w0.00 or 0/0.0格式 \n    //new runze 根据亿万格式autoFormatw和精确度accuracy 转换成 w/w0/w0.00 or 0/0.0格式 \n    function setAccuracy(autoFormatw, accuracy) {\n        let acc = '0.';\n        let fmt;\n        if (autoFormatw == 'TRUE') {\n            if (accuracy == undefined) {\n                return 'w';\n            } else {\n                let alength = parseInt(accuracy);\n                if (alength == 0) {\n                    return 'w0';\n                } else {\n                    acc = 'w0.';\n                    for (let i = 0; i < alength; i++) {\n                        acc += '0';\n                    }\n                    fmt = acc;\n                }\n            }\n        } else {\n            if (accuracy == undefined) {\n                return 'General';\n            } else {\n                let alength = parseInt(accuracy);\n                if (alength == 0) {\n                    return '0';\n                } else {\n                    for (let i = 0; i < alength; i++) {\n                        acc += '0';\n                    }\n                    fmt = acc;\n                }\n            }\n        }\n        return fmt.toString();\n    }\n    return {\n        setcellvalue,\n        setAccuracy\n    };\n});"]}