{"version":3,"sources":["methods/formula_methods.js"],"names":["define","m_util","m_get","m_set","m_validate","m_datecontroll","m_getRowlen","m_getdata","m_setdata","m_format","m_location","luckysheetConfigsetting","m_func","Store","locale","json","replaceHtml","getObjType","chatatABC","ABCatNum","luckysheetfontformat","getSheetIndex","getRangetxt","getluckysheetfile","setluckysheetfile","isRealNum","isRealNull","valueIsError","isEditMode","isdatetime","isdatatype","getCellTextSplitArr","getCellTextInfo","getcellvalue","getcellFormula","getInlineStringNoStyle","getOrigincell","setcellvalue","genarate","valueShowEs","rowLocation","colLocation","colLocationByIndex","mouseposition","luckysheet_compareWith","luckysheet_getarraydata","luckysheet_getcelldata","luckysheet_parseData","luckysheet_getValue","luckysheet_indirect_check","luckysheet_indirect_check_return","luckysheet_offset_check","luckysheet_calcADPMM","luckysheet_getSpecialReference","error","v","n","na","r","d","nm","nl","sp","errorInfo","err","errorParamCheck","thisp","data","i","type","require","locale_formulaMore","formulaMore","length","indexOf","tipSuccessText","tipParamErrorText","getPureValueByData","output","row","c","cell","push","readCellDataToOneArray","rangeValue","_this","this","dataformat","test","replace","Function","concat","getValueByFuncData","value","arg","luckysheet_function","AVERAGE","f","apply","SUM","luckysheet","mask","getValueByFormat","sparklinesColorMap","args","len","colorLists","colorMap","colorListArray","a","ca","calist","split","index","colorList","classlist","province","11","12","13","14","15","21","22","23","31","32","33","34","35","36","37","41","42","43","44","45","46","50","51","52","53","54","61","62","63","64","65","71","81","82","91","cellOffset","range","rows","cols","height","width","offsetRange","startCell","startCellRow","rowl","coll","parseInt","startCellCol","col","cellF","cellL","sheetName","parseDatetoNum","date","parseFloat","getRangeArray","rangeNow","fmt","ct","fa","getRangeArrayTwo","$","extend","Object","m","isWildcard","b","toString","isCompareOperator","flag","num","str","charAt","reg","RegExp","match","ret","ope","strOne","substr","strTwo","acompareb","compareParams","fp","sym","classNameA","call","classNameB","propsA","getOwnPropertyNames","propsB","propName","parseDecimal","getcellrange","txt","formulaIndex","sheettxt","rangetxt","sheetIndex","sheetdata","luckysheetfile","cellTextToIndexList","val","substring","name","currentSheetIndex","flowdata","isNaN","item","column","addToCellIndexList","iscellformat","iscelldata","reg_cell","reg_cellRange","getfunctionParam","operatorjson","arr","operator","op","funcstack","function_str","matchConfig","bracket","comma","squote","dquote","compare","fn","param","s","toUpperCase","pop","s_next","p","s_pre","trim","calPostfixExpression","cal","stack","s2","checkBracketNum","bra_l","bra_r","bra_tl_txt","bra_tr_txt","bra_l_len","bra_r_len","bra_tl_len","bra_tr_len","bra_tl","bra_tr","operatorPriority","^","%","*","/","+","-","functionParserExe","functionParser","cellRangeFunction","braces","cal1","cal2","firstSQ","funcArray","functionS","unshift","stackCeilPri","shift","sPri","endstr","str_nb","regx","arraytxt","exec","arraystart","search","insertUpdateDynamicArray","dynamicArrayItem","dynamicArray","calc","addFunctionGroup","func","file","calcChain","cc","saveParam","JSON","stringify","pos","getAllFunctionGroup","tempCalcChain","forEach","idx","parse","dynamicArray_compute","getFunctionGroup","updateFunctionGroup","insertUpdateFunctionGroup","isFunctionRangeSave","isFunctionRangeSimple","txtArray","t","isFunctionRangeSaveChange","isFunctionRangeSimple1","isFunctionRangeSelect","txt1","isOffsetFunc","formulaContainCellList","cellList","cellStr","isFunctionRange","addToCellList","checkSpecialFunctionRange","isd_range","d_r","d_c","funcName","calculateSheetIndex","e","execvertex","execFunctionGroupData","execFunctionExist","formulaContainSheetList","formulaTxt","cellstring","infoObj","addToSheetIndexList","obIndex","execFunctionGlobalData","execFunctionGroupForce","isForce","execFunctionGroup","undefined","origin_r","origin_c","window","cellCache","calcChains","formulaObjects","sheets","sheetData","sheet","updateValueOjects","updateValueArray","x","key","arrayMatchCache","formulaCell","calc_funcStr","formulaArray","point","formulaTextArray","sq_end_array","calc_funcStr_length","char","splice","parents","chidren","color","keys","formulaObject","cacheKey","functionArr","arrayMatch","childKey","childFormulaObject","formulaRunList","existsFormulaRunList","cacheStack","parentKey","parentFormulaObject","ii","reverse","level","Math","max","luckysheet_getcelldata_cache","execfunction","groupValuesRefreshData","spe","execFunctionGroup1","group","vertex1","count","parent","times","u","excludeList","getChildrenVertex","ukey","functionDFS","obj","chd","groupValuesRefresh","updateValue","spl","webWorkerFlowDataCache","delFunctionGroup","isrefresh","notInsertFunc","functionHTMLIndex","testFunction","tooltip","info","execfunctionError","result","luckysheetCurrentRow","luckysheetCurrentColumn","luckysheetCurrentIndex","luckysheetCurrentFunction","sparklines","funcg","funcgStr","funcgRange","alert","execfunctionSelfError","execfunctionSelfErrorResult","console","log","isErr","execstringformula","functionResizeData","functionResizeStatus","functionResizeTimeout","data_parm_index"],"mappings":"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","file":"../../methods/formula_methods.js","sourcesContent":["define([\r\n    '../utils/util',\r\n    './get',\r\n    './set',\r\n    './validate',\r\n    './datecontroll',\r\n    './getRowlen',\r\n    './getdata',\r\n    './setdata',\r\n    './format',\r\n    './location',\r\n    './luckysheetConfigsetting',    \r\n    '../function/func',\r\n    '../store',\r\n    '../locale/locale',\r\n    './json'\r\n], function (m_util, m_get, m_set,  m_validate, m_datecontroll, m_getRowlen, m_getdata, m_setdata, m_format,  m_location,  luckysheetConfigsetting, m_func, Store, locale, json) {\r\n    'use strict';\r\n    const {replaceHtml, getObjType, chatatABC, ABCatNum, luckysheetfontformat} = m_util;\r\n    const {getSheetIndex, getRangetxt, getluckysheetfile} = m_get;\r\n    const {setluckysheetfile} = m_set;\r\n    const {isRealNum, isRealNull, valueIsError} = m_validate;\r\n    const isEditMode = luckysheetConfigsetting.isEditMode;\r\n    const {isdatetime, isdatatype} = m_datecontroll;\r\n    const {getCellTextSplitArr, getCellTextInfo} = m_getRowlen;\r\n    const {getcellvalue, getcellFormula, getInlineStringNoStyle, getOrigincell} = m_getdata;\r\n    const {setcellvalue} = m_setdata;\r\n    const {genarate, valueShowEs} = m_format;\r\n    const {rowLocation, colLocation, colLocationByIndex, mouseposition} = m_location;\r\n    const {luckysheet_compareWith, luckysheet_getarraydata, luckysheet_getcelldata, luckysheet_parseData, luckysheet_getValue, luckysheet_indirect_check, luckysheet_indirect_check_return, luckysheet_offset_check, luckysheet_calcADPMM, luckysheet_getSpecialReference} = m_func;\r\n    const luckysheetformula = {\r\n        error: {\r\n            v: '#VALUE!',\r\n            //错误的参数或运算符\r\n            n: '#NAME?',\r\n            //公式名称错误\r\n            na: '#N/A',\r\n            //函数或公式中没有可用数值\r\n            r: '#REF!',\r\n            //删除了由其他公式引用的单元格\r\n            d: '#DIV/0!',\r\n            //除数是0或空单元格\r\n            nm: '#NUM!',\r\n            //当公式或函数中某个数字有问题时\r\n            nl: '#NULL!',\r\n            //交叉运算符（空格）使用不正确\r\n            sp: '#SPILL!'    //数组范围有其它值\r\n        },\r\n        //数组范围有其它值\r\n        errorInfo: function (err) {\r\n            return err;\r\n        },\r\n        errorParamCheck: function (thisp, data, i) {\r\n            let type, require;\r\n            let _locale = locale();\r\n            let locale_formulaMore = _locale.formulaMore;\r\n            if (i < thisp.length) {\r\n                type = thisp[i].type;\r\n                require = thisp[i].require;\r\n            } else {\r\n                type = thisp[thisp.length - 1].type;\r\n                require = thisp[thisp.length - 1].require;\r\n            }\r\n            if (require == 'o' && (data == null || data == '')) {\r\n                return [\r\n                    true,\r\n                    locale_formulaMore.tipSuccessText\r\n                ];\r\n            }\r\n            if (type.indexOf('all') > -1) {\r\n                return [\r\n                    true,\r\n                    locale_formulaMore.tipSuccessText\r\n                ];\r\n            } else {\r\n                if (type.indexOf('range') > -1 && (getObjType(data) == 'object' || getObjType(data) == 'array')) {\r\n                    return [\r\n                        true,\r\n                        locale_formulaMore.tipSuccessText\r\n                    ];\r\n                }\r\n                if (type.indexOf('number') > -1 && (isRealNum(data) || getObjType(data) == 'boolean')) {\r\n                    return [\r\n                        true,\r\n                        locale_formulaMore.tipSuccessText\r\n                    ];\r\n                }\r\n                if (type.indexOf('string') > -1 && getObjType(data) == 'string') {\r\n                    return [\r\n                        true,\r\n                        locale_formulaMore.tipSuccessText\r\n                    ];\r\n                }\r\n                if (type.indexOf('date') > -1 && isdatetime(data)) {\r\n                    return [\r\n                        true,\r\n                        locale_formulaMore.tipSuccessText\r\n                    ];\r\n                }\r\n                return [\r\n                    false,\r\n                    locale_formulaMore.tipParamErrorText\r\n                ];\r\n            }\r\n        },\r\n        getPureValueByData: function (data) {\r\n            if (data.length == 0) {\r\n                return [];\r\n            }\r\n            let output = [];\r\n            if (getObjType(data) == 'array') {\r\n                if (getObjType(data[0]) == 'array') {\r\n                    for (let r = 0; r < data.length; r++) {\r\n                        let row = [];\r\n                        for (let c = 0; c < data[0].length; c++) {\r\n                            let cell = data[r][c];\r\n                            if (getObjType(cell) == 'object') {\r\n                                row.push(cell.v);\r\n                            } else {\r\n                                row.push(cell);\r\n                            }\r\n                        }\r\n                        output.push(row);\r\n                    }\r\n                } else {\r\n                    for (let i = 0; i < data.length; i++) {\r\n                        let cell = data[i];\r\n                        if (getObjType(cell) == 'object') {\r\n                            output.push(cell.v);\r\n                        } else {\r\n                            output.push(cell);\r\n                        }\r\n                    }\r\n                }\r\n            } else {\r\n                let cell = data;\r\n                if (getObjType(cell) == 'object') {\r\n                    output.push(cell.v);\r\n                } else {\r\n                    output.push(cell);\r\n                }\r\n            }\r\n            return output;\r\n        },\r\n        //sparklines添加\r\n        readCellDataToOneArray: function (rangeValue) {\r\n            let _this = this;\r\n            if (rangeValue == null) {\r\n                return [];\r\n            }\r\n            if (getObjType(rangeValue) != 'object') {\r\n                return [rangeValue];\r\n            }\r\n            let dataformat = [];\r\n            let data = [];\r\n            if (rangeValue != null && rangeValue.data != null) {\r\n                data = rangeValue.data;\r\n            } else if (rangeValue != null && !isRealNull(rangeValue.v)) {\r\n                return [rangeValue.v];\r\n            } else {\r\n                return [];\r\n            }    //适配excel的动态数组格式，{1，2，3，4，5}或者{{1，2，3}，{4，5，6}，{7，8，9}}\r\n            //适配excel的动态数组格式，{1，2，3，4，5}或者{{1，2，3}，{4，5，6}，{7，8，9}}\r\n            if (getObjType(data) == 'array') {\r\n                data = _this.getPureValueByData(data);\r\n            } else if (getObjType(data) == 'object') {\r\n                data = data.v;\r\n                return [data];\r\n            } else {\r\n                if (/\\{.*?\\}/.test(data)) {\r\n                    data = data.replace(/\\{/g, '[').replace(/\\}/g, ']');\r\n                }\r\n                data = new Function('return ' + data)();\r\n            }    //把二维数组转换为一维数组，sparklines要求数据格式为一维数组\r\n                 //let dataformat = [];\r\n            //把二维数组转换为一维数组，sparklines要求数据格式为一维数组\r\n            //let dataformat = [];\r\n            if (getObjType(data[0]) == 'array') {\r\n                for (let i = 0; i < data.length; i++) {\r\n                    dataformat = dataformat.concat(data[i]);\r\n                }\r\n            } else {\r\n                dataformat = data;\r\n            }\r\n            return dataformat;\r\n        },\r\n        //sparklines添加\r\n        //获得函数里某个参数的值，使用此函数需要在函数中执行luckysheet_getValue方法\r\n        getValueByFuncData: function (value, arg) {\r\n            if (value == null) {\r\n                return null;\r\n            }\r\n            let _this = this;\r\n            if (getObjType(value) == 'array') {\r\n                if (arg == 'avg') {\r\n                    return luckysheet_function.AVERAGE.f.apply(luckysheet_function.AVERAGE, value);\r\n                } else if (arg == 'sum') {\r\n                    return luckysheet_function.SUM.f.apply(luckysheet_function.SUM, value);\r\n                } else {\r\n                    if (getObjType(value[0]) == 'object') {\r\n                        return luckysheet.mask.getValueByFormat(value[0]);\r\n                    } else {\r\n                        return value[0];\r\n                    }\r\n                }\r\n            } else if (getObjType(value) == 'object') {\r\n                return luckysheet.mask.getValueByFormat(value);\r\n            } else {\r\n                return value;\r\n            }\r\n        },\r\n        //sparklines添加\r\n        sparklinesColorMap: function (args, len) {\r\n            let _this = this;\r\n            let colorLists = null;\r\n            if (len == null) {\r\n                len = 5;\r\n            }\r\n            let index = 0;\r\n            if (args.length > len) {\r\n                for (let i = len; i < args.length; i++) {\r\n                    let colorMap = args[i];\r\n                    let colorListArray = _this.readCellDataToOneArray(colorMap);\r\n                    for (let a = 0; a < colorListArray.length; a++) {\r\n                        let ca = colorListArray[a];\r\n                        if (ca.indexOf(':') > -1) {\r\n                            if (!colorLists) {\r\n                                colorLists = {};\r\n                            }\r\n                            let calist = ca.split(':');\r\n                            if (calist.length == 2) {\r\n                                colorLists[calist[0]] = calist[1];\r\n                            } else if (calist.length > 1) {\r\n                                colorLists[calist[0] + ':' + calist[1]] = calist[2];\r\n                            }\r\n                        } else {\r\n                            if (!colorLists) {\r\n                                colorLists = [];\r\n                            }\r\n                            colorLists.push(ca);\r\n                        }\r\n                    }\r\n                    index++;\r\n                }\r\n            }\r\n            return colorLists;\r\n        },\r\n        //sparklines添加\r\n        colorList: [\r\n            '#2ec7c9',\r\n            '#fc5c5c',\r\n            '#5ab1ef',\r\n            '#ffb980',\r\n            '#d87a80',\r\n            '#8d98b3',\r\n            '#e5cf0d',\r\n            '#97b552',\r\n            '#95706d',\r\n            '#dc69aa',\r\n            '#07a2a4',\r\n            '#9a7fd1',\r\n            '#588dd5',\r\n            '#f5994e',\r\n            '#c05050',\r\n            '#59678c',\r\n            '#c9ab00',\r\n            '#7eb00a',\r\n            '#6f5553',\r\n            '#c14089'\r\n        ],\r\n        classlist: {\r\n            'province': {\r\n                11: '北京',\r\n                12: '天津',\r\n                13: '河北',\r\n                14: '山西',\r\n                15: '内蒙古',\r\n                21: '辽宁',\r\n                22: '吉林',\r\n                23: '黑龙江',\r\n                31: '上海',\r\n                32: '江苏',\r\n                33: '浙江',\r\n                34: '安徽',\r\n                35: '福建',\r\n                36: '江西',\r\n                37: '山东',\r\n                41: '河南',\r\n                42: '湖北',\r\n                43: '湖南',\r\n                44: '广东',\r\n                45: '广西',\r\n                46: '海南',\r\n                50: '重庆',\r\n                51: '四川',\r\n                52: '贵州',\r\n                53: '云南',\r\n                54: '西藏',\r\n                61: '陕西',\r\n                62: '甘肃',\r\n                63: '青海',\r\n                64: '宁夏',\r\n                65: '新疆',\r\n                71: '台湾',\r\n                81: '香港',\r\n                82: '澳门',\r\n                91: '国外'\r\n            }\r\n        },\r\n        //获得某个单元格或区域的偏移一定距离后的单元格( Sheet1!B6:C8 格式)\r\n        cellOffset: function (range, rows, cols, height, width) {\r\n            // 参数：range or cell , rows,cols,height,width\r\n            let startCell = range.startCell;\r\n            let rowl = range.rowl;\r\n            let coll = range.coll;\r\n            let startCellRow = parseInt(startCell.replace(/[^0-9]/g, ''));\r\n            let startCellCol = ABCatNum(startCell.replace(/[^A-Za-z]/g, ''));\r\n            let row = [], col = [], offsetRange;\r\n            row[0] = startCellRow + rows;\r\n            col[0] = startCellCol + cols;\r\n            row[1] = row[0] + height - 1;\r\n            col[1] = col[0] + width - 1;\r\n            col[0] = chatatABC(col[0]);\r\n            col[1] = chatatABC(col[1]);\r\n            let cellF = col[0] + row[0];\r\n            let cellL = col[1] + row[1];\r\n            if (cellF == cellL) {\r\n                offsetRange = range.sheetName + '!' + cellF;\r\n            } else {\r\n                offsetRange = range.sheetName + '!' + cellF + ':' + cellL;\r\n            }\r\n            return offsetRange;\r\n        },\r\n        parseDatetoNum: function (date) {\r\n            //函数中获取到时间格式或者数字形式统一转化为数字进行运算\r\n            let _this = this;\r\n            if (typeof date == 'object' && typeof date.v == 'number') {\r\n                date = date.v;\r\n            } else if (isdatatype(date) == 'num') {\r\n                date = parseFloat(date);\r\n            } else if (isdatatype(date) == 'date') {\r\n                date = genarate(date)[2];\r\n            } else {\r\n                return _this.error.v;\r\n            }\r\n            return date;\r\n        },\r\n        //获取一维数组\r\n        getRangeArray: function (range) {\r\n            let rangeNow = [];\r\n            let fmt = 'General';\r\n            if (range.length == 1) {\r\n                //一行\r\n                for (let c = 0; c < range[0].length; c++) {\r\n                    if (range[0][c] != null && range[0][c].v) {\r\n                        rangeNow.push(range[0][c].v);\r\n                        let f = range[0][c].ct.fa;\r\n                        fmt = fmt == 'General' ? f : fmt;\r\n                    } else {\r\n                        //若单元格为null或为空，此处推入null（待考虑是否使用\"null\"）\r\n                        rangeNow.push(null);\r\n                    }\r\n                }\r\n            } else if (range[0].length == 1) {\r\n                //一列\r\n                for (let r = 0; r < range.length; r++) {\r\n                    if (range[r][0] != null && range[r][0].v) {\r\n                        rangeNow.push(range[r][0].v);\r\n                        let f = range[r][0].ct.fa;\r\n                        fmt = fmt == 'General' ? f : fmt;\r\n                    } else {\r\n                        rangeNow.push(null);\r\n                    }\r\n                }\r\n            } else {\r\n                for (let r = 0; r < range.length; r++) {\r\n                    for (let c = 0; c < range[r].length; c++) {\r\n                        if (range[r][c] != null && range[r][c].v) {\r\n                            rangeNow.push(range[r][c].v);\r\n                            let f = range[r][c].ct.fa;\r\n                            fmt = fmt == 'General' ? f : fmt;\r\n                        } else {\r\n                            rangeNow.push(null);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            range = rangeNow;\r\n            return [\r\n                range,\r\n                fmt\r\n            ];\r\n        },\r\n        //获取二维数组：qksheet格式[[{v,m,ct}] ==> [1]\r\n        getRangeArrayTwo: function (range) {\r\n            let data = $.extend(true, [], range);\r\n            if (data.length == 1) {\r\n                //一行\r\n                for (let c = 0; c < data[0].length; c++) {\r\n                    if (data[0][c] instanceof Object) {\r\n                        if (data[0][c] != null && data[0][c] instanceof Object && !!data[0][c].m) {\r\n                            data[0][c] = data[0][c].m;\r\n                        } else {\r\n                            if (data[0][c] != null && data[0][c] instanceof Object && !!data[0][c].v) {\r\n                                data[0][c] = data[0][c].v;\r\n                            } else {\r\n                                data[0][c] = null;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            } else if (data[0].length == 1) {\r\n                //一列\r\n                for (let r = 0; r < data.length; r++) {\r\n                    if (data[r][0] instanceof Object) {\r\n                        if (data[r][0] != null && data[r][0] instanceof Object && !!data[r][0].m) {\r\n                            data[r][0] = data[r][0].m;\r\n                        } else {\r\n                            if (data[r][0] != null && data[r][0] instanceof Object && !!data[r][0].v) {\r\n                                data[r][0] = data[r][0].v;\r\n                            } else {\r\n                                data[r][0] = null;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            } else {\r\n                for (let r = 0; r < data.length; r++) {\r\n                    for (let c = 0; c < data[r].length; c++) {\r\n                        if (data[r][c] instanceof Object) {\r\n                            if (data[r][c] != null && data[r][c] instanceof Object && !!data[r][c].m) {\r\n                                data[r][c] = data[r][c].m;\r\n                            } else {\r\n                                if (data[r][c] != null && data[r][c] instanceof Object && !!data[r][c].v) {\r\n                                    data[r][c] = data[r][c].v;\r\n                                } else {\r\n                                    data[r][c] = null;\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            return data;\r\n        },\r\n        isWildcard: function (a, b) {\r\n            //正则匹配通配符: * ? ~* ~?,a目标参数，b通配符\r\n            let _this = this;\r\n            a = a.toString();\r\n            b = b.toString();\r\n            if (_this.isCompareOperator(b).flag) {\r\n                b = _this.isCompareOperator(b).num;\r\n            }\r\n            let str = '';\r\n            for (let i = 0; i < b.length; i++) {\r\n                let v = b.charAt(i);\r\n                if (v == '*') {\r\n                    str += '.*';\r\n                } else if (v == '?') {\r\n                    str += '.';\r\n                } else if (v == '~') {\r\n                    if (b.charAt(i + 1) == '*') {\r\n                        str += '\\\\*';\r\n                        i++;\r\n                    } else if (b.charAt(i + 1) == '?') {\r\n                        str += '\\\\?';\r\n                        i++;\r\n                    } else {\r\n                        str += '~';\r\n                    }\r\n                } else {\r\n                    str += v;\r\n                }\r\n            }\r\n            let reg = new RegExp('^' + str + '$', 'g');\r\n            return !!a.match(reg);\r\n        },\r\n        isCompareOperator: function (str) {\r\n            //判断前一个或者两个字符是否是比较运算符\r\n            str = str.toString();\r\n            let ope = '';    //存放比较运算符\r\n            //存放比较运算符\r\n            let num = '';    //截取比较运算符之后的数字用于实际比较\r\n            //截取比较运算符之后的数字用于实际比较\r\n            let strOne = str.substr(0, 1);\r\n            let strTwo = str.substr(1, 1);\r\n            let flag = false;\r\n            let ret;\r\n            if (strOne == '>') {\r\n                if (strTwo == '=') {\r\n                    ope = str.substr(0, 2);\r\n                    num = str.substr(2);\r\n                    flag = true;\r\n                } else if (strTwo != '=') {\r\n                    ope = str.substr(0, 1);\r\n                    num = str.substr(1);\r\n                    flag = true;\r\n                }\r\n            } else if (strOne == '<') {\r\n                if (strTwo == '=' || strTwo == '>') {\r\n                    ope = str.substr(0, 2);\r\n                    num = str.substr(2);\r\n                    flag = true;\r\n                } else if (strTwo != '=' && strTwo != '>') {\r\n                    ope = str.substr(0, 1);\r\n                    num = str.substr(1);\r\n                    flag = true;\r\n                }\r\n            } else if (strOne == '=' && strTwo != '=') {\r\n                ope = str.substr(0, 1);\r\n                num = str.substr(1);\r\n                flag = true;\r\n            }\r\n            ret = {\r\n                'flag': flag,\r\n                'ope': ope,\r\n                'num': num\r\n            };\r\n            return ret;\r\n        },\r\n        acompareb: function (a, b) {\r\n            //a 与 b比较，b可为含比较符，通配符\r\n            let _this = this;\r\n            let flag = false;\r\n            if (isRealNum(b)) {\r\n                flag = luckysheet_compareWith(a, '==', b);\r\n            } else if (typeof b == 'string') {\r\n                //条件输入字符串，如：\">233\"\r\n                if (b.indexOf('*') != -1 || b.indexOf('?') != -1) {\r\n                    // 正则匹配：输入通配符：\"黑*\",\"白?\",以及\"白?黑*~*\"\r\n                    //通配符函数\r\n                    return _this.isWildcard(a, b);\r\n                } else if (_this.isCompareOperator(b).flag) {\r\n                    //\"黑糖\"\r\n                    let ope = _this.isCompareOperator(b).ope;\r\n                    let num = _this.isCompareOperator(b).num;\r\n                    flag = luckysheet_compareWith(a, ope, num);\r\n                } else {\r\n                    flag = luckysheet_compareWith(a, '==', b);\r\n                }\r\n            }\r\n            return flag;\r\n        },\r\n        compareParams: function (fp, sp, sym) {\r\n            //比较两个字符串或者数字的大小，支持比较对象,暂不支持数组\r\n            let flag = false;    //判断a和b的数据类型\r\n            //判断a和b的数据类型\r\n            let classNameA = toString.call(fp), classNameB = toString.call(sp);\r\n            if (sym == '>' && fp > sp) {\r\n                flag = true;\r\n            } else if (sym == '>=' && fp >= sp) {\r\n                flag = true;\r\n            } else if (sym == '<' && fp < sp) {\r\n                flag = true;\r\n            } else if (sym == '<=' && fp <= sp) {\r\n                flag = true;\r\n            } else if (sym == '=' && fp == sp) {\r\n                flag = true;\r\n            } else if (sym == '<>' && fp != sp) {\r\n                flag = true;\r\n            }    //对象类型比较相等\r\n            //对象类型比较相等\r\n            if (classNameA == '[object Object]' && classNameB == '[object Object]') {\r\n                //获取a和b的属性长度\r\n                let propsA = Object.getOwnPropertyNames(fp), propsB = Object.getOwnPropertyNames(sp);\r\n                if (propsA.length != propsB.length) {\r\n                    return false;\r\n                }\r\n                for (let i = 0; i < propsA.length; i++) {\r\n                    let propName = propsA[i];    //如果对应属性对应值不相等，则返回false\r\n                    //如果对应属性对应值不相等，则返回false\r\n                    if (fp[propName] !== sp[propName]) {\r\n                        return false;\r\n                    }\r\n                }\r\n                return true;\r\n            }    //数组类型\r\n            //数组类型\r\n            if (classNameA == '[object Array]' && classNameB == '[object Array]') {\r\n                if (fp.toString() == sp.toString()) {\r\n                    return true;\r\n                }\r\n                return false;\r\n            }\r\n            return flag;\r\n        },\r\n        parseDecimal: function (num) {\r\n            num = parseFloat(num);\r\n            let d = parseInt(num, 10);\r\n            if (d == 0) {\r\n                return num;\r\n            }\r\n            num = num % d;\r\n            return num;\r\n        },\r\n        getcellrange: function (txt, formulaIndex) {\r\n            if (txt == null || txt.length == 0) {\r\n                return;\r\n            }\r\n            let sheettxt = '', rangetxt = '', sheetIndex = null, sheetdata = null;\r\n            let luckysheetfile = getluckysheetfile();\r\n            if (txt.indexOf('!') > -1) {\r\n                if (txt in this.cellTextToIndexList) {\r\n                    return this.cellTextToIndexList[txt];\r\n                }\r\n                let val = txt.split('!');\r\n                sheettxt = val[0];\r\n                rangetxt = val[1];\r\n                sheettxt = sheettxt.replace(/\\\\'/g, \"'\").replace(/''/g, \"'\");\r\n                if (sheettxt.substr(0, 1) == \"'\" && sheettxt.substr(sheettxt.length - 1, 1) == \"'\") {\r\n                    sheettxt = sheettxt.substring(1, sheettxt.length - 1);\r\n                }\r\n                for (let i in luckysheetfile) {\r\n                    if (sheettxt == luckysheetfile[i].name) {\r\n                        sheetIndex = luckysheetfile[i].index;\r\n                        sheetdata = luckysheetfile[i].data;\r\n                        break;\r\n                    }\r\n                }\r\n            } else {\r\n                let i = formulaIndex;\r\n                if (i == null) {\r\n                    i = Store.currentSheetIndex;\r\n                }\r\n                if (txt + '_' + i in this.cellTextToIndexList) {\r\n                    return this.cellTextToIndexList[txt + '_' + i];\r\n                }\r\n                let index = getSheetIndex(i);\r\n                sheettxt = luckysheetfile[index].name;\r\n                sheetIndex = luckysheetfile[index].index;\r\n                sheetdata = Store.flowdata;\r\n                rangetxt = txt;\r\n            }\r\n            if (rangetxt.indexOf(':') == -1) {\r\n                let row = parseInt(rangetxt.replace(/[^0-9]/g, '')) - 1;\r\n                let col = ABCatNum(rangetxt.replace(/[^A-Za-z]/g, ''));\r\n                if (!isNaN(row) && !isNaN(col)) {\r\n                    let item = {\r\n                        'row': [\r\n                            row,\r\n                            row\r\n                        ],\r\n                        'column': [\r\n                            col,\r\n                            col\r\n                        ],\r\n                        'sheetIndex': sheetIndex\r\n                    };\r\n                    this.addToCellIndexList(txt, item);\r\n                    return item;\r\n                } else {\r\n                    return null;\r\n                }\r\n            } else {\r\n                rangetxt = rangetxt.split(':');\r\n                let row = [], col = [];\r\n                row[0] = parseInt(rangetxt[0].replace(/[^0-9]/g, '')) - 1;\r\n                row[1] = parseInt(rangetxt[1].replace(/[^0-9]/g, '')) - 1;\r\n                if (isNaN(row[0])) {\r\n                    row[0] = 0;\r\n                }\r\n                if (isNaN(row[1])) {\r\n                    row[1] = sheetdata.length - 1;\r\n                }\r\n                if (row[0] > row[1]) {\r\n                    return null;\r\n                }\r\n                col[0] = ABCatNum(rangetxt[0].replace(/[^A-Za-z]/g, ''));\r\n                col[1] = ABCatNum(rangetxt[1].replace(/[^A-Za-z]/g, ''));\r\n                if (isNaN(col[0])) {\r\n                    col[0] = 0;\r\n                }\r\n                if (isNaN(col[1])) {\r\n                    col[1] = sheetdata[0].length - 1;\r\n                }\r\n                if (col[0] > col[1]) {\r\n                    return null;\r\n                }\r\n                let item = {\r\n                    'row': row,\r\n                    'column': col,\r\n                    'sheetIndex': sheetIndex\r\n                };\r\n                this.addToCellIndexList(txt, item);\r\n                return item;\r\n            }\r\n        },\r\n       iscellformat: function (txt) {\r\n            let re_abc = /[abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ][123456789]/;\r\n        },\r\n        iscelldata: function (txt) {\r\n            //判断是否为单元格格式\r\n            let val = txt.split('!'), rangetxt;\r\n            if (val.length > 1) {\r\n                rangetxt = val[1];\r\n            } else {\r\n                rangetxt = val[0];\r\n            }\r\n            let reg_cell = /^(([a-zA-Z]+)|([$][a-zA-Z]+))(([0-9]+)|([$][0-9]+))$/g;    //增加正则判断单元格为字母+数字的格式：如 A1:B3\r\n            //增加正则判断单元格为字母+数字的格式：如 A1:B3\r\n            let reg_cellRange = /^(((([a-zA-Z]+)|([$][a-zA-Z]+))(([0-9]+)|([$][0-9]+)))|((([a-zA-Z]+)|([$][a-zA-Z]+))))$/g;    //增加正则判断单元格为字母+数字或字母的格式：如 A1:B3，A:A\r\n            //增加正则判断单元格为字母+数字或字母的格式：如 A1:B3，A:A\r\n            if (rangetxt.indexOf(':') == -1) {\r\n                let row = parseInt(rangetxt.replace(/[^0-9]/g, '')) - 1;\r\n                let col = ABCatNum(rangetxt.replace(/[^A-Za-z]/g, ''));\r\n                if (!isNaN(row) && !isNaN(col) && rangetxt.toString().match(reg_cell)) {\r\n                    return true;\r\n                } else if (!isNaN(row)) {\r\n                    return false;\r\n                } else if (!isNaN(col)) {\r\n                    return false;\r\n                } else {\r\n                    return false;\r\n                }\r\n            } else {\r\n                reg_cellRange = /^(((([a-zA-Z]+)|([$][a-zA-Z]+))(([0-9]+)|([$][0-9]+)))|((([a-zA-Z]+)|([$][a-zA-Z]+)))|((([0-9]+)|([$][0-9]+s))))$/g;\r\n                rangetxt = rangetxt.split(':');\r\n                let row = [], col = [];\r\n                row[0] = parseInt(rangetxt[0].replace(/[^0-9]/g, '')) - 1;\r\n                row[1] = parseInt(rangetxt[1].replace(/[^0-9]/g, '')) - 1;\r\n                if (row[0] > row[1]) {\r\n                    return false;\r\n                }\r\n                col[0] = ABCatNum(rangetxt[0].replace(/[^A-Za-z]/g, ''));\r\n                col[1] = ABCatNum(rangetxt[1].replace(/[^A-Za-z]/g, ''));\r\n                if (col[0] > col[1]) {\r\n                    return false;\r\n                }\r\n                if (rangetxt[0].toString().match(reg_cellRange) && rangetxt[1].toString().match(reg_cellRange)) {\r\n                    return true;\r\n                } else {\r\n                    return false;\r\n                }\r\n            }\r\n        },\r\n\r\n        getfunctionParam: function (txt) {\r\n            let _this = this;\r\n            if (_this.operatorjson == null) {\r\n                let arr = _this.operator.split('|'), op = {};\r\n                for (let i = 0; i < arr.length; i++) {\r\n                    op[arr[i].toString()] = 1;\r\n                }\r\n                _this.operatorjson = op;\r\n            }\r\n            if (txt.substr(0, 1) == '=') {\r\n                txt = txt.substr(1);\r\n            }\r\n            let funcstack = txt.split('');\r\n            let i = 0, str = '', function_str = '';\r\n            let matchConfig = {\r\n                'bracket': 0,\r\n                'comma': 0,\r\n                'squote': 0,\r\n                'dquote': 0,\r\n                'compare': 0\r\n            };    //bracket 0为运算符括号、1为函数括号\r\n            //bracket 0为运算符括号、1为函数括号\r\n            let fn = null, param = [], bracket = [];\r\n            while (i < funcstack.length) {\r\n                let s = funcstack[i];\r\n                if (s == '(' && matchConfig.dquote == 0) {\r\n                    if (str.length > 0 && bracket.length == 0) {\r\n                        fn = str.toUpperCase();\r\n                        bracket.push(1);\r\n                        str = '';\r\n                    } else if (bracket.length == 0) {\r\n                        //function_str += \"(\";\r\n                        bracket.push(0);\r\n                        str = '';\r\n                    } else {\r\n                        bracket.push(0);\r\n                        str += s;\r\n                    }\r\n                } else if (s == ')' && matchConfig.dquote == 0) {\r\n                    let bt = bracket.pop();\r\n                    if (bracket.length == 0) {\r\n                        param.push(str);\r\n                        str = '';\r\n                    } else {\r\n                        str += s;\r\n                    }\r\n                } else if (s == '\"') {\r\n                    str += '\"';\r\n                    if (matchConfig.dquote > 0) {\r\n                        matchConfig.dquote -= 1;\r\n                        str = '';\r\n                    } else {\r\n                        matchConfig.dquote += 1;\r\n                    }\r\n                } else if (s == ',' && matchConfig.dquote == 0) {\r\n                    if (bracket.length <= 1) {\r\n                        param.push(str);\r\n                        str = '';\r\n                    } else {\r\n                        str += ',';\r\n                    }\r\n                } else if (s in _this.operatorjson && matchConfig.dquote == 0) {\r\n                    let s_next = '';\r\n                    if (i + 1 < funcstack.length) {\r\n                        s_next = funcstack[i + 1];\r\n                    }\r\n                    let p = i - 1, s_pre = null;\r\n                    if (p >= 0) {\r\n                        do {\r\n                            s_pre = funcstack[p--];\r\n                        } while (p >= 0 && s_pre == ' ');\r\n                    }\r\n                    if (!/[^0-9]/.test(s_next) && s == '-' && (s_pre == '(' || s_pre == null || s_pre == ',' || s_pre == ' ' || s_pre in _this.operatorjson)) {\r\n                        if (matchConfig.dquote == 0) {\r\n                            str += $.trim(s);\r\n                        } else {\r\n                            str += s;\r\n                        }\r\n                    } else {\r\n                        function_str = '';\r\n                        str = '';\r\n                    }\r\n                } else {\r\n                    if (matchConfig.dquote == 0) {\r\n                        str += $.trim(s);\r\n                    } else {\r\n                        str += s;\r\n                    }\r\n                }\r\n                i++;\r\n            }\r\n            return {\r\n                'fn': fn,\r\n                'param': param\r\n            };\r\n        },\r\n        calPostfixExpression: function (cal) {\r\n            if (cal.length == 0) {\r\n                return '';\r\n            }\r\n            let stack = [];\r\n            for (let i = cal.length - 1; i >= 0; i--) {\r\n                let c = cal[i];\r\n                if (c in this.operatorjson) {\r\n                    let s2 = stack.pop();\r\n                    let s1 = stack.pop();\r\n                    let str = 'luckysheet_compareWith(' + s1 + \",'\" + c + \"', \" + s2 + ')';\r\n                    stack.push(str);\r\n                } else {\r\n                    stack.push(c);\r\n                }\r\n            }\r\n            if (stack.length > 0) {\r\n                return stack[0];\r\n            } else {\r\n                return '';\r\n            }\r\n        },\r\n        checkBracketNum: function (fp) {\r\n            let bra_l = fp.match(/\\(/g), bra_r = fp.match(/\\)/g), bra_tl_txt = fp.match(/(['\"])(?:(?!\\1).)*?\\1/g), bra_tr_txt = fp.match(/(['\"])(?:(?!\\1).)*?\\1/g);\r\n            let bra_l_len = 0, bra_r_len = 0;\r\n            if (bra_l != null) {\r\n                bra_l_len += bra_l.length;\r\n            }\r\n            if (bra_r != null) {\r\n                bra_r_len += bra_r.length;\r\n            }\r\n            let bra_tl_len = 0, bra_tr_len = 0;\r\n            if (bra_tl_txt != null) {\r\n                for (let i = 0; i < bra_tl_txt.length; i++) {\r\n                    let bra_tl = bra_tl_txt[i].match(/\\(/g);\r\n                    if (bra_tl != null) {\r\n                        bra_tl_len += bra_tl.length;\r\n                    }\r\n                }\r\n            }\r\n            if (bra_tr_txt != null) {\r\n                for (let i = 0; i < bra_tr_txt.length; i++) {\r\n                    let bra_tr = bra_tr_txt[i].match(/\\)/g);\r\n                    if (bra_tr != null) {\r\n                        bra_tr_len += bra_tr.length;\r\n                    }\r\n                }\r\n            }\r\n            bra_l_len -= bra_tl_len;\r\n            bra_r_len -= bra_tr_len;\r\n            if (bra_l_len != bra_r_len) {\r\n                return false;\r\n            } else {\r\n                return true;\r\n            }\r\n        },\r\n        operatorPriority: {\r\n            '^': 0,\r\n            '%': 1,\r\n            '*': 1,\r\n            '/': 1,\r\n            '+': 2,\r\n            '-': 2\r\n        },\r\n        functionParserExe: function (txt) {\r\n            let _this = this;    // let txt1 = txt.toUpperCase();\r\n                                 // return this.functionParser(txt, function(c){\r\n                                 //     _this.addToCellList(txt, c);\r\n                                 // });\r\n            // let txt1 = txt.toUpperCase();\r\n            // return this.functionParser(txt, function(c){\r\n            //     _this.addToCellList(txt, c);\r\n            // });\r\n            return this.functionParser(txt);\r\n        },\r\n        functionParser: function (txt, cellRangeFunction) {\r\n            let _this = this;\r\n            if (_this.operatorjson == null) {\r\n                let arr = _this.operator.split('|'), op = {};\r\n                for (let i = 0; i < arr.length; i++) {\r\n                    op[arr[i].toString()] = 1;\r\n                }\r\n                _this.operatorjson = op;\r\n            }\r\n            if (txt == null) {\r\n                return '';\r\n            }\r\n            if (txt.substr(0, 2) == '=+') {\r\n                txt = txt.substr(2);\r\n            } else if (txt.substr(0, 1) == '=') {\r\n                txt = txt.substr(1);\r\n            }\r\n            let funcstack = txt.split('');\r\n            let i = 0, str = '', function_str = '';\r\n            let matchConfig = {\r\n                'bracket': 0,\r\n                'comma': 0,\r\n                'squote': 0,\r\n                'dquote': 0,\r\n                'compare': 0,\r\n                'braces': 0\r\n            };    //=(sum(b1:c10)+10)*5-100\r\n                  //=MAX(B1:C10,10)*5-100\r\n                  // =(sum(max(B1:C10,10)*5-100,((1+1)*2+5)/2,10)+count(B1:C10,10*5-100))*5-100\r\n                  //=SUM(MAX(B1:C10,10)*5-100,((1+1)*2+5)/2,10)+COUNT(B1:C10,10*5-100)\r\n                  //=SUM(MAX(B1:C10,10)*5-100,((1+1)*2+5)/2,10)\r\n                  //=SUM(10,((1+1)*2+5)/2,10)\r\n                  //=SUM(MAX(B1:C10,10)*5-100)\r\n                  //=IFERROR(IF(ROW()-ROW($G$3)=1,$F4+$D4,SUM($D1:INDEX($D$4:$D$9,1,1),$F1:INDEX($F$4:$F$9,1,1))), \"\")\r\n                  //=IFERROR(IF(ROW()-ROW($G$3)=1,$F4+$D4,SUM(INDEX($D$4:$D$9,1,1):$D4,INDEX($F$4:$F$9,1,1):$F4)), \"\")\r\n                  //=SUM(I$4:OFFSET(I10,0,0))\r\n                  //bracket 0为运算符括号、1为函数括号\r\n            //=(sum(b1:c10)+10)*5-100\r\n            //=MAX(B1:C10,10)*5-100\r\n            // =(sum(max(B1:C10,10)*5-100,((1+1)*2+5)/2,10)+count(B1:C10,10*5-100))*5-100\r\n            //=SUM(MAX(B1:C10,10)*5-100,((1+1)*2+5)/2,10)+COUNT(B1:C10,10*5-100)\r\n            //=SUM(MAX(B1:C10,10)*5-100,((1+1)*2+5)/2,10)\r\n            //=SUM(10,((1+1)*2+5)/2,10)\r\n            //=SUM(MAX(B1:C10,10)*5-100)\r\n            //=IFERROR(IF(ROW()-ROW($G$3)=1,$F4+$D4,SUM($D1:INDEX($D$4:$D$9,1,1),$F1:INDEX($F$4:$F$9,1,1))), \"\")\r\n            //=IFERROR(IF(ROW()-ROW($G$3)=1,$F4+$D4,SUM(INDEX($D$4:$D$9,1,1):$D4,INDEX($F$4:$F$9,1,1):$F4)), \"\")\r\n            //=SUM(I$4:OFFSET(I10,0,0))\r\n            //bracket 0为运算符括号、1为函数括号\r\n            let cal1 = [], cal2 = [], bracket = [];\r\n            let firstSQ = -1;\r\n            while (i < funcstack.length) {\r\n                let s = funcstack[i];\r\n                if (s == '(' && matchConfig.squote == 0 && matchConfig.dquote == 0 && matchConfig.braces == 0) {\r\n                    if (str.length > 0 && bracket.length == 0) {\r\n                        str = str.toUpperCase();\r\n                        if (str.indexOf(':') > -1) {\r\n                            let funcArray = str.split(':');\r\n                            function_str += \"luckysheet_getSpecialReference(true,'\" + $.trim(funcArray[0]).replace(/'/g, \"\\\\'\") + \"', luckysheet_function.\" + funcArray[1] + '.f(#lucky#';\r\n                        } else {\r\n                            function_str += 'luckysheet_function.' + str + '.f(';\r\n                        }\r\n                        bracket.push(1);\r\n                        str = '';\r\n                    } else if (bracket.length == 0) {\r\n                        function_str += '(';\r\n                        bracket.push(0);\r\n                        str = '';\r\n                    } else {\r\n                        bracket.push(0);\r\n                        str += s;\r\n                    }\r\n                } else if (s == ')' && matchConfig.squote == 0 && matchConfig.dquote == 0 && matchConfig.braces == 0) {\r\n                    let bt = bracket.pop();\r\n                    if (bracket.length == 0) {\r\n                        let functionS = _this.functionParser(str, cellRangeFunction);\r\n                        if (functionS.indexOf('#lucky#') > -1) {\r\n                            functionS = functionS.replace(/#lucky#/g, '') + ')';\r\n                        }\r\n                        function_str += functionS + ')';\r\n                        str = '';\r\n                    } else {\r\n                        str += s;\r\n                    }\r\n                } else if (s == '{' && matchConfig.squote == 0 && matchConfig.dquote == 0) {\r\n                    str += '{';\r\n                    matchConfig.braces += 1;\r\n                } else if (s == '}' && matchConfig.squote == 0 && matchConfig.dquote == 0) {\r\n                    str += '}';\r\n                    matchConfig.braces -= 1;\r\n                } else if (s == '\"' && matchConfig.squote == 0) {\r\n                    if (matchConfig.dquote > 0) {\r\n                        //如果是\"\"代表着输出\"\r\n                        if (i < funcstack.length - 1 && funcstack[i + 1] == '\"') {\r\n                            i++;\r\n                            str += '\\x7F';    //用非打印控制字符DEL替换一下\"\"\r\n                        } else\r\n                            //用非打印控制字符DEL替换一下\"\"\r\n                            {\r\n                                matchConfig.dquote -= 1;\r\n                                str += '\"';\r\n                            }\r\n                    } else {\r\n                        matchConfig.dquote += 1;\r\n                        str += '\"';\r\n                    }\r\n                } else if (s == \"'\" && matchConfig.dquote == 0) {\r\n                    str += \"'\";\r\n                    if (matchConfig.squote > 0) {\r\n                        if (firstSQ == i - 1)\r\n                            //配对的单引号后第一个字符不能是单引号\r\n                            {\r\n                                return '';\r\n                            }    //如果是''代表着输出'\r\n                        //如果是''代表着输出'\r\n                        if (i < funcstack.length - 1 && funcstack[i + 1] == \"'\") {\r\n                            i++;\r\n                            str += \"'\";\r\n                        } else {\r\n                            //如果下一个字符不是'代表单引号结束\r\n                            if (funcstack[i - 1] == \"'\") {\r\n                                //配对的单引号后最后一个字符不能是单引号\r\n                                return '';\r\n                            } else {\r\n                                matchConfig.squote -= 1;\r\n                            }\r\n                        }\r\n                    } else {\r\n                        matchConfig.squote += 1;\r\n                        firstSQ = i;\r\n                    }\r\n                } else if (s == ',' && matchConfig.squote == 0 && matchConfig.dquote == 0 && matchConfig.braces == 0) {\r\n                    if (bracket.length <= 1) {\r\n                        let functionS = _this.functionParser(str, cellRangeFunction);\r\n                        if (functionS.indexOf('#lucky#') > -1) {\r\n                            functionS = functionS.replace(/#lucky#/g, '') + ')';\r\n                        }\r\n                        function_str += functionS + ',';\r\n                        str = '';\r\n                    } else {\r\n                        str += ',';\r\n                    }\r\n                } else if (s in _this.operatorjson && matchConfig.squote == 0 && matchConfig.dquote == 0 && matchConfig.braces == 0) {\r\n                    let s_next = '';\r\n                    let op = _this.operatorPriority;\r\n                    if (i + 1 < funcstack.length) {\r\n                        s_next = funcstack[i + 1];\r\n                    }\r\n                    if (s + s_next in _this.operatorjson) {\r\n                        if (bracket.length == 0) {\r\n                            if ($.trim(str).length > 0) {\r\n                                cal2.unshift(_this.functionParser($.trim(str), cellRangeFunction));\r\n                            } else if ($.trim(function_str).length > 0) {\r\n                                cal2.unshift($.trim(function_str));\r\n                            }\r\n                            if (cal1[0] in _this.operatorjson) {\r\n                                let stackCeilPri = op[cal1[0]];\r\n                                while (cal1.length > 0 && stackCeilPri != null) {\r\n                                    cal2.unshift(cal1.shift());\r\n                                    stackCeilPri = op[cal1[0]];\r\n                                }\r\n                            }\r\n                            cal1.unshift(s + s_next);\r\n                            function_str = '';\r\n                            str = '';\r\n                        } else {\r\n                            str += s + s_next;\r\n                        }\r\n                        i++;\r\n                    } else {\r\n                        if (bracket.length == 0) {\r\n                            if ($.trim(str).length > 0) {\r\n                                cal2.unshift(_this.functionParser($.trim(str), cellRangeFunction));\r\n                            } else if ($.trim(function_str).length > 0) {\r\n                                cal2.unshift($.trim(function_str));\r\n                            }\r\n                            if (cal1[0] in _this.operatorjson) {\r\n                                let stackCeilPri = op[cal1[0]];\r\n                                stackCeilPri = stackCeilPri == null ? 1000 : stackCeilPri;\r\n                                let sPri = op[s];\r\n                                sPri = sPri == null ? 1000 : sPri;\r\n                                while (cal1.length > 0 && sPri >= stackCeilPri) {\r\n                                    cal2.unshift(cal1.shift());\r\n                                    stackCeilPri = op[cal1[0]];\r\n                                    stackCeilPri = stackCeilPri == null ? 1000 : stackCeilPri;\r\n                                }\r\n                            }\r\n                            cal1.unshift(s);\r\n                            function_str = '';\r\n                            str = '';\r\n                        } else {\r\n                            str += s;\r\n                        }\r\n                    }\r\n                } else {\r\n                    if (matchConfig.dquote == 0 && matchConfig.squote == 0) {\r\n                        // str += $.trim(s);\r\n                        str += s;    //Do not use $.trim(s). When obtaining the worksheet name that contains spaces, you should keep the spaces\r\n                    } else\r\n                        //Do not use $.trim(s). When obtaining the worksheet name that contains spaces, you should keep the spaces\r\n                        {\r\n                            str += s;\r\n                        }\r\n                }\r\n                if (i == funcstack.length - 1) {\r\n                    let endstr = '';\r\n                    let str_nb = $.trim(str).replace(/'/g, \"\\\\'\");\r\n                    if (_this.iscelldata(str_nb) && str_nb.substr(0, 1) != ':') {\r\n                        endstr = \"luckysheet_getcelldata('\" + str_nb + \"')\";\r\n                        if (typeof cellRangeFunction == 'function') {\r\n                            cellRangeFunction(str_nb);\r\n                        }\r\n                    } else if (str_nb.substr(0, 1) == ':') {\r\n                        str_nb = str_nb.substr(1);\r\n                        if (_this.iscelldata(str_nb)) {\r\n                            endstr = 'luckysheet_getSpecialReference(false,' + function_str + \",'\" + str_nb + \"')\";\r\n                        }\r\n                    } else {\r\n                        str = $.trim(str);\r\n                        let regx = /{.*?}/;\r\n                        if (regx.test(str) && str.substr(0, 1) != '\"' && str.substr(str.length - 1, 1) != '\"') {\r\n                            let arraytxt = regx.exec(str)[0];\r\n                            let arraystart = str.search(regx);\r\n                            let alltxt = '';\r\n                            if (arraystart > 0) {\r\n                                endstr += str.substr(0, arraystart);\r\n                            }\r\n                            endstr += \"luckysheet_getarraydata('\" + arraytxt + \"')\";\r\n                            if (arraystart + arraytxt.length < str.length) {\r\n                                endstr += str.substr(arraystart + arraytxt.length, str.length);\r\n                            }\r\n                        } else {\r\n                            endstr = str;\r\n                        }\r\n                    }\r\n                    if (endstr.length > 0) {\r\n                        cal2.unshift(endstr);\r\n                    }\r\n                    if (cal1.length > 0) {\r\n                        if (function_str.length > 0) {\r\n                            cal2.unshift(function_str);\r\n                            function_str = '';\r\n                        }\r\n                        while (cal1.length > 0) {\r\n                            cal2.unshift(cal1.shift());\r\n                        }\r\n                    }\r\n                    if (cal2.length > 0) {\r\n                        function_str = _this.calPostfixExpression(cal2);\r\n                    } else {\r\n                        function_str += endstr;\r\n                    }\r\n                }\r\n                i++;\r\n            }    // console.log(function_str);\r\n            // console.log(function_str);\r\n            return function_str;\r\n        },\r\n        insertUpdateDynamicArray: function (dynamicArrayItem) {\r\n            let r = dynamicArrayItem.r, c = dynamicArrayItem.c, index = dynamicArrayItem.index;\r\n            if (index == null) {\r\n                index = Store.currentSheetIndex;\r\n            }\r\n            let luckysheetfile = getluckysheetfile();\r\n            let file = luckysheetfile[getSheetIndex(index)];\r\n            let dynamicArray = file.dynamicArray;\r\n            if (dynamicArray == null) {\r\n                dynamicArray = [];\r\n            }\r\n            for (let i = 0; i < dynamicArray.length; i++) {\r\n                let calc = dynamicArray[i];\r\n                if (calc.r == r && calc.c == c && calc.index == index) {\r\n                    calc.data = dynamicArrayItem.data;\r\n                    calc.f = dynamicArrayItem.f;\r\n                    return dynamicArray;\r\n                }\r\n            }\r\n            dynamicArray.push(dynamicArrayItem);\r\n            return dynamicArray;\r\n        },\r\n        addFunctionGroup: function (r, c, func, index) {\r\n            if (index == null) {\r\n                index = Store.currentSheetIndex;\r\n            }\r\n            let luckysheetfile = getluckysheetfile();\r\n            let file = luckysheetfile[getSheetIndex(index)];\r\n            if (file.calcChain == null) {\r\n                file.calcChain = [];\r\n            }\r\n            let cc = {\r\n                'r': r,\r\n                'c': c,\r\n                'index': index,\r\n                'func': func\r\n            };\r\n            file.calcChain.push(cc);\r\n            Store.saveParam('fc', index, JSON.stringify(cc), {\r\n                'op': 'add',\r\n                'pos': file.calcChain.length - 1\r\n            });\r\n            setluckysheetfile(luckysheetfile);\r\n        },\r\n        getAllFunctionGroup: function () {\r\n            let luckysheetfile = getluckysheetfile();\r\n            let ret = [];\r\n            for (let i = 0; i < luckysheetfile.length; i++) {\r\n                let file = luckysheetfile[i];\r\n                let calcChain = file.calcChain;    /* 备注：再次加载表格获取的数据可能是JSON字符串格式(需要进行发序列化处理) */\r\n                /* 备注：再次加载表格获取的数据可能是JSON字符串格式(需要进行发序列化处理) */\r\n                if (calcChain) {\r\n                    let tempCalcChain = [];\r\n                    calcChain.forEach((item, idx) => {\r\n                        if (typeof item === 'string') {\r\n                            tempCalcChain.push(JSON.parse(item));\r\n                        } else {\r\n                            tempCalcChain.push(item);\r\n                        }\r\n                    });\r\n                    calcChain = file.calcChain = tempCalcChain;\r\n                }\r\n                let dynamicArray_compute = file.dynamicArray_compute;\r\n                if (calcChain == null) {\r\n                    calcChain = [];\r\n                }\r\n                if (dynamicArray_compute == null) {\r\n                    dynamicArray_compute = [];\r\n                }\r\n                ret = ret.concat(calcChain);\r\n                for (let i = 0; i < dynamicArray_compute.length; i++) {\r\n                    let d = dynamicArray_compute[0];\r\n                    ret.push({\r\n                        r: d.r,\r\n                        c: d.c,\r\n                        index: d.index\r\n                    });\r\n                }\r\n            }\r\n            return ret;\r\n        },\r\n        getFunctionGroup: function (index) {\r\n            if (index == null) {\r\n                index = Store.currentSheetIndex;\r\n            }\r\n            let luckysheetfile = getluckysheetfile();\r\n            let file = luckysheetfile[getSheetIndex(index)];\r\n            if (file.calcChain == null) {\r\n                return [];\r\n            }\r\n            return file.calcChain;\r\n        },\r\n        updateFunctionGroup: function (r, c, index) {\r\n            if (index == null) {\r\n                index = Store.currentSheetIndex;\r\n            }\r\n            let luckysheetfile = getluckysheetfile();\r\n            let file = luckysheetfile[getSheetIndex(index)];\r\n            let calcChain = file.calcChain;\r\n            if (calcChain != null) {\r\n                for (let i = 0; i < calcChain.length; i++) {\r\n                    let calc = calcChain[i];\r\n                    if (calc.r == r && calc.c == c && calc.index == index) {\r\n                        Store.saveParam('fc', index, JSON.stringify(calc), {\r\n                            'op': 'update',\r\n                            'pos': i\r\n                        });\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n            setluckysheetfile(luckysheetfile);\r\n        },\r\n        insertUpdateFunctionGroup: function (r, c, index) {\r\n            if (index == null) {\r\n                index = Store.currentSheetIndex;\r\n            } \r\n            // let func = getcellFormula(r, c, index);\r\n            // if (func == null || func.length==0) {\r\n            //     this.delFunctionGroup(r, c, index);\r\n            //     return;\r\n            // }\r\n            let luckysheetfile = getluckysheetfile();\r\n            let file = luckysheetfile[getSheetIndex(index)];\r\n            let calcChain = file.calcChain;\r\n            if (calcChain == null) {\r\n                calcChain = [];\r\n            }\r\n            for (let i = 0; i < calcChain.length; i++) {\r\n                let calc = calcChain[i];\r\n                if (calc.r == r && calc.c == c && calc.index == index) {\r\n                    Store.saveParam('fc', index, JSON.stringify(calc), {\r\n                        'op': 'update',\r\n                        'pos': i\r\n                    });\r\n                    return;\r\n                }\r\n            }\r\n            let cc = {\r\n                'r': r,\r\n                'c': c,\r\n                'index': index\r\n            };\r\n            calcChain.push(cc);\r\n            file.calcChain = calcChain;\r\n            Store.saveParam('fc', index, JSON.stringify(cc), {\r\n                'op': 'add',\r\n                'pos': file.calcChain.length - 1\r\n            });\r\n            setluckysheetfile(luckysheetfile);\r\n        },\r\n        isFunctionRangeSave: false,\r\n        isFunctionRangeSimple: function (txt, r, c, index, dynamicArray_compute) {\r\n            if (txt == null || txt.length == 0) {\r\n                return;\r\n            }\r\n            let txtArray = txt.split(/==|!=|<>|<=|>=|[,()=+-\\/*%&^><]/g);\r\n            if (txtArray.length > 0) {\r\n                for (let i = 0; i < txtArray.length; i++) {\r\n                    let t = txtArray[i];\r\n                    if (t.length <= 1) {\r\n                        continue;\r\n                    }\r\n                    if (t.substr(0, 1) == '\"' && t.substr(t.length - 1, 1) == '\"') {\r\n                        continue;\r\n                    }\r\n                    this.isFunctionRangeSaveChange(t, r, c, index, dynamicArray_compute);\r\n                }\r\n            }\r\n        },\r\n        isFunctionRangeSimple1: function (txt, r, c, index, dynamicArray_compute) {\r\n            let _this = this;\r\n            if (_this.operatorjson == null) {\r\n                let arr = _this.operator.split('|'), op = {};\r\n                for (let i = 0; i < arr.length; i++) {\r\n                    op[arr[i].toString()] = 1;\r\n                }\r\n                _this.operatorjson = op;\r\n            }\r\n            if (txt.substr(0, 1) == '=') {\r\n                txt = txt.substr(1);\r\n            }\r\n            let funcstack = txt.split('');\r\n            let i = 0, str = '', function_str = '', ispassby = true;\r\n            let matchConfig = {\r\n                'bracket': 0,\r\n                'comma': 0,\r\n                'squote': 0,\r\n                'dquote': 0\r\n            };\r\n            let luckysheetfile = getluckysheetfile();\r\n            while (i < funcstack.length) {\r\n                let s = funcstack[i];\r\n                if (s == '(' && matchConfig.dquote == 0) {\r\n                    matchConfig.bracket += 1;\r\n                    if (str.length > 0) {\r\n                        function_str += 'luckysheet_function.' + str.toUpperCase() + '.f(';\r\n                    } else {\r\n                        function_str += '(';\r\n                    }\r\n                    str = '';\r\n                } else if (s == ')' && matchConfig.dquote == 0) {\r\n                    matchConfig.bracket -= 1;\r\n                    function_str += _this.isFunctionRangeSimple(str, r, c, index, dynamicArray_compute) + ')';\r\n                    str = '';\r\n                } else if (s == ',' && matchConfig.dquote == 0) {\r\n                    //matchConfig.comma += 1;\r\n                    function_str += _this.isFunctionRangeSimple(str, r, c, index, dynamicArray_compute) + ',';\r\n                    str = '';\r\n                } else if (s in _this.operatorjson && matchConfig.dquote == 0) {\r\n                    let s_next = '';\r\n                    if (i + 1 < funcstack.length) {\r\n                        s_next = funcstack[i + 1];\r\n                    }\r\n                    if (s + s_next in _this.operatorjson) {\r\n                        if (str.length > 0) {\r\n                            function_str += _this.isFunctionRangeSimple(str, r, c, index, dynamicArray_compute) + s + s_next;\r\n                            str = '';\r\n                        } else {\r\n                            function_str += s + s_next;\r\n                        }\r\n                        i++;\r\n                    } else {\r\n                        if (str.length > 0) {\r\n                            function_str += _this.isFunctionRangeSimple(str, r, c, index, dynamicArray_compute) + s;\r\n                            str = '';\r\n                        } else {\r\n                            function_str += s;\r\n                        }\r\n                    }\r\n                } else {\r\n                    str += s;\r\n                }\r\n                if (i == funcstack.length - 1) {\r\n                    if (_this.iscelldata($.trim(str))) {\r\n                        _this.isFunctionRangeSaveChange(str, r, c, index, dynamicArray_compute);    // if (r != null && c != null) {\r\n                                                                                                    //     let range = _this.getcellrange($.trim(str));\r\n                                                                                                    //     let row = range.row,\r\n                                                                                                    //         col = range.column;\r\n                                                                                                    //     if ((r + \"_\" + c) in dynamicArray_compute) {\r\n                                                                                                    //         let isd_range = false;\r\n                                                                                                    //         for (let d_r = row[0]; d_r <= row[1]; d_r++) {\r\n                                                                                                    //             for (let d_c = col[0]; d_c <= col[1]; d_c++) {\r\n                                                                                                    //                 if ((d_r + \"_\" + d_c) in dynamicArray_compute && dynamicArray_compute[d_r + \"_\" + d_c].r == r && dynamicArray_compute[d_r + \"_\" + d_c].c == c) {\r\n                                                                                                    //                     isd_range = true;\r\n                                                                                                    //                 }\r\n                                                                                                    //             }\r\n                                                                                                    //         }\r\n                                                                                                    //         if (isd_range) {\r\n                                                                                                    //             _this.isFunctionRangeSave = _this.isFunctionRangeSave || true;\r\n                                                                                                    //         }\r\n                                                                                                    //         else {\r\n                                                                                                    //             _this.isFunctionRangeSave = _this.isFunctionRangeSave || false;\r\n                                                                                                    //         }\r\n                                                                                                    //     }\r\n                                                                                                    //     else {\r\n                                                                                                    //         if (r >= row[0] && r <= row[1] && c >= col[0] && c <= col[1]) {\r\n                                                                                                    //             _this.isFunctionRangeSave = _this.isFunctionRangeSave || true;\r\n                                                                                                    //         }\r\n                                                                                                    //         else {\r\n                                                                                                    //             _this.isFunctionRangeSave = _this.isFunctionRangeSave || false;\r\n                                                                                                    //         }\r\n                                                                                                    //     }\r\n                                                                                                    // }\r\n                                                                                                    // else {\r\n                                                                                                    //     let sheetlen = $.trim(str).split(\"!\");\r\n                                                                                                    //     if (sheetlen.length > 1) {\r\n                                                                                                    //         _this.isFunctionRangeSave = _this.isFunctionRangeSave || true;\r\n                                                                                                    //     }\r\n                                                                                                    //     else {\r\n                                                                                                    //         _this.isFunctionRangeSave = _this.isFunctionRangeSave || false;\r\n                                                                                                    //     }\r\n                                                                                                    // }\r\n                    } else {\r\n                    }\r\n                }\r\n                i++;\r\n            }    //console.log(function_str);\r\n            //console.log(function_str);\r\n            return function_str;\r\n        },\r\n        isFunctionRangeSelect: function (txt, r, c, index, dynamicArray_compute) {\r\n            if (txt == null || txt == '') {\r\n                return;\r\n            }\r\n            if (index == null) {\r\n                index = Store.currentSheetIndex;\r\n            }\r\n            if (dynamicArray_compute == null) {\r\n                dynamicArray_compute = {};\r\n            }\r\n            let _this = this;\r\n            let txt1 = txt.toUpperCase();\r\n            let isOffsetFunc = txt1.indexOf('INDIRECT(') > -1 || txt1.indexOf('OFFSET(') > -1 || txt1.indexOf('INDEX(') > -1;\r\n            if (txt in this.formulaContainCellList) {\r\n                let cellList = this.formulaContainCellList[txt];\r\n                if (isOffsetFunc) {\r\n                    let isoff = cellList['__LuckyisOff__'];\r\n                    if (isoff == true) {\r\n                        for (let cellStr in cellList) {\r\n                            if (cellStr == '__LuckyisOff__') {\r\n                                continue;\r\n                            }\r\n                            this.isFunctionRangeSaveChange(cellStr, r, c, index, dynamicArray_compute);\r\n                        }\r\n                    } else {\r\n                        this.isFunctionRange(txt, r, c, index, dynamicArray_compute, function (str) {\r\n                            _this.addToCellList(txt, str);\r\n                        });\r\n                        cellList['__LuckyisOff__'] = true;\r\n                    }\r\n                } else {\r\n                    for (let cellStr in cellList) {\r\n                        if (cellStr == '__LuckyisOff__') {\r\n                            continue;\r\n                        }\r\n                        this.isFunctionRangeSaveChange(cellStr, r, c, index, dynamicArray_compute);\r\n                    }\r\n                }\r\n                return;\r\n            }\r\n            if (isOffsetFunc) {\r\n                this.isFunctionRange(txt, r, c, index, dynamicArray_compute);\r\n            } else {\r\n                this.isFunctionRangeSimple(txt, r, c, index, dynamicArray_compute);\r\n            }\r\n        },\r\n        isFunctionRange: function (txt, r, c, index, dynamicArray_compute, cellRangeFunction) {\r\n            let _this = this;\r\n            if (_this.operatorjson == null) {\r\n                let arr = _this.operator.split('|'), op = {};\r\n                for (let i = 0; i < arr.length; i++) {\r\n                    op[arr[i].toString()] = 1;\r\n                }\r\n                _this.operatorjson = op;\r\n            }\r\n            if (txt.substr(0, 1) == '=') {\r\n                txt = txt.substr(1);\r\n            }\r\n            let funcstack = txt.split('');\r\n            let i = 0, str = '', function_str = '', ispassby = true;\r\n            let matchConfig = {\r\n                'bracket': 0,\r\n                'comma': 0,\r\n                'squote': 0,\r\n                'dquote': 0,\r\n                'compare': 0,\r\n                'braces': 0\r\n            };    // let luckysheetfile = getluckysheetfile();\r\n                  // let dynamicArray_compute = luckysheetfile[getSheetIndex(Store.currentSheetIndex)][\"dynamicArray_compute\"] == null ? {} : luckysheetfile[getSheetIndex(Store.currentSheetIndex)][\"dynamicArray_compute\"];\r\n                  //bracket 0为运算符括号、1为函数括号\r\n            // let luckysheetfile = getluckysheetfile();\r\n            // let dynamicArray_compute = luckysheetfile[getSheetIndex(Store.currentSheetIndex)][\"dynamicArray_compute\"] == null ? {} : luckysheetfile[getSheetIndex(Store.currentSheetIndex)][\"dynamicArray_compute\"];\r\n            //bracket 0为运算符括号、1为函数括号\r\n            let cal1 = [], cal2 = [], bracket = [];\r\n            let firstSQ = -1;\r\n            while (i < funcstack.length) {\r\n                let s = funcstack[i];\r\n                if (s == '(' && matchConfig.squote == 0 && matchConfig.dquote == 0 && matchConfig.braces == 0) {\r\n                    if (str.length > 0 && bracket.length == 0) {\r\n                        str = str.toUpperCase();\r\n                        if (str.indexOf(':') > -1) {\r\n                            let funcArray = str.split(':');\r\n                            function_str += \"luckysheet_getSpecialReference(true,'\" + $.trim(funcArray[0]).replace(/'/g, \"\\\\'\") + \"', luckysheet_function.\" + funcArray[1] + '.f(#lucky#';\r\n                        } else {\r\n                            function_str += 'luckysheet_function.' + str + '.f(';\r\n                        }\r\n                        bracket.push(1);\r\n                        str = '';\r\n                    } else if (bracket.length == 0) {\r\n                        function_str += '(';\r\n                        bracket.push(0);\r\n                        str = '';\r\n                    } else {\r\n                        bracket.push(0);\r\n                        str += s;\r\n                    }\r\n                } else if (s == ')' && matchConfig.squote == 0 && matchConfig.dquote == 0 && matchConfig.braces == 0) {\r\n                    let bt = bracket.pop();\r\n                    if (bracket.length == 0) {\r\n                        // function_str += _this.isFunctionRange(str,r,c, index,dynamicArray_compute,cellRangeFunction) + \")\";\r\n                        // str = \"\";\r\n                        let functionS = _this.isFunctionRange(str, r, c, index, dynamicArray_compute, cellRangeFunction);\r\n                        if (functionS.indexOf('#lucky#') > -1) {\r\n                            functionS = functionS.replace(/#lucky#/g, '') + ')';\r\n                        }\r\n                        function_str += functionS + ')';\r\n                        str = '';\r\n                    } else {\r\n                        str += s;\r\n                    }\r\n                } else if (s == '{' && matchConfig.squote == 0 && matchConfig.dquote == 0) {\r\n                    str += '{';\r\n                    matchConfig.braces += 1;\r\n                } else if (s == '}' && matchConfig.squote == 0 && matchConfig.dquote == 0) {\r\n                    str += '}';\r\n                    matchConfig.braces -= 1;\r\n                } else if (s == '\"' && matchConfig.squote == 0) {\r\n                    if (matchConfig.dquote > 0) {\r\n                        //如果是\"\"代表着输出\"\r\n                        if (i < funcstack.length - 1 && funcstack[i + 1] == '\"') {\r\n                            i++;\r\n                            str += '\\x7F';    //用DEL替换一下\"\"\r\n                        } else\r\n                            //用DEL替换一下\"\"\r\n                            {\r\n                                matchConfig.dquote -= 1;\r\n                                str += '\"';\r\n                            }\r\n                    } else {\r\n                        matchConfig.dquote += 1;\r\n                        str += '\"';\r\n                    }\r\n                } else if (s == \"'\" && matchConfig.dquote == 0) {\r\n                    str += \"'\";\r\n                    if (matchConfig.squote > 0) {\r\n                        //if (firstSQ == i - 1)//配对的单引号后第一个字符不能是单引号\r\n                        //{\r\n                        //    代码到了此处应该是公式错误\r\n                        //}\r\n                        //如果是''代表着输出'\r\n                        if (i < funcstack.length - 1 && funcstack[i + 1] == \"'\") {\r\n                            i++;\r\n                            str += \"'\";\r\n                        } else {\r\n                            //如果下一个字符不是'代表单引号结束\r\n                            //if (funcstack[i - 1] == \"'\") {//配对的单引号后最后一个字符不能是单引号\r\n                            //    代码到了此处应该是公式错误\r\n                            //} else {\r\n                            matchConfig.squote -= 1;    //}\r\n                        }\r\n                    } else\r\n                        //}\r\n                        {\r\n                            matchConfig.squote += 1;\r\n                            firstSQ = i;\r\n                        }\r\n                } else if (s == ',' && matchConfig.squote == 0 && matchConfig.dquote == 0 && matchConfig.braces == 0) {\r\n                    if (bracket.length <= 1) {\r\n                        // function_str += _this.isFunctionRange(str, r, c, index,dynamicArray_compute,cellRangeFunction) + \",\";\r\n                        // str = \"\";\r\n                        let functionS = _this.isFunctionRange(str, r, c, index, dynamicArray_compute, cellRangeFunction);\r\n                        if (functionS.indexOf('#lucky#') > -1) {\r\n                            functionS = functionS.replace(/#lucky#/g, '') + ')';\r\n                        }\r\n                        function_str += functionS + ',';\r\n                        str = '';\r\n                    } else {\r\n                        str += ',';\r\n                    }\r\n                } else if (s in _this.operatorjson && matchConfig.squote == 0 && matchConfig.dquote == 0 && matchConfig.braces == 0) {\r\n                    let s_next = '';\r\n                    let op = _this.operatorPriority;\r\n                    if (i + 1 < funcstack.length) {\r\n                        s_next = funcstack[i + 1];\r\n                    }\r\n                    if (s + s_next in _this.operatorjson) {\r\n                        if (bracket.length == 0) {\r\n                            if ($.trim(str).length > 0) {\r\n                                cal2.unshift(_this.isFunctionRange($.trim(str), r, c, index, dynamicArray_compute, cellRangeFunction));\r\n                            } else if ($.trim(function_str).length > 0) {\r\n                                cal2.unshift($.trim(function_str));\r\n                            }\r\n                            if (cal1[0] in _this.operatorjson) {\r\n                                let stackCeilPri = op[cal1[0]];\r\n                                while (cal1.length > 0 && stackCeilPri != null) {\r\n                                    cal2.unshift(cal1.shift());\r\n                                    stackCeilPri = op[cal1[0]];\r\n                                }\r\n                            }\r\n                            cal1.unshift(s + s_next);\r\n                            function_str = '';\r\n                            str = '';\r\n                        } else {\r\n                            str += s + s_next;\r\n                        }\r\n                        i++;\r\n                    } else {\r\n                        if (bracket.length == 0) {\r\n                            if ($.trim(str).length > 0) {\r\n                                cal2.unshift(_this.isFunctionRange($.trim(str), r, c, index, dynamicArray_compute, cellRangeFunction));\r\n                            } else if ($.trim(function_str).length > 0) {\r\n                                cal2.unshift($.trim(function_str));\r\n                            }\r\n                            if (cal1[0] in _this.operatorjson) {\r\n                                let stackCeilPri = op[cal1[0]];\r\n                                stackCeilPri = stackCeilPri == null ? 1000 : stackCeilPri;\r\n                                let sPri = op[s];\r\n                                sPri = sPri == null ? 1000 : sPri;\r\n                                while (cal1.length > 0 && sPri >= stackCeilPri) {\r\n                                    cal2.unshift(cal1.shift());\r\n                                    stackCeilPri = op[cal1[0]];\r\n                                    stackCeilPri = stackCeilPri == null ? 1000 : stackCeilPri;\r\n                                }\r\n                            }\r\n                            cal1.unshift(s);\r\n                            function_str = '';\r\n                            str = '';\r\n                        } else {\r\n                            str += s;\r\n                        }\r\n                    }\r\n                } else {\r\n                    if (matchConfig.dquote == 0 && matchConfig.squote == 0) {\r\n                        str += $.trim(s);\r\n                    } else {\r\n                        str += s;\r\n                    }\r\n                }\r\n                if (i == funcstack.length - 1) {\r\n                    let endstr = '';\r\n                    let str_nb = $.trim(str).replace(/'/g, \"\\\\'\");\r\n                    if (_this.iscelldata(str_nb) && str_nb.substr(0, 1) != ':') {\r\n                        // endstr = \"luckysheet_getcelldata('\" + $.trim(str) + \"')\";\r\n                        endstr = \"luckysheet_getcelldata('\" + str_nb + \"')\";\r\n                        _this.isFunctionRangeSaveChange(str, r, c, index, dynamicArray_compute);\r\n                    } else if (str_nb.substr(0, 1) == ':') {\r\n                        str_nb = str_nb.substr(1);\r\n                        if (_this.iscelldata(str_nb)) {\r\n                            endstr = 'luckysheet_getSpecialReference(false,' + function_str + \",'\" + str_nb + \"')\";\r\n                        }\r\n                    } else {\r\n                        str = $.trim(str);\r\n                        let regx = /{.*?}/;\r\n                        if (regx.test(str) && str.substr(0, 1) != '\"' && str.substr(str.length - 1, 1) != '\"') {\r\n                            let arraytxt = regx.exec(str)[0];\r\n                            let arraystart = str.search(regx);\r\n                            let alltxt = '';\r\n                            if (arraystart > 0) {\r\n                                endstr += str.substr(0, arraystart);\r\n                            }\r\n                            endstr += \"luckysheet_getarraydata('\" + arraytxt + \"')\";\r\n                            if (arraystart + arraytxt.length < str.length) {\r\n                                endstr += str.substr(arraystart + arraytxt.length, str.length);\r\n                            }\r\n                        } else {\r\n                            endstr = str;\r\n                        }\r\n                    }\r\n                    if (endstr.length > 0) {\r\n                        cal2.unshift(endstr);\r\n                    }\r\n                    if (cal1.length > 0) {\r\n                        if (function_str.length > 0) {\r\n                            cal2.unshift(function_str);\r\n                            function_str = '';\r\n                        }\r\n                        while (cal1.length > 0) {\r\n                            cal2.unshift(cal1.shift());\r\n                        }\r\n                    }\r\n                    if (cal2.length > 0) {\r\n                        function_str = _this.calPostfixExpression(cal2);\r\n                    } else {\r\n                        function_str += endstr;\r\n                    }\r\n                }\r\n                i++;\r\n            }    // console.log(function_str);\r\n            // console.log(function_str);\r\n            _this.checkSpecialFunctionRange(function_str, r, c, index, dynamicArray_compute, cellRangeFunction);\r\n            return function_str;\r\n        },\r\n        isFunctionRangeSaveChange: function (str, r, c, index, dynamicArray_compute) {\r\n            let _this = this;\r\n            if (r != null && c != null) {\r\n                let range = _this.getcellrange($.trim(str), index);\r\n                if (range == null) {\r\n                    return;\r\n                }\r\n                let row = range.row, col = range.column, sheetIndex = range.sheetIndex;\r\n                if (r + '_' + c in dynamicArray_compute && (index == sheetIndex || index == null)) {\r\n                    let isd_range = false;\r\n                    for (let d_r = row[0]; d_r <= row[1]; d_r++) {\r\n                        for (let d_c = col[0]; d_c <= col[1]; d_c++) {\r\n                            if (d_r + '_' + d_c in dynamicArray_compute && dynamicArray_compute[d_r + '_' + d_c].r == r && dynamicArray_compute[d_r + '_' + d_c].c == c) {\r\n                                isd_range = true;\r\n                            }\r\n                        }\r\n                    }\r\n                    if (isd_range) {\r\n                        _this.isFunctionRangeSave = _this.isFunctionRangeSave || true;\r\n                    } else {\r\n                        _this.isFunctionRangeSave = _this.isFunctionRangeSave || false;\r\n                    }\r\n                } else {\r\n                    if (r >= row[0] && r <= row[1] && c >= col[0] && c <= col[1] && (index == sheetIndex || index == null)) {\r\n                        _this.isFunctionRangeSave = _this.isFunctionRangeSave || true;\r\n                    } else {\r\n                        _this.isFunctionRangeSave = _this.isFunctionRangeSave || false;\r\n                    }\r\n                }\r\n            } else {\r\n                _this.isFunctionRangeSave = _this.isFunctionRangeSave || false;    // let sheetlen = $.trim(str).split(\"!\");\r\n                                                                                   // if (sheetlen.length > 1) {\r\n                                                                                   //     _this.isFunctionRangeSave = _this.isFunctionRangeSave || true;//if change sheet, it must be true, but this is very slow\r\n                                                                                   // }\r\n                                                                                   // else {\r\n                                                                                   //     _this.isFunctionRangeSave = _this.isFunctionRangeSave || false;\r\n                                                                                   // }\r\n            }\r\n        },\r\n        // let sheetlen = $.trim(str).split(\"!\");\r\n        // if (sheetlen.length > 1) {\r\n        //     _this.isFunctionRangeSave = _this.isFunctionRangeSave || true;//if change sheet, it must be true, but this is very slow\r\n        // }\r\n        // else {\r\n        //     _this.isFunctionRangeSave = _this.isFunctionRangeSave || false;\r\n        // }\r\n        checkSpecialFunctionRange: function (function_str, r, c, index, dynamicArray_compute, cellRangeFunction) {\r\n            if (function_str.substr(0, 30) == 'luckysheet_getSpecialReference' || function_str.substr(0, 20) == 'luckysheet_function.') {\r\n                if (function_str.substr(0, 20) == 'luckysheet_function.') {\r\n                    let funcName = function_str.split('.')[1];\r\n                    if (funcName != null) {\r\n                        funcName = funcName.toUpperCase();\r\n                        if (funcName != 'INDIRECT' && funcName != 'OFFSET' && funcName != 'INDEX') {\r\n                            return;\r\n                        }\r\n                    }\r\n                }\r\n                try {\r\n                    Store.calculateSheetIndex = index;\r\n                    let str = new Function('return ' + function_str)();\r\n                    if (str instanceof Object && str.startCell != null) {\r\n                        str = str.startCell;\r\n                    }\r\n                    let str_nb = $.trim(str);    // console.log(function_str, tempFunc,str, this.iscelldata(str_nb),this.isFunctionRangeSave,r,c);\r\n                    // console.log(function_str, tempFunc,str, this.iscelldata(str_nb),this.isFunctionRangeSave,r,c);\r\n                    if (this.iscelldata(str_nb)) {\r\n                        if (typeof cellRangeFunction == 'function') {\r\n                            cellRangeFunction(str_nb);\r\n                        }    // this.isFunctionRangeSaveChange(str, r, c, index, dynamicArray_compute);\r\n                             // console.log(function_str, str, this.isFunctionRangeSave,r,c);\r\n                    }\r\n                } // this.isFunctionRangeSaveChange(str, r, c, index, dynamicArray_compute);\r\n                // console.log(function_str, str, this.isFunctionRangeSave,r,c);\r\n                catch (e) {\r\n                }\r\n            }    // if (function_str.substr(0, 20) == \"luckysheet_function.\") {\r\n                 //     let funcName = function_str.split(\".\")[1];\r\n                 //     if (funcName != null) {\r\n                 //         funcName = funcName.toUpperCase();\r\n                 //         if (funcName == \"INDIRECT\") {\r\n                 //             let tempFunc = \"luckysheet_indirect_check\" + function_str.substr(30, function_str.length);\r\n                 //             //tempFunc = tempFunc.replace(/luckysheet_getcelldata/g, \"luckysheet_indirect_check_return\");\r\n                 //             try {\r\n                 //                 Store.calculateSheetIndex = index;\r\n                 //                 let str = eval(tempFunc);\r\n                 //                 if(str instanceof Object && str.data!=null){\r\n                 //                     str = str.data.v;\r\n                 //                 }\r\n                 //                 let str_nb = $.trim(str);\r\n                 //                 // console.log(function_str, tempFunc,str, this.iscelldata(str_nb),this.isFunctionRangeSave,r,c);\r\n                 //                 if (this.iscelldata(str_nb)) {\r\n                 //                     if(typeof(cellRangeFunction)==\"function\"){\r\n                 //                         cellRangeFunction(str_nb);\r\n                 //                     }\r\n                 //                     this.isFunctionRangeSaveChange(str, r, c, index, dynamicArray_compute);\r\n                 //                     // console.log(function_str, str, this.isFunctionRangeSave,r,c);\r\n                 //                 }\r\n                 //             }\r\n                 //             catch{\r\n                 //             }\r\n                 //         }\r\n                 //         else if (funcName == \"OFFSET\") {\r\n                 //             let tempFunc = \"luckysheet_offset_check\" + function_str.substr(28, function_str.length);\r\n                 //             try {\r\n                 //                 Store.calculateSheetIndex = index;\r\n                 //                 let str = eval(tempFunc);\r\n                 //                 if(str instanceof Object && str.data!=null){\r\n                 //                     str = str.data.v;\r\n                 //                 }\r\n                 //                 let str_nb = $.trim(str);\r\n                 //                 if (this.iscelldata(str_nb)) {\r\n                 //                     if(typeof(cellRangeFunction)==\"function\"){\r\n                 //                         cellRangeFunction(str_nb);\r\n                 //                     }\r\n                 //                     this.isFunctionRangeSaveChange(str, r, c, index,dynamicArray_compute);\r\n                 //                     //console.log(function_str, str, this.isFunctionRangeSave,r,c);\r\n                 //                 }\r\n                 //             }\r\n                 //             catch{\r\n                 //             }\r\n                 //             //let result = eval(function_str);\r\n                 //             //console.log(function_str, result);\r\n                 //         }\r\n                 //     }\r\n                 // }\r\n        },\r\n        // if (function_str.substr(0, 20) == \"luckysheet_function.\") {\r\n        //     let funcName = function_str.split(\".\")[1];\r\n        //     if (funcName != null) {\r\n        //         funcName = funcName.toUpperCase();\r\n        //         if (funcName == \"INDIRECT\") {\r\n        //             let tempFunc = \"luckysheet_indirect_check\" + function_str.substr(30, function_str.length);\r\n        //             //tempFunc = tempFunc.replace(/luckysheet_getcelldata/g, \"luckysheet_indirect_check_return\");\r\n        //             try {\r\n        //                 Store.calculateSheetIndex = index;\r\n        //                 let str = eval(tempFunc);\r\n        //                 if(str instanceof Object && str.data!=null){\r\n        //                     str = str.data.v;\r\n        //                 }\r\n        //                 let str_nb = $.trim(str);\r\n        //                 // console.log(function_str, tempFunc,str, this.iscelldata(str_nb),this.isFunctionRangeSave,r,c);\r\n        //                 if (this.iscelldata(str_nb)) {\r\n        //                     if(typeof(cellRangeFunction)==\"function\"){\r\n        //                         cellRangeFunction(str_nb);\r\n        //                     }\r\n        //                     this.isFunctionRangeSaveChange(str, r, c, index, dynamicArray_compute);\r\n        //                     // console.log(function_str, str, this.isFunctionRangeSave,r,c);\r\n        //                 }\r\n        //             }\r\n        //             catch{\r\n        //             }\r\n        //         }\r\n        //         else if (funcName == \"OFFSET\") {\r\n        //             let tempFunc = \"luckysheet_offset_check\" + function_str.substr(28, function_str.length);\r\n        //             try {\r\n        //                 Store.calculateSheetIndex = index;\r\n        //                 let str = eval(tempFunc);\r\n        //                 if(str instanceof Object && str.data!=null){\r\n        //                     str = str.data.v;\r\n        //                 }\r\n        //                 let str_nb = $.trim(str);\r\n        //                 if (this.iscelldata(str_nb)) {\r\n        //                     if(typeof(cellRangeFunction)==\"function\"){\r\n        //                         cellRangeFunction(str_nb);\r\n        //                     }\r\n        //                     this.isFunctionRangeSaveChange(str, r, c, index,dynamicArray_compute);\r\n        //                     //console.log(function_str, str, this.isFunctionRangeSave,r,c);\r\n        //                 }\r\n        //             }\r\n        //             catch{\r\n        //             }\r\n        //             //let result = eval(function_str);\r\n        //             //console.log(function_str, result);\r\n        //         }\r\n        //     }\r\n        // }\r\n        execvertex: {},\r\n        execFunctionGroupData: null,\r\n        execFunctionExist: null,\r\n        formulaContainSheetList: {},\r\n        formulaContainCellList: {},\r\n        cellTextToIndexList: {},\r\n        addToCellList: function (formulaTxt, cellstring) {\r\n            if (formulaTxt == null || formulaTxt.length == 0 || cellstring == null || cellstring.length == 0) {\r\n                return;\r\n            }\r\n            if (this.formulaContainCellList == null) {\r\n                this.formulaContainCellList = {};\r\n            }    // formulaTxt = formulaTxt.toUpperCase();\r\n            // formulaTxt = formulaTxt.toUpperCase();\r\n            if (this.formulaContainCellList[formulaTxt] == null) {\r\n                this.formulaContainCellList[formulaTxt] = {};\r\n            }\r\n            this.formulaContainCellList[formulaTxt][cellstring] = 1;\r\n        },\r\n        addToCellIndexList: function (txt, infoObj) {\r\n            if (txt == null || txt.length == 0 || infoObj == null) {\r\n                return;\r\n            }\r\n            if (this.cellTextToIndexList == null) {\r\n                this.cellTextToIndexList = {};\r\n            }\r\n            if (txt.indexOf('!') > -1) {\r\n                txt = txt.replace(/\\\\'/g, \"'\").replace(/''/g, \"'\");\r\n                this.cellTextToIndexList[txt] = infoObj;\r\n            } else {\r\n                this.cellTextToIndexList[txt + '_' + infoObj.sheetIndex] = infoObj;\r\n            }    // console.log(this.cellTextToIndexList);\r\n        },\r\n        // console.log(this.cellTextToIndexList);\r\n        addToSheetIndexList: function (formulaTxt, sheetIndex, obIndex) {\r\n            if (formulaTxt == null || formulaTxt.length == 0) {\r\n                return;\r\n            }\r\n            if (sheetIndex == null || sheetIndex.length == 0) {\r\n                sheetIndex = Store.currentSheetIndex;\r\n            }\r\n            if (obIndex == null || obIndex.length == 0) {\r\n                obIndex = '';\r\n            }\r\n            if (this.formulaContainSheetList == null) {\r\n                this.formulaContainSheetList = {};\r\n            }\r\n            if (this.formulaContainSheetList[formulaTxt] == null) {\r\n                this.formulaContainSheetList[formulaTxt] = {};\r\n            }\r\n            this.formulaContainSheetList[formulaTxt][sheetIndex] = obIndex;\r\n        },\r\n        execFunctionGlobalData: {},\r\n        execFunctionGroupForce: function (isForce) {\r\n            if (isForce) {\r\n                this.execFunctionGroup(undefined, undefined, undefined, undefined, undefined, true);\r\n            } else {\r\n                this.execFunctionGroup();\r\n            }\r\n        },\r\n        execFunctionGroup: function (origin_r, origin_c, value, index, data, isForce = false) {\r\n            let _this = this;\r\n            if (data == null) {\r\n                data = Store.flowdata;\r\n            }\r\n            if (!window.luckysheet_compareWith) {\r\n                window.luckysheet_compareWith = luckysheet_compareWith;\r\n                window.luckysheet_getarraydata = luckysheet_getarraydata;\r\n                window.luckysheet_getcelldata = luckysheet_getcelldata;\r\n                window.luckysheet_parseData = luckysheet_parseData;\r\n                window.luckysheet_getValue = luckysheet_getValue;\r\n                window.luckysheet_indirect_check = luckysheet_indirect_check;\r\n                window.luckysheet_indirect_check_return = luckysheet_indirect_check_return;\r\n                window.luckysheet_offset_check = luckysheet_offset_check;\r\n                window.luckysheet_calcADPMM = luckysheet_calcADPMM;\r\n                window.luckysheet_getSpecialReference = luckysheet_getSpecialReference;\r\n            }\r\n            if (_this.execFunctionGlobalData == null) {\r\n                _this.execFunctionGlobalData = {};\r\n            }    // let luckysheetfile = getluckysheetfile();\r\n                 // let dynamicArray_compute = luckysheetfile[getSheetIndex(Store.currentSheetIndex)][\"dynamicArray_compute\"] == null ? {} : luckysheetfile[getSheetIndex(Store.currentSheetIndex)][\"dynamicArray_compute\"];\r\n            // let luckysheetfile = getluckysheetfile();\r\n            // let dynamicArray_compute = luckysheetfile[getSheetIndex(Store.currentSheetIndex)][\"dynamicArray_compute\"] == null ? {} : luckysheetfile[getSheetIndex(Store.currentSheetIndex)][\"dynamicArray_compute\"];\r\n            if (index == null) {\r\n                index = Store.currentSheetIndex;\r\n            }\r\n            if (value != null) {\r\n                //此处setcellvalue 中this.execFunctionGroupData会保存想要更新的值，本函数结尾不要设为null,以备后续函数使用\r\n                // setcellvalue(origin_r, origin_c, _this.execFunctionGroupData, value);\r\n                let cellCache = [[{ v: null }]];\r\n                setcellvalue(0, 0, cellCache, value);\r\n                _this.execFunctionGlobalData[origin_r + '_' + origin_c + '_' + index] = cellCache[0][0];\r\n            }    //{ \"r\": r, \"c\": c, \"index\": index, \"func\": func}\r\n            //{ \"r\": r, \"c\": c, \"index\": index, \"func\": func}\r\n            let calcChains = _this.getAllFunctionGroup(), formulaObjects = {};\r\n            let sheets = getluckysheetfile();\r\n            let sheetData = {};\r\n            for (let i = 0; i < sheets.length; i++) {\r\n                let sheet = sheets[i];\r\n                sheetData[sheet.index] = sheet.data;\r\n            }    //把修改涉及的单元格存储为对象\r\n            //把修改涉及的单元格存储为对象\r\n            let updateValueOjects = {}, updateValueArray = [];\r\n            if (_this.execFunctionExist == null) {\r\n                let key = 'r' + origin_r + 'c' + origin_c + 'i' + index;\r\n                updateValueOjects[key] = 1;\r\n            } else {\r\n                for (let x = 0; x < _this.execFunctionExist.length; x++) {\r\n                    let cell = _this.execFunctionExist[x];\r\n                    let key = 'r' + cell.r + 'c' + cell.c + 'i' + cell.i;\r\n                    updateValueOjects[key] = 1;\r\n                }\r\n            }\r\n            let arrayMatchCache = {};\r\n            let arrayMatch = function (formulaArray, formulaObjects, updateValueOjects, func) {\r\n                for (let a = 0; a < formulaArray.length; a++) {\r\n                    let range = formulaArray[a];\r\n                    let cacheKey = 'r' + range.row[0] + '' + range.row[1] + 'c' + range.column[0] + '' + range.column[1] + 'index' + range.sheetIndex;\r\n                    if (cacheKey in arrayMatchCache) {\r\n                        let amc = arrayMatchCache[cacheKey];    // console.log(amc);\r\n                        // console.log(amc);\r\n                        amc.forEach(item => {\r\n                            func(item.key, item.r, item.c, item.sheetIndex);\r\n                        });\r\n                    } else {\r\n                        let functionArr = [];\r\n                        for (let r = range.row[0]; r <= range.row[1]; r++) {\r\n                            for (let c = range.column[0]; c <= range.column[1]; c++) {\r\n                                let key = 'r' + r + 'c' + c + 'i' + range.sheetIndex;\r\n                                func(key, r, c, range.sheetIndex);\r\n                                if (formulaObjects && key in formulaObjects || updateValueOjects && key in updateValueOjects) {\r\n                                    functionArr.push({\r\n                                        key: key,\r\n                                        r: r,\r\n                                        c: c,\r\n                                        sheetIndex: range.sheetIndex\r\n                                    });\r\n                                }\r\n                            }\r\n                        }\r\n                        if (formulaObjects || updateValueOjects) {\r\n                            arrayMatchCache[cacheKey] = functionArr;\r\n                        }\r\n                    }\r\n                }\r\n            };\r\n            let existsChildFormulaMatch = {}, ii = 0;    //创建公式缓存及其范围的缓存\r\n                                                         // console.time(\"1\");\r\n            //创建公式缓存及其范围的缓存\r\n            // console.time(\"1\");\r\n            for (let i = 0; i < calcChains.length; i++) {\r\n                let formulaCell = calcChains[i];\r\n                let key = 'r' + formulaCell.r + 'c' + formulaCell.c + 'i' + formulaCell.index;\r\n                let calc_funcStr = getcellFormula(formulaCell.r, formulaCell.c, formulaCell.index);\r\n                if (calc_funcStr == null) {\r\n                    continue;\r\n                }\r\n                let txt1 = calc_funcStr.toUpperCase();\r\n                let isOffsetFunc = txt1.indexOf('INDIRECT(') > -1 || txt1.indexOf('OFFSET(') > -1 || txt1.indexOf('INDEX(') > -1;\r\n                let formulaArray = [];\r\n                if (isOffsetFunc) {\r\n                    this.isFunctionRange(calc_funcStr, null, null, formulaCell.index, null, function (str_nb) {\r\n                        let range = _this.getcellrange($.trim(str_nb), formulaCell.index);\r\n                        if (range != null) {\r\n                            formulaArray.push(range);\r\n                        }\r\n                    });\r\n                } else if (!(calc_funcStr.substr(0, 2) == '=\"' && calc_funcStr.substr(calc_funcStr.length - 1, 1) == '\"')) {\r\n                    //let formulaTextArray = calc_funcStr.split(/==|!=|<>|<=|>=|[,()=+-\\/*%&^><]/g);//无法正确分割单引号或双引号之间有==、!=、-等运算符的情况。导致如='1-2'!A1公式中表名1-2的A1单元格内容更新后，公式的值不更新的bug\r\n                    //解决='1-2'!A1+5会被calc_funcStr.split(/==|!=|<>|<=|>=|[,()=+-\\/*%&^><]/g)分割成[\"\",\"'1\",\"2'!A1\",5]的错误情况\r\n                    let point = 0;    //指针\r\n                    //指针\r\n                    let squote = -1;    //双引号\r\n                    //双引号\r\n                    let dquote = -1;    //单引号\r\n                    //单引号\r\n                    let formulaTextArray = [];\r\n                    let sq_end_array = [];    //保存了配对的单引号在formulaTextArray的index索引。\r\n                    //保存了配对的单引号在formulaTextArray的index索引。\r\n                    let calc_funcStr_length = calc_funcStr.length;\r\n                    for (let i = 0; i < calc_funcStr_length; i++) {\r\n                        let char = calc_funcStr.charAt(i);\r\n                        if (char == \"'\" && dquote == -1) {\r\n                            //如果是单引号开始\r\n                            if (squote == -1) {\r\n                                if (point != i) {\r\n                                    formulaTextArray.push(...calc_funcStr.substring(point, i).split(/==|!=|<>|<=|>=|[,()=+-\\/*%&\\^><]/));\r\n                                }\r\n                                squote = i;\r\n                                point = i;\r\n                            } else\r\n                                //单引号结束\r\n                                {\r\n                                    //if (squote == i - 1)//配对的单引号后第一个字符不能是单引号\r\n                                    //{\r\n                                    //    ;//到此处说明公式错误\r\n                                    //}\r\n                                    //如果是''代表着输出'\r\n                                    if (i < calc_funcStr_length - 1 && calc_funcStr.charAt(i + 1) == \"'\") {\r\n                                        i++;\r\n                                    } else {\r\n                                        //如果下一个字符不是'代表单引号结束\r\n                                        //if (calc_funcStr.charAt(i - 1) == \"'\") {//配对的单引号后最后一个字符不能是单引号\r\n                                        //    ;//到此处说明公式错误\r\n                                        point = i + 1;\r\n                                        formulaTextArray.push(calc_funcStr.substring(squote, point));\r\n                                        sq_end_array.push(formulaTextArray.length - 1);\r\n                                        squote = -1;    //} else {\r\n                                                        //    point = i + 1;\r\n                                                        //    formulaTextArray.push(calc_funcStr.substring(squote, point));\r\n                                                        //    sq_end_array.push(formulaTextArray.length - 1);\r\n                                                        //    squote = -1;\r\n                                                        //}\r\n                                    }\r\n                                }\r\n                        }\r\n                        //} else {\r\n                        //    point = i + 1;\r\n                        //    formulaTextArray.push(calc_funcStr.substring(squote, point));\r\n                        //    sq_end_array.push(formulaTextArray.length - 1);\r\n                        //    squote = -1;\r\n                        //}\r\n                        if (char == '\"' && squote == -1) {\r\n                            //如果是双引号开始\r\n                            if (dquote == -1) {\r\n                                if (point != i) {\r\n                                    formulaTextArray.push(...calc_funcStr.substring(point, i).split(/==|!=|<>|<=|>=|[,()=+-\\/*%&\\^><]/));\r\n                                }\r\n                                dquote = i;\r\n                                point = i;\r\n                            } else {\r\n                                //如果是\"\"代表着输出\"\r\n                                if (i < calc_funcStr_length - 1 && calc_funcStr.charAt(i + 1) == '\"') {\r\n                                    i++;\r\n                                } else {\r\n                                    //双引号结束\r\n                                    point = i + 1;\r\n                                    formulaTextArray.push(calc_funcStr.substring(dquote, point));\r\n                                    dquote = -1;\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                    if (point != calc_funcStr_length) {\r\n                        formulaTextArray.push(...calc_funcStr.substring(point, calc_funcStr_length).split(/==|!=|<>|<=|>=|[,()=+-\\/*%&\\^><]/));\r\n                    }    //拼接所有配对单引号及之后一个单元格内容，例如[\"'1-2'\",\"!A1\"]拼接为[\"'1-2'!A1\"]\r\n                    //拼接所有配对单引号及之后一个单元格内容，例如[\"'1-2'\",\"!A1\"]拼接为[\"'1-2'!A1\"]\r\n                    for (let i = sq_end_array.length - 1; i >= 0; i--) {\r\n                        if (sq_end_array[i] != formulaTextArray.length - 1) {\r\n                            formulaTextArray[sq_end_array[i]] = formulaTextArray[sq_end_array[i]] + formulaTextArray[sq_end_array[i] + 1];\r\n                            formulaTextArray.splice(sq_end_array[i] + 1, 1);\r\n                        }\r\n                    }    //至此=SUM('1-2'!A1:A2&\"'1-2'!A2\")由原来的[\"\",\"SUM\",\"'1\",\"2'!A1:A2\",\"\",\"\"'1\",\"2'!A2\"\"]更正为[\"\",\"SUM\",\"\",\"'1-2'!A1:A2\",\"\",\"\",\"\"'1-2'!A2\"\"]\r\n                    //至此=SUM('1-2'!A1:A2&\"'1-2'!A2\")由原来的[\"\",\"SUM\",\"'1\",\"2'!A1:A2\",\"\",\"\"'1\",\"2'!A2\"\"]更正为[\"\",\"SUM\",\"\",\"'1-2'!A1:A2\",\"\",\"\",\"\"'1-2'!A2\"\"]\r\n                    for (let i = 0; i < formulaTextArray.length; i++) {\r\n                        let t = formulaTextArray[i];\r\n                        if (t.length <= 1) {\r\n                            continue;\r\n                        }\r\n                        if (t.substr(0, 1) == '\"' && t.substr(t.length - 1, 1) == '\"' && !_this.iscelldata(t)) {\r\n                            continue;\r\n                        }\r\n                        let range = _this.getcellrange($.trim(t), formulaCell.index);\r\n                        if (range == null) {\r\n                            continue;\r\n                        }\r\n                        formulaArray.push(range);\r\n                    }\r\n                }\r\n                let item = {\r\n                    formulaArray: formulaArray,\r\n                    calc_funcStr: calc_funcStr,\r\n                    key: key,\r\n                    r: formulaCell.r,\r\n                    c: formulaCell.c,\r\n                    index: formulaCell.index,\r\n                    parents: {},\r\n                    chidren: {},\r\n                    color: 'w'\r\n                };\r\n                formulaObjects[key] = item;    \r\n            } \r\n            // if(isForce){\r\n            //     updateValueArray.push(item);\r\n            // }\r\n            // else{\r\n            //     arrayMatch(formulaArray, null, function(key){\r\n            //         if(key in updateValueOjects){\r\n            //             updateValueArray.push(item);\r\n            //         }\r\n            //     });\r\n            // }\r\n            // console.timeEnd(\"1\");\r\n            // console.time(\"2\");\r\n            //形成一个公式之间引用的图结构\r\n            Object.keys(formulaObjects).forEach(key => {\r\n                let formulaObject = formulaObjects[key];\r\n                arrayMatch(formulaObject.formulaArray, formulaObjects, updateValueOjects, function (childKey) {\r\n                    if (childKey in formulaObjects) {\r\n                        let childFormulaObject = formulaObjects[childKey];\r\n                        formulaObject.chidren[childKey] = 1;\r\n                        childFormulaObject.parents[key] = 1;\r\n                    }    // console.log(childKey,formulaObject.formulaArray);\r\n                    // console.log(childKey,formulaObject.formulaArray);\r\n                    if (!isForce && childKey in updateValueOjects) {\r\n                        updateValueArray.push(formulaObject);\r\n                    }\r\n                });\r\n                if (isForce) {\r\n                    updateValueArray.push(formulaObject);\r\n                }\r\n            }); \r\n            // console.log(formulaObjects)\r\n            // console.timeEnd(\"2\");\r\n            // console.time(\"3\");\r\n            let formulaRunList = [];\r\n            //计算，采用深度优先遍历公式形成的图结构\r\n            // updateValueArray.forEach((key)=>{\r\n            //     let formulaObject = formulaObjects[key];\r\n            // });\r\n            let stack = updateValueArray, existsFormulaRunList = {};\r\n            while (stack.length > 0) {\r\n                let formulaObject = stack.pop();\r\n                if (formulaObject == null || formulaObject.key in existsFormulaRunList) {\r\n                    continue;\r\n                }\r\n                if (formulaObject.color == 'b') {\r\n                    formulaRunList.push(formulaObject);\r\n                    existsFormulaRunList[formulaObject.key] = 1;\r\n                    continue;\r\n                }\r\n                let cacheStack = [];\r\n                Object.keys(formulaObject.parents).forEach(parentKey => {\r\n                    let parentFormulaObject = formulaObjects[parentKey];\r\n                    if (parentFormulaObject != null) {\r\n                        cacheStack.push(parentFormulaObject);\r\n                    }\r\n                });\r\n                ii++;\r\n                if (cacheStack.length == 0) {\r\n                    formulaRunList.push(formulaObject);\r\n                    existsFormulaRunList[formulaObject.key] = 1;\r\n                } else {\r\n                    formulaObject.color = 'b';\r\n                    stack.push(formulaObject);\r\n                    stack = stack.concat(cacheStack);\r\n                }\r\n            }\r\n            formulaRunList.reverse(); \r\n            // console.log(formulaObjects, ii)\r\n            // console.timeEnd(\"3\");\r\n            // console.time(\"4\");\r\n            for (let i = 0; i < formulaRunList.length; i++) {\r\n                let formulaCell = formulaRunList[i];\r\n                if (formulaCell.level == Math.max) {\r\n                    continue;\r\n                }\r\n                window.luckysheet_getcelldata_cache = null;\r\n                let calc_funcStr = formulaCell.calc_funcStr;\r\n                let v = _this.execfunction(calc_funcStr, formulaCell.r, formulaCell.c, formulaCell.index);\r\n                _this.groupValuesRefreshData.push({\r\n                    'r': formulaCell.r,\r\n                    'c': formulaCell.c,\r\n                    'v': v[1],\r\n                    'f': v[2],\r\n                    'spe': v[3],\r\n                    'index': formulaCell.index\r\n                });    // _this.execFunctionGroupData[u.r][u.c] = value;\r\n                // _this.execFunctionGroupData[u.r][u.c] = value;\r\n                _this.execFunctionGlobalData[formulaCell.r + '_' + formulaCell.c + '_' + formulaCell.index] = {\r\n                    v: v[1],\r\n                    f: v[2]\r\n                };\r\n            } \r\n            // console.log(formulaRunList);\r\n            // console.timeEnd(\"4\");\r\n            _this.execFunctionExist = null;\r\n        },\r\n        // When set origin_r and origin_c, that mean just refresh cell value link to [origin_r,origin_c] cell\r\n        execFunctionGroup1: function (origin_r, origin_c, value, index, data, isForce = false) {\r\n            let _this = this;\r\n            if (data == null) {\r\n                data = Store.flowdata;\r\n            }\r\n            if (!window.luckysheet_compareWith) {\r\n                window.luckysheet_compareWith = luckysheet_compareWith;\r\n                window.luckysheet_getarraydata = luckysheet_getarraydata;\r\n                window.luckysheet_getcelldata = luckysheet_getcelldata;\r\n                window.luckysheet_parseData = luckysheet_parseData;\r\n                window.luckysheet_getValue = luckysheet_getValue;\r\n                window.luckysheet_indirect_check = luckysheet_indirect_check;\r\n                window.luckysheet_indirect_check_return = luckysheet_indirect_check_return;\r\n                window.luckysheet_offset_check = luckysheet_offset_check;\r\n                window.luckysheet_calcADPMM = luckysheet_calcADPMM;\r\n                window.luckysheet_getSpecialReference = luckysheet_getSpecialReference;\r\n            }\r\n            if (_this.execFunctionGlobalData == null) {\r\n                _this.execFunctionGlobalData = {};\r\n            }\r\n            let luckysheetfile = getluckysheetfile();\r\n            let dynamicArray_compute = luckysheetfile[getSheetIndex(Store.currentSheetIndex)]['dynamicArray_compute'] == null ? {} : luckysheetfile[getSheetIndex(Store.currentSheetIndex)]['dynamicArray_compute'];\r\n            if (index == null) {\r\n                index = Store.currentSheetIndex;\r\n            }\r\n            if (value != null) {\r\n                //此处setcellvalue 中this.execFunctionGroupData会保存想要更新的值，本函数结尾不要设为null,以备后续函数使用\r\n                // setcellvalue(origin_r, origin_c, _this.execFunctionGroupData, value);\r\n                let cellCache = [[{ v: null }]];\r\n                setcellvalue(0, 0, cellCache, value);\r\n                _this.execFunctionGlobalData[origin_r + '_' + origin_c + '_' + index] = cellCache[0][0];\r\n            }    //{ \"r\": r, \"c\": c, \"index\": index, \"func\": func}\r\n            //{ \"r\": r, \"c\": c, \"index\": index, \"func\": func}\r\n            let group = _this.getAllFunctionGroup(), vertex1 = {}, stack = [], count = 0;\r\n            _this.execvertex = {};\r\n            if (_this.execFunctionExist == null) {\r\n                for (let i = 0; i < group.length; i++) {\r\n                    let item = group[i];\r\n                    let file = luckysheetfile[getSheetIndex(item['index'])];\r\n                    if (file == null) {\r\n                        continue;\r\n                    }\r\n                    let cell = file.data[item.r][item.c];\r\n                    let calc_funcStr = getcellFormula(item.r, item.c, item.index);\r\n                    if (cell != null && cell.f != null && cell.f == calc_funcStr) {\r\n                        if (!(item instanceof Object)) {\r\n                            item = new Function('return ' + item)();\r\n                        }\r\n                        item.color = 'w';\r\n                        item.parent = null;\r\n                        item.chidren = {};\r\n                        item.times = 0;\r\n                        vertex1['r' + item.r + 'c' + item.c + 'i' + item.index] = item;\r\n                        _this.isFunctionRangeSave = false;\r\n                        if (isForce) {\r\n                            _this.isFunctionRangeSave = true;\r\n                        } else if (origin_r != null && origin_c != null) {\r\n                            _this.isFunctionRangeSelect(calc_funcStr, origin_r, origin_c, index, dynamicArray_compute);\r\n                        }    // else {\r\n                             //     _this.isFunctionRangeSelect(calc_funcStr, undefined, undefined ,dynamicArray_compute);\r\n                             // }\r\n                        // else {\r\n                        //     _this.isFunctionRangeSelect(calc_funcStr, undefined, undefined ,dynamicArray_compute);\r\n                        // }\r\n                        if (_this.isFunctionRangeSave) {\r\n                            stack.push(item);\r\n                            _this.execvertex['r' + item.r + 'c' + item.c + 'i' + item.index] = item;\r\n                            count++;\r\n                        }\r\n                    }\r\n                }\r\n            } else {\r\n                for (let x = 0; x < _this.execFunctionExist.length; x++) {\r\n                    let cell = _this.execFunctionExist[x];\r\n                    if ('r' + cell.r + 'c' + cell.c + 'i' + cell.i in vertex1) {\r\n                        continue;\r\n                    }\r\n                    for (let i = 0; i < group.length; i++) {\r\n                        let item = group[i];\r\n                        let calc_funcStr = getcellFormula(item.r, item.c, item.index);\r\n                        item.color = 'w';\r\n                        item.parent = null;\r\n                        item.chidren = {};\r\n                        item.times = 0;\r\n                        vertex1['r' + item.r + 'c' + item.c + 'i' + item.index] = item;\r\n                        _this.isFunctionRangeSave = false;\r\n                        if (isForce) {\r\n                            _this.isFunctionRangeSave = true;\r\n                        } else {\r\n                            _this.isFunctionRangeSelect(calc_funcStr, cell.r, cell.c, cell.i, dynamicArray_compute);\r\n                        }\r\n                        if (_this.isFunctionRangeSave) {\r\n                            stack.push(item);\r\n                            _this.execvertex['r' + item.r + 'c' + item.c + 'i' + item.index] = item;\r\n                            count++;\r\n                        }\r\n                    }\r\n                }\r\n            } \r\n            // console.time(\"1\");\r\n            // console.log(group.length);\r\n            // let iii = 0, ii=0;\r\n            //先进先出法，构建逆向执行结构树\r\n            while (stack.length > 0) {\r\n                let u = stack.shift();\r\n                let excludeList = {};\r\n                _this.getChildrenVertex(u, vertex1, excludeList);    // ii++;\r\n                                                                     // console.log(JSON.stringify(excludeList));\r\n                // ii++;\r\n                // console.log(JSON.stringify(excludeList));\r\n                for (let name in vertex1) {\r\n                    let item = vertex1[name];\r\n                    if (item == null) {\r\n                        continue;\r\n                    }\r\n                    let ukey = 'r' + u.r + 'c' + u.c + 'i' + u.index;    // if ((u.r == item.r && u.c == item.c && u.index == item.index) ) {\r\n                                                                         //     continue;\r\n                                                                         // }\r\n                    // if ((u.r == item.r && u.c == item.c && u.index == item.index) ) {\r\n                    //     continue;\r\n                    // }\r\n                    if (name in excludeList) {\r\n                        continue;\r\n                    }\r\n                    _this.isFunctionRangeSave = false;\r\n                    let calc_funcStr = getcellFormula(item.r, item.c, item.index);\r\n                    _this.isFunctionRangeSelect(calc_funcStr, u.r, u.c, u.index, dynamicArray_compute);    // iii++;\r\n                    // iii++;\r\n                    if (_this.isFunctionRangeSave) {\r\n                        if (!(name in _this.execvertex)) {\r\n                            // console.log(JSON.stringify(item), JSON.stringify(u), _this.isFunctionRangeSave);\r\n                            stack.push(item);\r\n                            _this.execvertex[name] = item;\r\n                        }\r\n                        count++;\r\n                        _this.execvertex[name].chidren[ukey] = 1;\r\n                    }\r\n                }\r\n            }    // console.log(iii, ii);\r\n                 // console.timeEnd(\"1\");\r\n                 // console.time(\"2\");\r\n            // console.log(iii, ii);\r\n            // console.timeEnd(\"1\");\r\n            // console.time(\"2\");\r\n            _this.groupValuesRefreshData = [];\r\n            let i = 0;\r\n            while (i < count) {\r\n                for (let name in _this.execvertex) {\r\n                    let u = _this.execvertex[name];\r\n                    if (u.color == 'w') {\r\n                        _this.functionDFS(u);\r\n                    } else if (u.color == 'b') {\r\n                        i++;\r\n                    }\r\n                }\r\n            }    // console.timeEnd(\"2\");\r\n            // console.timeEnd(\"2\");\r\n            _this.execFunctionExist = null;\r\n        },\r\n        //递归得到引用节点\r\n        getChildrenVertex: function (u, vertex1, obj) {\r\n            let ukey = 'r' + u.r + 'c' + u.c + 'i' + u.index;\r\n            obj[ukey] = 1;\r\n            if (u.chidren != null) {\r\n                for (let key in u.chidren) {\r\n                    if (vertex1[key] && !(key in obj)) {\r\n                        this.getChildrenVertex(vertex1[key], vertex1, obj);\r\n                    }\r\n                }\r\n            }\r\n        },\r\n        //深度优先算法，处理多级调用函数\r\n        functionDFS: function (u) {\r\n            let _this = this;\r\n            u.color = 'g';\r\n            u.times += 1;\r\n            for (let chd in u.chidren) {\r\n                let v = _this.execvertex[chd];\r\n                if (v.color == 'w') {\r\n                    v.parent = 'r' + u.r.toString() + 'c' + u.c.toString() + 'i' + u.index;\r\n                    _this.functionDFS(v);\r\n                }\r\n            }\r\n            u.color = 'b';\r\n            window.luckysheet_getcelldata_cache = null;\r\n            let calc_funcStr = getcellFormula(u.r, u.c, u.index);\r\n            let v = _this.execfunction(calc_funcStr, u.r, u.c, u.index);\r\n            // let value = _this.execFunctionGroupData[u.r][u.c];\r\n            // if(value == null){\r\n            //     value = {};\r\n            // }\r\n            // value.v = v[1];\r\n            // value.f = v[2];\r\n            // let cell = getOrigincell(u.r,u.c,u.index);\r\n            // let spl;\r\n            // if(v[3]!=null){\r\n            //     if(v[3].type==\"sparklines\"){\r\n            //         window.luckysheetCurrentRow = u.r;\r\n            //         window.luckysheetCurrentColumn = u.c;\r\n            //         window.luckysheetCurrentIndex = u.index;\r\n            //         window.luckysheetCurrentFunction = calc_funcStr;\r\n            //         let fp = $.trim(_this.functionParserExe(calc_funcStr));\r\n            //         let sparklines = eval(fp);\r\n            //         spl = sparklines;\r\n            //     }\r\n            // }\r\n            _this.groupValuesRefreshData.push({\r\n                'r': u.r,\r\n                'c': u.c,\r\n                'v': v[1],\r\n                'f': v[2],\r\n                'spe': v[3],\r\n                'index': u.index\r\n            });    // _this.execFunctionGroupData[u.r][u.c] = value;\r\n            // _this.execFunctionGroupData[u.r][u.c] = value;\r\n            _this.execFunctionGlobalData[u.r + '_' + u.c + '_' + u.index] = {\r\n                v: v[1],\r\n                f: v[2]\r\n            };\r\n        },\r\n        groupValuesRefreshData: [],\r\n        groupValuesRefresh: function () {\r\n            let _this = this;\r\n            let luckysheetfile = getluckysheetfile();\r\n            if (_this.groupValuesRefreshData.length > 0) {\r\n                for (let i = 0; i < _this.groupValuesRefreshData.length; i++) {\r\n                    let item = _this.groupValuesRefreshData[i];    // if(item.i != Store.currentSheetIndex){\r\n                                                                   //     continue;\r\n                                                                   // }\r\n                    // if(item.i != Store.currentSheetIndex){\r\n                    //     continue;\r\n                    // }\r\n                    let file = luckysheetfile[getSheetIndex(item.index)];\r\n                    let data = file.data;\r\n                    if (data == null) {\r\n                        continue;\r\n                    }\r\n                    let updateValue = {};\r\n                    if (item.spe != null) {\r\n                        if (item.spe.type == 'sparklines') {\r\n                            updateValue.spl = item.spe.data;\r\n                        } else if (item.spe.type == 'dynamicArrayItem') {\r\n                            file.dynamicArray = _this.insertUpdateDynamicArray(item.spe.data);\r\n                        }\r\n                    }\r\n                    updateValue.v = item.v;\r\n                    updateValue.f = item.f;\r\n                    setcellvalue(item.r, item.c, data, updateValue);\r\n                    Store.saveParam('v', item.index, item.v, {\r\n                        'r': item.r,\r\n                        'c': item.c\r\n                    });\r\n                }\r\n                Store.webWorkerFlowDataCache(Store.flowdata);    //worker存数据\r\n                //worker存数据\r\n                _this.groupValuesRefreshData = [];\r\n            }\r\n        },\r\n        delFunctionGroup: function (r, c, index) {\r\n            if (index == null) {\r\n                index = Store.currentSheetIndex;\r\n            }\r\n            let luckysheetfile = getluckysheetfile();\r\n            let file = luckysheetfile[getSheetIndex(index)];\r\n            let calcChain = file.calcChain;\r\n            if (calcChain != null) {\r\n                for (let i = 0; i < calcChain.length; i++) {\r\n                    let calc = calcChain[i];\r\n                    if (calc.r == r && calc.c == c && calc.index == index) {\r\n                        calcChain.splice(i, 1);\r\n                        Store.saveParam('fc', index, null, {\r\n                            'op': 'del',\r\n                            'pos': i\r\n                        });\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n            let dynamicArray = file.dynamicArray;\r\n            if (dynamicArray != null) {\r\n                for (let i = 0; i < dynamicArray.length; i++) {\r\n                    let calc = dynamicArray[i];\r\n                    if (calc.r == r && calc.c == c && (calc.index == null || calc.index == index)) {\r\n                        dynamicArray.splice(i, 1);\r\n                        Store.saveParam('ac', index, null, {\r\n                            'op': 'del',\r\n                            'pos': i\r\n                        });\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n            setluckysheetfile(luckysheetfile);\r\n        },\r\n        execfunction: function (txt, r, c, index, isrefresh, notInsertFunc) {\r\n            let _this = this;\r\n            let _locale = locale();\r\n            let locale_formulaMore = _locale.formulaMore;    // console.log(txt,r,c)\r\n            // console.log(txt,r,c)\r\n            if (txt.indexOf(_this.error.r) > -1) {\r\n                return [\r\n                    false,\r\n                    _this.error.r,\r\n                    txt\r\n                ];\r\n            }\r\n            if (!_this.checkBracketNum(txt)) {\r\n                txt += ')';\r\n            }\r\n            if (index == null) {\r\n                index = Store.currentSheetIndex;\r\n            }\r\n            Store.calculateSheetIndex = index;\r\n            let fp = $.trim(_this.functionParserExe(txt));    //console.log(fp)\r\n            //console.log(fp)\r\n            if (fp.substr(0, 20) == 'luckysheet_function.' || fp.substr(0, 22) == 'luckysheet_compareWith') {\r\n                _this.functionHTMLIndex = 0;\r\n            }\r\n            if (!_this.testFunction(txt, fp) || fp == '') {\r\n                tooltip.info('', locale_formulaMore.execfunctionError);\r\n                return [\r\n                    false,\r\n                    _this.error.n,\r\n                    txt\r\n                ];\r\n            }\r\n            let result = null;\r\n            window.luckysheetCurrentRow = r;\r\n            window.luckysheetCurrentColumn = c;\r\n            window.luckysheetCurrentIndex = index;\r\n            window.luckysheetCurrentFunction = txt;\r\n            let sparklines = null;\r\n            try {\r\n                if (fp.indexOf('luckysheet_getcelldata') > -1) {\r\n                    let funcg = fp.split(\"luckysheet_getcelldata('\");\r\n                    for (let i = 1; i < funcg.length; i++) {\r\n                        let funcgStr = funcg[i].split(\"')\")[0];\r\n                        let funcgRange = _this.getcellrange(funcgStr);\r\n                        if (funcgRange.row[0] < 0 || funcgRange.column[0] < 0) {\r\n                            return [\r\n                                true,\r\n                                _this.error.r,\r\n                                txt\r\n                            ];\r\n                        }\r\n                        if (funcgRange.sheetIndex == Store.calculateSheetIndex && r >= funcgRange.row[0] && r <= funcgRange.row[1] && c >= funcgRange.column[0] && c <= funcgRange.column[1]) {\r\n                            if (isEditMode()) {\r\n                                alert(locale_formulaMore.execfunctionSelfError);\r\n                            } else {\r\n                                tooltip.info('', locale_formulaMore.execfunctionSelfErrorResult);\r\n                            }\r\n                            return [\r\n                                false,\r\n                                0,\r\n                                txt\r\n                            ];\r\n                        }\r\n                    }\r\n                }\r\n                result = new Function('return ' + fp)();\r\n                if (typeof result == 'string') {\r\n                    //把之前的非打印控制字符DEL替换回一个双引号。\r\n                    result = result.replace(/\\x7F/g, '\"');\r\n                }    //加入sparklines的参数项目\r\n                //加入sparklines的参数项目\r\n                if (fp.indexOf('SPLINES') > -1) {\r\n                    sparklines = result;\r\n                    result = '';\r\n                }\r\n            } catch (e) {\r\n                let err = e;    //err错误提示处理\r\n                //err错误提示处理\r\n                console.log(e, fp);\r\n                err = _this.errorInfo(err);\r\n                result = [\r\n                    _this.error.n,\r\n                    err\r\n                ];\r\n            }\r\n            //公式结果是对象，则表示只是选区。如果是单个单元格，则返回其值；如果是多个单元格，则返回 #VALUE!。\r\n            if (getObjType(result) == 'object' && result.startCell != null) {\r\n                if (getObjType(result.data) == 'array') {\r\n                    result = _this.error.v;\r\n                } else {\r\n                    if (getObjType(result.data) == 'object' && !isRealNull(result.data.v)) {\r\n                        result = result.data.v;\r\n                    } else if (!isRealNull(result.data)) {\r\n                        //只有data长或宽大于1才可能是选区\r\n                        if (result.cell > 1 || result.rowl > 1) {\r\n                            result = result.data;\r\n                        } else\r\n                            //否则就是单个不为null的没有值v的单元格\r\n                            {\r\n                                result = 0;\r\n                            }\r\n                    } else {\r\n                        result = 0;\r\n                    }\r\n                }\r\n            }    //公式结果是数组，分错误值 和 动态数组 两种情况\r\n            //公式结果是数组，分错误值 和 动态数组 两种情况\r\n            let dynamicArrayItem = null;\r\n            if (getObjType(result) == 'array') {\r\n                let isErr = false;\r\n                if (getObjType(result[0]) != 'array' && result.length == 2) {\r\n                    isErr = valueIsError(result[0]);\r\n                }\r\n                if (!isErr) {\r\n                    if (getObjType(result[0]) == 'array' && result.length == 1 && result[0].length == 1) {\r\n                        result = result[0][0];\r\n                    } else {\r\n                        dynamicArrayItem = {\r\n                            'r': r,\r\n                            'c': c,\r\n                            'f': txt,\r\n                            'index': index,\r\n                            'data': result\r\n                        };\r\n                        result = '';\r\n                    }\r\n                } else {\r\n                    result = result[0];\r\n                }\r\n            }\r\n            window.luckysheetCurrentRow = null;\r\n            window.luckysheetCurrentColumn = null;\r\n            window.luckysheetCurrentIndex = null;\r\n            window.luckysheetCurrentFunction = null;\r\n            if (r != null && c != null) {\r\n                if (isrefresh) {\r\n                    _this.execFunctionGroup(r, c, result, index);\r\n                }\r\n                if (!notInsertFunc) {\r\n                    _this.insertUpdateFunctionGroup(r, c, index);\r\n                }\r\n            }\r\n            if (!!sparklines) {\r\n                return [\r\n                    true,\r\n                    result,\r\n                    txt,\r\n                    {\r\n                        type: 'sparklines',\r\n                        data: sparklines\r\n                    }\r\n                ];\r\n            }\r\n            if (!!dynamicArrayItem) {\r\n                return [\r\n                    true,\r\n                    result,\r\n                    txt,\r\n                    {\r\n                        type: 'dynamicArrayItem',\r\n                        data: dynamicArrayItem\r\n                    }\r\n                ];\r\n            }    // console.log(result, txt);\r\n            // console.log(result, txt);\r\n            return [\r\n                true,\r\n                result,\r\n                txt\r\n            ];\r\n        },\r\n        testFunction: function (txt, fp) {\r\n            if (txt.substr(0, 1) == '=') {\r\n                return true;\r\n            } else {\r\n                return false;\r\n            }\r\n        },\r\n        //供function/functionImplementation.js的EVALUATE函数调用。\r\n        execstringformula: function (txt, r, c, index) {\r\n            let _this = this;\r\n            return this.execfunction(txt, r, c, index);\r\n        },\r\n        functionResizeData: {},\r\n        functionResizeStatus: false,\r\n        functionResizeTimeout: null,\r\n        data_parm_index: 0    //选择公式后参数索引标记\r\n\r\n    };\r\n    //选择公式后参数索引标记\r\n    return luckysheetformula;\r\n});"]}