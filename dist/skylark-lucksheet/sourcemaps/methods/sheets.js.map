{"version":3,"sources":["methods/sheets.js"],"names":["define","m_getdata","m_setdata","m_util","m_get","m_dynamicArray","formula","locale","luckysheetConfigsetting","Store","getObjType","rgbTohex","textTrim","getSheetIndex","dynamicArrayCompute","getcellvalue","datagridgrowth","getcellFormula","setcellvalue","generateRandomSheetIndex","prefix","userAgent","window","navigator","replace","split","mid","i","Math","round","random","length","Date","getTime","generateRandomSheetName","file","isPivotTable","index","title","pivotTable","name","indexOf","suffix","parseFloat","ceil","generateCopySheetName","copySheetName","locale_info","info","toString","copy","copy_i","name2","substring","fileName","st_i","ed_i","num","isRealNum","parseInt","hascopy","getSheetByIndex","getSheetByName","getCurSheetnoset","getCurSheet","hasSheet","getGridData","d","buildGridData","row","defaultrowNum","column","defaultcolumnNum","data","celldata","j","item","r","c","v","autoFormatw","accuracy","undefined","cutGridData","rowindex","isnull","value","$","trim","slice","addGridData","sheetParamRestore","luckysheet_select_save","mc","rs","cs","luckysheet_selection_range","config","zoomRatio","defaultrowlen","defaultcollen","showGridLines","loadOtherFile","_this","this","luckysheetfile","otherfile","checkLoadSheetIndexToDataIndex","checkLoadSheetIndex","calchain","getAllFunctionGroup","chart","ret","cache","push","dataIndexList","f","dataindex","formulaTxt","addToSheetIndexList","formulaContainSheetList","dataSheetIndex","functionParser","str","addToCellList","substr","sheet","pivotDataSheetIndex","setCurSheet","delChart","chart_id","sheetIndex","splice","saveChart","json","old","extend","getChart","getRangetxt","range","currentIndex","sheettxt","currentSheetIndex","row0","row1","column0","column1","chatatABC","getSheetName","getSheetData","getSheetConfig","CacheNotLoadControll","execCache","type","t","copyjson","copyindex","deleIndex","pos","order","load","sha","shc","shd","shr","op","Function","delFunctionGroup","insertUpdateFunctionGroup","k","config1","key","filter","filter_select","cur","status","s","JSON","stringify","cid","vitem","rc","len","cell","mtype","mst","med","luckysheetdeletetable","luckysheetextendtable","saveParam","setTimeout","imageRequest"],"mappings":"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","file":"../../methods/sheets.js","sourcesContent":["define([\r\n    './getdata',\r\n    './setdata',\r\n    '../utils/util',\r\n    './get',\r\n    './dynamicArray',\r\n    './formula_methods',\r\n    '../locale/locale',\r\n    './luckysheetConfigsetting',\r\n    '../store'\r\n], function (m_getdata,m_setdata,m_util, m_get,  m_dynamicArray, formula, locale,luckysheetConfigsetting , Store) {\r\n    'use strict';\r\n    const {getObjType, rgbTohex,textTrim} = m_util;\r\n    const {getSheetIndex} = m_get;\r\n    const {dynamicArrayCompute} = m_dynamicArray;\r\n    const {getcellvalue, datagridgrowth, getcellFormula} = m_getdata;\r\n    const {setcellvalue} = m_setdata;\r\n\r\n\r\n    // from controllers/sheetmanage\r\n    const sheets = {\r\n        generateRandomSheetIndex: function (prefix) {\r\n            if (prefix == null) {\r\n                prefix = 'Sheet';\r\n            }\r\n            let userAgent = window.navigator.userAgent.replace(/[^a-zA-Z0-9]/g, '').split('');\r\n            let mid = '';\r\n            for (let i = 0; i < 12; i++) {\r\n                mid += userAgent[Math.round(Math.random() * (userAgent.length - 1))];\r\n            }\r\n            let time = new Date().getTime();\r\n            return prefix + '_' + mid + '_' + time;\r\n        },\r\n        generateRandomSheetName: function (file, isPivotTable) {\r\n            let index = file.length;\r\n            const locale_pivotTable = locale().pivotTable;\r\n            const title = locale_pivotTable.title;\r\n            for (let i = 0; i < file.length; i++) {\r\n                if (file[i].name.indexOf('Sheet') > -1 || file[i].name.indexOf(title) > -1) {\r\n                    let suffix = parseFloat(file[i].name.replace('Sheet', '').replace(title, ''));\r\n                    if (suffix != 'NaN' && Math.ceil(suffix) > index) {\r\n                        index = Math.ceil(suffix);\r\n                    }\r\n                }\r\n            }\r\n            if (isPivotTable) {\r\n                return title + (index + 1);\r\n            } else {\r\n                return 'Sheet' + (index + 1);\r\n            }\r\n        },\r\n        generateCopySheetName: function (file, name) {\r\n            let copySheetName = '';\r\n            let _locale = locale();\r\n            let locale_info = _locale.info;\r\n            if (name.toString().indexOf('(' + locale_info.copy) > -1) {\r\n                let copy_i = name.toString().indexOf('(' + locale_info.copy);\r\n                let name2 = name.toString().substring(0, copy_i) + '(' + locale_info.copy;\r\n                let index = null;\r\n                for (let i = 0; i < file.length; i++) {\r\n                    let fileName = file[i].name.toString();\r\n                    let st_i = fileName.indexOf(name2);\r\n                    if (st_i > -1) {\r\n                        let ed_i = fileName.indexOf(')', st_i + name2.length);\r\n                        let num = fileName.substring(st_i + name2.length, ed_i);\r\n                        if (isRealNum(num)) {\r\n                            if (index == null || parseInt(num) > index) {\r\n                                index = parseInt(num);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                if (index == null) {\r\n                    copySheetName = name2 + '2)';\r\n                } else {\r\n                    index++;\r\n                    copySheetName = name2 + index + ')';\r\n                }\r\n            } else {\r\n                let index = null;\r\n                let hascopy = false;\r\n                let name2 = name + '(' + locale_info.copy;\r\n                for (let i = 0; i < file.length; i++) {\r\n                    let fileName = file[i].name.toString();\r\n                    let st_i = fileName.indexOf(name2);\r\n                    if (st_i > -1) {\r\n                        hascopy = true;\r\n                        let ed_i = fileName.indexOf(')', st_i + name2.length);\r\n                        let num = fileName.substring(st_i + name2.length, ed_i);\r\n                        if (isRealNum(num)) {\r\n                            if (index == null || parseInt(num) > index) {\r\n                                index = parseInt(num);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                if (hascopy) {\r\n                    if (index == null) {\r\n                        copySheetName = name + '(' + locale_info.copy + '2)';\r\n                    } else {\r\n                        index++;\r\n                        copySheetName = name + '(' + locale_info.copy + '' + index + ')';\r\n                    }\r\n                } else {\r\n                    copySheetName = name + '(' + locale_info.copy + ')';\r\n                }\r\n            }\r\n            return copySheetName;\r\n        },\r\n        getSheetByIndex: function (index) {\r\n            return Store.getSheetIndex(index);\r\n        },\r\n        getSheetByName: function (name) {\r\n            return Store.getSheetByName(name);\r\n        },\r\n        getCurSheetnoset: function () {\r\n            return Store.getCurSheetnoset();\r\n        },\r\n        getCurSheet: function () {\r\n            return Store.getCurSheet();\r\n        },\r\n        hasSheet: function (index) {\r\n            return Store.hasSheet(index);\r\n        },\r\n\r\n        getGridData : function (d) {\r\n            return Store.getGridData(d);\r\n        },\r\n\r\n        buildGridData: function (file) {\r\n            // 如果已经存在二维数据data,那么直接返回data；如果只有celldata，那么就转化成二维数组data，再返回\r\n            let row = file.row == null ? Store.defaultrowNum : file.row, column = file.column == null ? Store.defaultcolumnNum : file.column, data = file.data && file.data.length > 0 ? file.data : datagridgrowth([], row, column), celldata = file.celldata;\r\n            if (file.data && file.data.length > 0) {\r\n                for (let i = 0; i < data.length; i++) {\r\n                    for (let j = 0; j < data[0].length; j++) {\r\n                        setcellvalue(i, j, data, data[i][j]);\r\n                    }\r\n                }\r\n            } else {\r\n                if (celldata && celldata.length > 0) {\r\n                    for (let i = 0; i < celldata.length; i++) {\r\n                        let item = celldata[i];\r\n                        let r = item.r;\r\n                        let c = item.c;\r\n                        let v = item.v;\r\n                        if (r >= data.length) {\r\n                            data = datagridgrowth(data, r - data.length + 1, 0);\r\n                        }\r\n                        if (c >= data[0].length) {\r\n                            data = datagridgrowth(data, 0, c - data[0].length + 1);\r\n                        }\r\n                        setcellvalue(r, c, data, v);\r\n                    }\r\n                }\r\n            }    //亿万格式+精确度 恢复全局初始化\r\n            //亿万格式+精确度 恢复全局初始化\r\n            luckysheetConfigsetting.autoFormatw = false;\r\n            luckysheetConfigsetting.accuracy = undefined;\r\n            return data;\r\n        },\r\n        cutGridData: function (d) {\r\n            let rowindex = 0;\r\n            for (let r = d.length - 1; r >= 0; r--) {\r\n                let isnull = true;\r\n                for (let c = 0; c < d[0].length; c++) {\r\n                    let value = getcellvalue(r, c);\r\n                    if (value != null && $.trim(value).length > 0) {\r\n                        isnull = false;\r\n                        break;\r\n                    }\r\n                }\r\n                if (!isnull) {\r\n                    break;\r\n                } else {\r\n                    rowindex = r;\r\n                }\r\n            }\r\n            return d.slice(0, rowindex);\r\n        },\r\n        addGridData: function (celldata, row, column) {\r\n            let data = datagridgrowth([], row, column);\r\n            if (celldata != null) {\r\n                for (let i = 0; i < celldata.length; i++) {\r\n                    let item = celldata[i];\r\n                    let r = item.r;\r\n                    let c = item.c;\r\n                    let v = item.v;\r\n                    if (r >= data.length) {\r\n                        data = datagridgrowth(data, r - data.length + 1, 0);\r\n                    }\r\n                    if (c >= data[0].length) {\r\n                        data = datagridgrowth(data, 0, c - data[0].length + 1);\r\n                    }\r\n                    setcellvalue(r, c, data, v);\r\n                }\r\n            }\r\n            return data;\r\n        },\r\n\r\n        sheetParamRestore: function (file, data) {\r\n            Store.luckysheet_select_save = file['luckysheet_select_save'];\r\n            if (Store.luckysheet_select_save == null || Store.luckysheet_select_save.length == 0) {\r\n                if (data[0] != null && data[0][0] != null && data[0][0].mc != null) {\r\n                    Store.luckysheet_select_save = [{\r\n                            'row': [\r\n                                0,\r\n                                data[0][0].mc.rs - 1\r\n                            ],\r\n                            'column': [\r\n                                0,\r\n                                data[0][0].mc.cs - 1\r\n                            ]\r\n                        }];\r\n                } else {\r\n                    Store.luckysheet_select_save = [{\r\n                            'row': [\r\n                                0,\r\n                                0\r\n                            ],\r\n                            'column': [\r\n                                0,\r\n                                0\r\n                            ]\r\n                        }];\r\n                }\r\n            }\r\n            Store.luckysheet_selection_range = file['luckysheet_selection_range'] == null ? [] : file['luckysheet_selection_range'];\r\n            Store.config = file['config'] == null ? {} : file['config'];\r\n            Store.zoomRatio = file['zoomRatio'] == null ? 1 : file['zoomRatio'];\r\n            if (file['defaultRowHeight'] != null) {\r\n                Store.defaultrowlen = parseFloat(file['defaultRowHeight']);\r\n            } else {\r\n                Store.defaultrowlen = luckysheetConfigsetting['defaultRowHeight'];\r\n            }\r\n            if (file['defaultColWidth'] != null) {\r\n                Store.defaultcollen = parseFloat(file['defaultColWidth']);\r\n            } else {\r\n                Store.defaultcollen = luckysheetConfigsetting['defaultColWidth'];\r\n            }\r\n            if (file['showGridLines'] != null) {\r\n                let showGridLines = file['showGridLines'];\r\n                if (showGridLines == 0 || showGridLines == false) {\r\n                    Store.showGridLines = false;\r\n                } else {\r\n                    Store.showGridLines = true;\r\n                }\r\n            } else {\r\n                Store.showGridLines = true;\r\n            }\r\n        },\r\n        loadOtherFile: function (file) {\r\n            let _this = this;\r\n            // let sheetindexset = _this.checkLoadSheetIndex(file);\r\n            // let sheetindex = [];\r\n            // for(let i = 0; i < sheetindexset.length; i++){\r\n            //     let item = sheetindexset[i];\r\n            //     if(item == file[\"index\"]){\r\n            //         continue;\r\n            //     }\r\n            //     sheetindex.push(item);\r\n            // }\r\n            // for(let i = 0;i<sheetindex.length;i++){\r\n            //     let item = sheetindex[i];\r\n            //     let otherfile = Store.luckysheetfile[_this.getSheetIndex(item)]; \r\n            //     if(otherfile[\"load\"] == null || otherfile[\"load\"] == \"0\"){\r\n            //         otherfile[\"data\"] = _this.buildGridData(otherfile);\r\n            //         otherfile[\"load\"] = \"1\";\r\n            //     }\r\n            // }\r\n            for (let i = 0; i < Store.luckysheetfile.length; i++) {\r\n                let otherfile = Store.luckysheetfile[i];\r\n                if (otherfile.index == file.index) {\r\n                    continue;\r\n                }    // let otherfile = Store.luckysheetfile[_this.getSheetIndex(item)]; \r\n                // let otherfile = Store.luckysheetfile[_this.getSheetIndex(item)]; \r\n                if (otherfile['load'] == null || otherfile['load'] == '0') {\r\n                    otherfile['data'] = _this.buildGridData(otherfile);\r\n                    otherfile['load'] = '1';\r\n                }\r\n            }\r\n        },\r\n        checkLoadSheetIndexToDataIndex: {},\r\n        checkLoadSheetIndex: function (file) {\r\n            let calchain = formula.getAllFunctionGroup();    //file.calcChain; //index\r\n            //file.calcChain; //index\r\n            let chart = file.chart;    //dataSheetIndex\r\n            //dataSheetIndex\r\n            let pivotTable = file.pivotTable;    //pivotDataSheetIndex\r\n            //pivotDataSheetIndex\r\n            let ret = [], cache = {};\r\n            if (file.index in this.checkLoadSheetIndexToDataIndex) {\r\n                return [];\r\n            }\r\n            ret.push(file.index);\r\n            cache[file.index.toString()] = 1;\r\n            this.checkLoadSheetIndexToDataIndex[file.index] = 1;\r\n            if (calchain != null) {\r\n                let dataIndexList = {};\r\n                for (let i = 0; i < calchain.length; i++) {\r\n                    let f = calchain[i];\r\n                    let dataindex = f.index;\r\n                    let formulaTxt = getcellFormula(f.r, f.c, dataindex);\r\n                    if (formulaTxt == null) {\r\n                        let file = Store.luckysheetfile[this.getSheetIndex(dataindex)];\r\n                        file.data = this.buildGridData(file);\r\n                        formulaTxt = getcellFormula(f.r, f.c, dataindex);\r\n                        if (formulaTxt == null) {\r\n                            continue;\r\n                        }\r\n                    }\r\n                    if (formulaTxt.indexOf('!') == -1) {\r\n                        // dataIndexList[dataindex] = 1;\r\n                        formula.addToSheetIndexList(formulaTxt, dataindex);\r\n                    } else if (formula.formulaContainSheetList != null && formula.formulaContainSheetList[formulaTxt] != null) {\r\n                        for (let dataSheetIndex in formula.formulaContainSheetList[formulaTxt]) {\r\n                            dataIndexList[dataSheetIndex] = 1;\r\n                        }\r\n                    } else {\r\n                        formula.functionParser(formulaTxt, str => {\r\n                            formula.addToCellList(formulaTxt, str);\r\n                            if (str.indexOf('!') > -1) {\r\n                                let name = str.substr(0, str.indexOf('!'));    // dataNameList[name] = true;\r\n                                // dataNameList[name] = true;\r\n                                let sheet = this.getSheetByName(name);\r\n                                if (sheet != null) {\r\n                                    let dataSheetIndex = sheet.index;\r\n                                    dataIndexList[dataSheetIndex] = 1;\r\n                                    formula.addToSheetIndexList(formulaTxt, dataSheetIndex);\r\n                                }\r\n                            }\r\n                        });\r\n                        if (formula.formulaContainSheetList[formulaTxt] == null) {\r\n                            // dataIndexList[dataindex] = 1;\r\n                            formula.addToSheetIndexList(formulaTxt, dataindex);\r\n                        }\r\n                    }\r\n                    if (dataindex == null) {\r\n                        continue;\r\n                    } \r\n                }\r\n                // if(cache[dataindex.toString()] == null){\r\n                //  // ret.push(dataindex);\r\n                //     cache[dataindex.toString()] = 1;\r\n                //     this.checkLoadSheetIndexToDataIndex[dataindex] = 1;\r\n                // }\r\n                for (let index in dataIndexList) {\r\n                    // let sheet = this.getSheetByName(n);\r\n                    // if(sheet==null){\r\n                    //     continue;\r\n                    // }\r\n                    // if(index == Store.currentSheetIndex){\r\n                    //     continue;\r\n                    // }\r\n                    let dataindex = index;\r\n                    if (cache[dataindex.toString()] == null) {\r\n                        ret.push(dataindex);\r\n                        cache[dataindex.toString()] = 1;\r\n                        this.checkLoadSheetIndexToDataIndex[dataindex] = 1;\r\n                    }\r\n                }\r\n            }\r\n            if (chart != null) {\r\n                for (let i = 0; i < chart.length; i++) {\r\n                    let cc = chart[i];\r\n                    let dataindex = cc.dataSheetIndex;\r\n                    if (dataindex == null) {\r\n                        continue;\r\n                    }\r\n                    if (cache[dataindex.toString()] == null) {\r\n                        ret.push(dataindex);\r\n                        cache[dataindex.toString()] = 1;\r\n                    }\r\n                }\r\n            }\r\n            if (pivotTable != null) {\r\n                let dataindex = pivotTable.pivotDataSheetIndex;\r\n                if (dataindex != null && cache[dataindex.toString()] == null) {\r\n                    ret.push(dataindex);\r\n                    cache[dataindex.toString()] = 1;\r\n                }\r\n            }\r\n            return ret;\r\n        },\r\n        setCurSheet: function (index) {\r\n            Store.setCurSheet(index);\r\n        },\r\n        getSheetIndex: function (index) {\r\n            return Store.getSheetIndex(index);\r\n        },\r\n        delChart: function (chart_id, sheetIndex) {\r\n            let index = this.getSheetIndex(sheetIndex);\r\n            let file = Store.luckysheetfile[index];\r\n            if (file.chart == null) {\r\n                file.chart = [];\r\n            } else {\r\n                for (let i = 0; i < file.chart.length; i++) {\r\n                    if (file.chart[i].chart_id == chart_id) {\r\n                        Store.luckysheetfile[index].chart.splice(i, 1);\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        },\r\n        saveChart: function (json) {\r\n            //采用chartMix store存储，弃用Store.luckysheetfile存储，防止重复存储\r\n            let index = this.getSheetIndex(json.sheetIndex);\r\n            let file = Store.luckysheetfile[index];\r\n            if (file.chart == null) {\r\n                file.chart = [];\r\n                file.chart.push(json);\r\n            } else {\r\n                for (let i = 0; i < file.chart.length; i++) {\r\n                    if (file.chart[i].chart_id == json.chart_id) {\r\n                        let old = $.extend(true, {}, file.chart[i]);\r\n                        file.chart[i] = $.extend(true, {}, old, json);\r\n                        return;\r\n                    }\r\n                }\r\n                file.chart.push(json);\r\n            }\r\n        },\r\n        getChart: function (sheetIndex, chart_id) {\r\n            let index = this.getSheetIndex(sheetIndex);\r\n            let file = Store.luckysheetfile[index];\r\n            if (file.chart == null) {\r\n                return null;\r\n            } else {\r\n                for (let i = 0; i < file.chart.length; i++) {\r\n                    if (file.chart[i].chart_id == chart_id) {\r\n                        return file.chart[i];\r\n                    }\r\n                }\r\n                return null;\r\n            }\r\n        },\r\n        getRangetxt: function (sheetIndex, range, currentIndex) {\r\n            let sheettxt = '';\r\n            if (currentIndex == null) {\r\n                currentIndex = Store.currentSheetIndex;\r\n            }\r\n            if (sheetIndex != currentIndex) {\r\n                sheettxt = Store.luckysheetfile[this.getSheetIndex(sheetIndex)].name + '!';\r\n            }\r\n            let row0 = range['row'][0], row1 = range['row'][1];\r\n            let column0 = range['column'][0], column1 = range['column'][1];\r\n            if (row0 == null && row1 == null) {\r\n                return sheettxt + chatatABC(column0) + ':' + chatatABC(column1);\r\n            } else if (column0 == null && column1 == null) {\r\n                return sheettxt + (row0 + 1) + ':' + (row1 + 1);\r\n            } else {\r\n                if (column0 == column1 && row0 == row1) {\r\n                    return sheettxt + chatatABC(column0) + (row0 + 1);\r\n                } else {\r\n                    return sheettxt + chatatABC(column0) + (row0 + 1) + ':' + chatatABC(column1) + (row1 + 1);\r\n                }\r\n            }\r\n        },\r\n        getSheetName: function (sheetIndex) {\r\n            if (sheetIndex == null) {\r\n                sheetIndex = Store.currentSheetIndex;\r\n            }\r\n            return Store.luckysheetfile[this.getSheetIndex(sheetIndex)].name;\r\n        },\r\n\r\n        getSheetData: function (sheetIndex) {\r\n            if (sheetIndex == null) {\r\n                sheetIndex = Store.currentSheetIndex;\r\n            }\r\n            return Store.luckysheetfile[this.getSheetIndex(sheetIndex)].data;\r\n        },\r\n        getSheetConfig: function (sheetIndex) {\r\n            let _this = this;\r\n            if (sheetIndex == null) {\r\n                sheetIndex = Store.currentSheetIndex;\r\n            }\r\n            let config = Store.luckysheetfile[_this.getSheetIndex(sheetIndex)].config;\r\n            if (config == null) {\r\n                Store.luckysheetfile[_this.getSheetIndex(sheetIndex)].config = {};\r\n            }\r\n            return Store.luckysheetfile[_this.getSheetIndex(sheetIndex)].config;\r\n        },\r\n        CacheNotLoadControll: [],\r\n        execCache: function (item) {\r\n            let _this = this;\r\n            let type = item.t;\r\n            let index = item.i;\r\n            let value = item.v;\r\n            let file = Store.luckysheetfile[_this.getSheetIndex(index)];\r\n            if (type == 'sha') {\r\n                Store.luckysheetfile.push(value);\r\n            } else if (type == 'shc') {\r\n                let copyjson = $.extend(true, {}, Store.luckysheetfile[_this.getSheetIndex(value.copyindex)]);\r\n                copyjson.index = index;\r\n                Store.luckysheetfile.push(copyjson);\r\n            } else if (type == 'shd') {\r\n                Store.luckysheetfile.splice(value.deleIndex, 1);\r\n            } else if (type == 'shr') {\r\n                for (let pos in value) {\r\n                    Store.luckysheetfile[_this.getSheetIndex(pos)].order = value[pos];\r\n                }\r\n            }\r\n            if ((file == null || file.load != '1') && !(type in {\r\n                    'sha': 0,\r\n                    'shc': 0,\r\n                    'shd': 0,\r\n                    'shr': 0\r\n                })) {\r\n                _this.CacheNotLoadControll.push(item);\r\n                return;\r\n            }\r\n            if (type == 'v') {\r\n                let r = item.r, c = item.c, v = item.v;\r\n                let data = _this.getSheetData(index);\r\n                file.data[r][c] = v;\r\n            } else if (type == 'fc') {\r\n                let op = item.op, pos = item.pos;\r\n                if (getObjType(value) != 'object') {\r\n                    value = new Function('return ' + value)();\r\n                }\r\n                let r = value.r, c = value.c;\r\n                if (op == 'del') {\r\n                    formula.delFunctionGroup(r, c, index);\r\n                } else {\r\n                    formula.insertUpdateFunctionGroup(r, c, index);\r\n                }\r\n            } else if (type == 'cg') {\r\n                let v = value, k = item.k;\r\n                let config1 = _this.getSheetConfig(index);\r\n                if (!(k in config1)) {\r\n                    config1[k] = {};\r\n                }\r\n                for (let key in v) {\r\n                    config1[k][key] = v[key];\r\n                }\r\n                Store.config = config1;\r\n            } else if (type == 'f') {\r\n                let v = value, op = item.op, pos = item.pos;\r\n                let filter = file.filter;\r\n                if (filter == null) {\r\n                    filter = {};\r\n                }\r\n                if (op == 'upOrAdd') {\r\n                    filter[pos] = v;\r\n                } else if (op == 'del') {\r\n                    delete filter[pos];\r\n                }\r\n            } else if (type == 'fsc') {\r\n                file.filter = null;\r\n                file.filter_select = null;\r\n            } else if (type == 'fsr') {\r\n                let v = value;\r\n                file.filter = v.filter;\r\n                file.filter_select = v.filter_select;\r\n            } else if (type == 'sh') {\r\n                let op = item.op, cur = item.cur, v = value;\r\n                if (op == 'hide') {\r\n                    file.status = 0;\r\n                    Store.luckysheetfile[_this.getSheetIndex(cur)].status = 1;\r\n                } else if (op == 'show') {\r\n                    for (let i = 0; i < Store.luckysheetfile.length; i++) {\r\n                        Store.luckysheetfile[i].status = 0;\r\n                    }\r\n                    file.status = 1;\r\n                }\r\n            } else if (type == 'all') {\r\n                let k = item.k, s = item.s;\r\n                if (s && getObjType(value) != 'object') {\r\n                    file[k] = JSON.stringify(value);\r\n                } else {\r\n                    file[k] = value;\r\n                }\r\n            } else if (type == 'c') {\r\n                let op = item.op, cid = item.cid;\r\n                if (op == 'add') {\r\n                    file.chart.push(value);\r\n                } else if (op == 'xy' || op == 'wh' || op == 'update') {\r\n                    for (let i = 0; i < file.chart.length; i++) {\r\n                        if (file.chart[i].chart_id == cid) {\r\n                            for (let item in file.chart[i]) {\r\n                                for (let vitem in value) {\r\n                                    if (item == vitem) {\r\n                                        file.chart[i][item] = value[vitem];\r\n                                    }\r\n                                }\r\n                            }\r\n                            return;\r\n                        }\r\n                    }\r\n                } else if (op == 'del') {\r\n                    for (let i = 0; i < file.chart.length; i++) {\r\n                        if (file.chart[i].chart_id == cid) {\r\n                            file.chart.splice(i, 1);\r\n                            return;\r\n                        }\r\n                    }\r\n                }\r\n            } else if (type == 'drc') {\r\n                let rc = item.rc, index = value.index, len = value.len;\r\n                let celldata = file.celldata;\r\n                if (rc == 'r') {\r\n                    for (let i = 0; celldata.length == 0; i++) {\r\n                        let cell = celldata[i];\r\n                        if (cell.r >= index && cell.r < index + len) {\r\n                            delete celldata[i];\r\n                        } else if (cell.r >= index + len) {\r\n                            cell.r -= len;\r\n                        }\r\n                    }\r\n                    file.row -= len;\r\n                } else {\r\n                    for (let i = 0; celldata.length == 0; i++) {\r\n                        let cell = celldata[i];\r\n                        if (cell.c >= index && cell.c < index + len) {\r\n                            delete celldata[i];\r\n                        } else if (cell.c >= index + len) {\r\n                            cell.c -= len;\r\n                        }\r\n                    }\r\n                    file.column -= len;\r\n                }\r\n                let ret = [];\r\n                for (let i = 0; i < celldata.length; i++) {\r\n                    if (celldata[i] != null) {\r\n                        ret.push(celldata[i]);\r\n                    }\r\n                }\r\n                file.celldata = ret;\r\n                let mtype, mst, med;\r\n                if (rc == 'r') {\r\n                    mtype = 'row';\r\n                } else {\r\n                    mtype = 'column';\r\n                }\r\n                mst = index;\r\n                med = index + len - 1;\r\n                luckysheetdeletetable(mtype, mst, med, true);\r\n            } else if (type == 'arc') {\r\n                let rc = item.rc, index = value.index, len = value.len;\r\n                let celldata = file.celldata;\r\n                if (rc == 'r') {\r\n                    for (let i = 0; i < celldata.length; i++) {\r\n                        let cell = celldata[i];\r\n                        if (cell.r > index) {\r\n                            cell.r += len;\r\n                        }\r\n                    }\r\n                    file.row += len;\r\n                } else {\r\n                    for (let i = 0; i < celldata.length; i++) {\r\n                        let cell = celldata[i];\r\n                        if (cell.c > index) {\r\n                            cell.c += len;\r\n                        }\r\n                    }\r\n                    file.column += len;\r\n                }\r\n                let mtype;\r\n                if (rc == 'r') {\r\n                    mtype = 'row';\r\n                } else {\r\n                    mtype = 'column';\r\n                }\r\n                luckysheetextendtable(mtype, index, len, true);\r\n            } else if (type == 'na') {\r\n                Store.saveParam('na', null, value);\r\n            } else if (type == 'thumb') {\r\n                setTimeout(function () {\r\n                    _this.imageRequest();\r\n                }, 2000);\r\n            }\r\n        }\r\n    };\r\n\r\n    return sheets;\r\n});"]}