{"version":3,"sources":["methods/conditionformat_methods.js"],"names":["define","m_get","m_util","formula","m_validate","m_getdata","m_format","luckysheetConfigsetting","locale","m_protection","Store","dayjs","getSheetIndex","getRangetxt","replaceHtml","getObjType","chatatABC","isRealNull","isEditMode","getcellvalue","genarate","checkProtectionFormatCells","fileClone","editorRule","selectRange","selectStatus","dataBarList","format","colorGradationList","getTxtByRange","range","length","txt","s","r1","row","r2","c1","column","c2","push","currentSheetIndex","join","getRangeByTxt","toString","indexOf","arr","split","i","iscelldata","getcellrange","CFSplitRange","range1","range2","range3","type","offset_r","offset_c","getcolorGradation","color1","color2","value1","value2","value","rgb1","parseInt","g1","b1","rgb2","g2","b2","Math","round","getCFPartRange","sheetIndex","ruleArr","cf","luckysheetfile","luckysheet_conditionformat_save","label","cellrange","j","checksCF","r","c","computeMap","getComputeMap","index","data","this","compute","d","_this","max","min","cell","t","v","plusLen","minusLen","abs","valueLen","valueType","dataBar","sum","count","avg","floor","cellColor","len","leftMin","top","a","b","v1","v2","v3","left","icons","v4","v5","conditionName","conditionValue0","conditionValue","conditionValue1","textColor","vBig","vSmall","dBig","dSmall","str","trim","ct","cellVal","dmap","item","x","dArr","k","temp","cArr","slice","averageNum","edr","stc","edc","formulaTxt","func","offsetRow","offsetCol","functionCopy","execfunction","Number","updateItem","fileH","$","extend","historyRules","getHistoryRules","rule","fileC","currentRules","getCurrentRules","ref","allowUpdate","saveParam","h","clearjfundo","jfundo","redo","jfredo","refresh"],"mappings":"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","file":"../../methods/conditionformat_methods.js","sourcesContent":["define([\r\n    '../methods/get',\r\n    '../utils/util',\r\n    '../methods/formula_methods',\r\n    '../methods/validate',\r\n    '../methods/getdata',\r\n    '../methods/format',\r\n    '../methods/luckysheetConfigsetting',\r\n    '../locale/locale',\r\n    '../methods/protection_methods',\r\n    '../store',\r\n    'skylark-moment'\r\n], function (m_get, m_util, formula, m_validate,  m_getdata, m_format, luckysheetConfigsetting, locale, m_protection, Store, dayjs) {\r\n    'use strict';\r\n    const {getSheetIndex, getRangetxt} = m_get;\r\n    const {replaceHtml, getObjType, chatatABC} = m_util;\r\n    const {isRealNull} = m_validate;\r\n    const {isEditMode} = luckysheetConfigsetting;\r\n    const {getcellvalue} = m_getdata;\r\n    const {genarate} = m_format;\r\n    const {checkProtectionFormatCells} = m_protection;\r\n    //条件格式\r\n    const conditionformat = {\r\n        fileClone: [],\r\n        editorRule: null,\r\n\r\n        selectRange: [],\r\n        selectStatus: false,\r\n        dataBarList: [\r\n            {\r\n                'format': [\r\n                    '#638ec6',\r\n                    '#ffffff'\r\n                ]\r\n            },\r\n            //蓝-白渐变 数据条\r\n            {\r\n                'format': [\r\n                    '#63c384',\r\n                    '#ffffff'\r\n                ]\r\n            },\r\n            //绿-白渐变 数据条\r\n            {\r\n                'format': [\r\n                    '#ff555a',\r\n                    '#ffffff'\r\n                ]\r\n            },\r\n            //红-白渐变 数据条\r\n            {\r\n                'format': [\r\n                    '#ffb628',\r\n                    '#ffffff'\r\n                ]\r\n            },\r\n            //橙-白渐变 数据条\r\n            {\r\n                'format': [\r\n                    '#008aef',\r\n                    '#ffffff'\r\n                ]\r\n            },\r\n            //浅蓝-白渐变 数据条\r\n            {\r\n                'format': [\r\n                    '#d6007b',\r\n                    '#ffffff'\r\n                ]\r\n            },\r\n            //紫-白渐变 数据条\r\n            { 'format': ['#638ec6'] },\r\n            //蓝色 数据条\r\n            { 'format': ['#63c384'] },\r\n            //绿色 数据条\r\n            { 'format': ['#ff555a'] },\r\n            //红色 数据条\r\n            { 'format': ['#ffb628'] },\r\n            //橙色 数据条\r\n            { 'format': ['#008aef'] },\r\n            //浅蓝色 数据条\r\n            { 'format': ['#d6007b'] }    //紫色 数据条\r\n        ],\r\n        //紫色 数据条\r\n        colorGradationList: [\r\n            {\r\n                'format': [\r\n                    'rgb(99, 190, 123)',\r\n                    'rgb(255, 235, 132)',\r\n                    'rgb(248, 105, 107)'\r\n                ]\r\n            },\r\n            //绿-黄-红色阶\r\n            {\r\n                'format': [\r\n                    'rgb(248, 105, 107)',\r\n                    'rgb(255, 235, 132)',\r\n                    'rgb(99, 190, 123)'\r\n                ]\r\n            },\r\n            //红-黄-绿色阶\r\n            {\r\n                'format': [\r\n                    'rgb(99, 190, 123)',\r\n                    'rgb(252, 252, 255)',\r\n                    'rgb(248, 105, 107)'\r\n                ]\r\n            },\r\n            //绿-白-红色阶\r\n            {\r\n                'format': [\r\n                    'rgb(248, 105, 107)',\r\n                    'rgb(252, 252, 255)',\r\n                    'rgb(99, 190, 123)'\r\n                ]\r\n            },\r\n            //红-白-绿色阶\r\n            {\r\n                'format': [\r\n                    'rgb(90, 138, 198)',\r\n                    'rgb(252, 252, 255)',\r\n                    'rgb(248, 105, 107)'\r\n                ]\r\n            },\r\n            //蓝-白-红色阶\r\n            {\r\n                'format': [\r\n                    'rgb(248, 105, 107)',\r\n                    'rgb(252, 252, 255)',\r\n                    'rgb(90, 138, 198)'\r\n                ]\r\n            },\r\n            //红-白-蓝色阶\r\n            {\r\n                'format': [\r\n                    'rgb(252, 252, 255)',\r\n                    'rgb(248, 105, 107)'\r\n                ]\r\n            },\r\n            //白-红色阶\r\n            {\r\n                'format': [\r\n                    'rgb(248, 105, 107)',\r\n                    'rgb(252, 252, 255)'\r\n                ]\r\n            },\r\n            //红-白色阶\r\n            {\r\n                'format': [\r\n                    'rgb(99, 190, 123)',\r\n                    'rgb(252, 252, 255)'\r\n                ]\r\n            },\r\n            //绿-白色阶\r\n            {\r\n                'format': [\r\n                    'rgb(252, 252, 255)',\r\n                    'rgb(99, 190, 123)'\r\n                ]\r\n            },\r\n            //白-绿色阶\r\n            {\r\n                'format': [\r\n                    'rgb(99, 190, 123)',\r\n                    'rgb(255, 235, 132)'\r\n                ]\r\n            },\r\n            //绿-黄色阶\r\n            {\r\n                'format': [\r\n                    'rgb(255, 235, 132)',\r\n                    'rgb(99, 190, 123)'\r\n                ]\r\n            }    //黄-绿色阶\r\n        ],\r\n\r\n        getTxtByRange: function (range) {\r\n            if (range.length > 0) {\r\n                let txt = [];\r\n                for (let s = 0; s < range.length; s++) {\r\n                    let r1 = range[s].row[0], r2 = range[s].row[1];\r\n                    let c1 = range[s].column[0], c2 = range[s].column[1];\r\n                    txt.push(getRangetxt(Store.currentSheetIndex, {\r\n                        'row': [\r\n                            r1,\r\n                            r2\r\n                        ],\r\n                        'column': [\r\n                            c1,\r\n                            c2\r\n                        ]\r\n                    }, Store.currentSheetIndex));\r\n                }\r\n                return txt.join(',');\r\n            }\r\n        },\r\n        getRangeByTxt: function (txt) {\r\n            let range = [];\r\n            txt = txt.toString();\r\n            if (txt.indexOf(',') != -1) {\r\n                let arr = txt.split(',');\r\n                for (let i = 0; i < arr.length; i++) {\r\n                    if (formula.iscelldata(arr[i])) {\r\n                        range.push(formula.getcellrange(arr[i]));\r\n                    } else {\r\n                        range = [];\r\n                        break;\r\n                    }\r\n                }\r\n            } else {\r\n                if (formula.iscelldata(txt)) {\r\n                    range.push(formula.getcellrange(txt));\r\n                }\r\n            }\r\n            return range;\r\n        },\r\n\r\n\r\n        CFSplitRange: function (range1, range2, range3, type) {\r\n            let range = [];\r\n            let offset_r = range3['row'][0] - range2['row'][0];\r\n            let offset_c = range3['column'][0] - range2['column'][0];\r\n            let r1 = range1['row'][0], r2 = range1['row'][1];\r\n            let c1 = range1['column'][0], c2 = range1['column'][1];\r\n            if (r1 >= range2['row'][0] && r2 <= range2['row'][1] && c1 >= range2['column'][0] && c2 <= range2['column'][1]) {\r\n                //选区 包含 条件格式应用范围 全部\r\n                if (type == 'allPart') {\r\n                    //所有部分\r\n                    range = [{\r\n                            'row': [\r\n                                r1 + offset_r,\r\n                                r2 + offset_r\r\n                            ],\r\n                            'column': [\r\n                                c1 + offset_c,\r\n                                c2 + offset_c\r\n                            ]\r\n                        }];\r\n                } else if (type == 'restPart') {\r\n                    //剩余部分\r\n                    range = [];\r\n                } else if (type == 'operatePart') {\r\n                    //操作部分\r\n                    range = [{\r\n                            'row': [\r\n                                r1 + offset_r,\r\n                                r2 + offset_r\r\n                            ],\r\n                            'column': [\r\n                                c1 + offset_c,\r\n                                c2 + offset_c\r\n                            ]\r\n                        }];\r\n                }\r\n            } else if (r1 >= range2['row'][0] && r1 <= range2['row'][1] && c1 >= range2['column'][0] && c2 <= range2['column'][1]) {\r\n                //选区 行贯穿 条件格式应用范围 上部分\r\n                if (type == 'allPart') {\r\n                    //所有部分\r\n                    range = [\r\n                        {\r\n                            'row': [\r\n                                range2['row'][1] + 1,\r\n                                r2\r\n                            ],\r\n                            'column': [\r\n                                c1,\r\n                                c2\r\n                            ]\r\n                        },\r\n                        {\r\n                            'row': [\r\n                                r1 + offset_r,\r\n                                range2['row'][1] + offset_r\r\n                            ],\r\n                            'column': [\r\n                                c1 + offset_c,\r\n                                c2 + offset_c\r\n                            ]\r\n                        }\r\n                    ];\r\n                } else if (type == 'restPart') {\r\n                    //剩余部分\r\n                    range = [{\r\n                            'row': [\r\n                                range2['row'][1] + 1,\r\n                                r2\r\n                            ],\r\n                            'column': [\r\n                                c1,\r\n                                c2\r\n                            ]\r\n                        }];\r\n                } else if (type == 'operatePart') {\r\n                    //操作部分\r\n                    range = [{\r\n                            'row': [\r\n                                r1 + offset_r,\r\n                                range2['row'][1] + offset_r\r\n                            ],\r\n                            'column': [\r\n                                c1 + offset_c,\r\n                                c2 + offset_c\r\n                            ]\r\n                        }];\r\n                }\r\n            } else if (r2 >= range2['row'][0] && r2 <= range2['row'][1] && c1 >= range2['column'][0] && c2 <= range2['column'][1]) {\r\n                //选区 行贯穿 条件格式应用范围 下部分\r\n                if (type == 'allPart') {\r\n                    //所有部分\r\n                    range = [\r\n                        {\r\n                            'row': [\r\n                                r1,\r\n                                range2['row'][0] - 1\r\n                            ],\r\n                            'column': [\r\n                                c1,\r\n                                c2\r\n                            ]\r\n                        },\r\n                        {\r\n                            'row': [\r\n                                range2['row'][0] + offset_r,\r\n                                r2 + offset_r\r\n                            ],\r\n                            'column': [\r\n                                c1 + offset_c,\r\n                                c2 + offset_c\r\n                            ]\r\n                        }\r\n                    ];\r\n                } else if (type == 'restPart') {\r\n                    //剩余部分\r\n                    range = [{\r\n                            'row': [\r\n                                r1,\r\n                                range2['row'][0] - 1\r\n                            ],\r\n                            'column': [\r\n                                c1,\r\n                                c2\r\n                            ]\r\n                        }];\r\n                } else if (type == 'operatePart') {\r\n                    //操作部分\r\n                    range = [{\r\n                            'row': [\r\n                                range2['row'][0] + offset_r,\r\n                                r2 + offset_r\r\n                            ],\r\n                            'column': [\r\n                                c1 + offset_c,\r\n                                c2 + offset_c\r\n                            ]\r\n                        }];\r\n                }\r\n            } else if (r1 < range2['row'][0] && r2 > range2['row'][1] && c1 >= range2['column'][0] && c2 <= range2['column'][1]) {\r\n                //选区 行贯穿 条件格式应用范围 中间部分\r\n                if (type == 'allPart') {\r\n                    //所有部分\r\n                    range = [\r\n                        {\r\n                            'row': [\r\n                                r1,\r\n                                range2['row'][0] - 1\r\n                            ],\r\n                            'column': [\r\n                                c1,\r\n                                c2\r\n                            ]\r\n                        },\r\n                        {\r\n                            'row': [\r\n                                range2['row'][1] + 1,\r\n                                r2\r\n                            ],\r\n                            'column': [\r\n                                c1,\r\n                                c2\r\n                            ]\r\n                        },\r\n                        {\r\n                            'row': [\r\n                                range2['row'][0] + offset_r,\r\n                                range2['row'][1] + offset_r\r\n                            ],\r\n                            'column': [\r\n                                c1 + offset_c,\r\n                                c2 + offset_c\r\n                            ]\r\n                        }\r\n                    ];\r\n                } else if (type == 'restPart') {\r\n                    //剩余部分\r\n                    range = [\r\n                        {\r\n                            'row': [\r\n                                r1,\r\n                                range2['row'][0] - 1\r\n                            ],\r\n                            'column': [\r\n                                c1,\r\n                                c2\r\n                            ]\r\n                        },\r\n                        {\r\n                            'row': [\r\n                                range2['row'][1] + 1,\r\n                                r2\r\n                            ],\r\n                            'column': [\r\n                                c1,\r\n                                c2\r\n                            ]\r\n                        }\r\n                    ];\r\n                } else if (type == 'operatePart') {\r\n                    //操作部分\r\n                    range = [{\r\n                            'row': [\r\n                                range2['row'][0] + offset_r,\r\n                                range2['row'][1] + offset_r\r\n                            ],\r\n                            'column': [\r\n                                c1 + offset_c,\r\n                                c2 + offset_c\r\n                            ]\r\n                        }];\r\n                }\r\n            } else if (c1 >= range2['column'][0] && c1 <= range2['column'][1] && r1 >= range2['row'][0] && r2 <= range2['row'][1]) {\r\n                //选区 列贯穿 条件格式应用范围 左部分\r\n                if (type == 'allPart') {\r\n                    //所有部分\r\n                    range = [\r\n                        {\r\n                            'row': [\r\n                                r1,\r\n                                r2\r\n                            ],\r\n                            'column': [\r\n                                range2['column'][1] + 1,\r\n                                c2\r\n                            ]\r\n                        },\r\n                        {\r\n                            'row': [\r\n                                r1 + offset_r,\r\n                                r2 + offset_r\r\n                            ],\r\n                            'column': [\r\n                                c1 + offset_c,\r\n                                range2['column'][1] + offset_c\r\n                            ]\r\n                        }\r\n                    ];\r\n                } else if (type == 'restPart') {\r\n                    //剩余部分\r\n                    range = [{\r\n                            'row': [\r\n                                r1,\r\n                                r2\r\n                            ],\r\n                            'column': [\r\n                                range2['column'][1] + 1,\r\n                                c2\r\n                            ]\r\n                        }];\r\n                } else if (type == 'operatePart') {\r\n                    //操作部分\r\n                    range = [{\r\n                            'row': [\r\n                                r1 + offset_r,\r\n                                r2 + offset_r\r\n                            ],\r\n                            'column': [\r\n                                c1 + offset_c,\r\n                                range2['column'][1] + offset_c\r\n                            ]\r\n                        }];\r\n                }\r\n            } else if (c2 >= range2['column'][0] && c2 <= range2['column'][1] && r1 >= range2['row'][0] && r2 <= range2['row'][1]) {\r\n                //选区 列贯穿 条件格式应用范围 右部分\r\n                if (type == 'allPart') {\r\n                    //所有部分\r\n                    range = [\r\n                        {\r\n                            'row': [\r\n                                r1,\r\n                                r2\r\n                            ],\r\n                            'column': [\r\n                                c1,\r\n                                range2['column'][0] - 1\r\n                            ]\r\n                        },\r\n                        {\r\n                            'row': [\r\n                                r1 + offset_r,\r\n                                r2 + offset_r\r\n                            ],\r\n                            'column': [\r\n                                range2['column'][0] + offset_c,\r\n                                c2 + offset_c\r\n                            ]\r\n                        }\r\n                    ];\r\n                } else if (type == 'restPart') {\r\n                    //剩余部分\r\n                    range = [{\r\n                            'row': [\r\n                                r1,\r\n                                r2\r\n                            ],\r\n                            'column': [\r\n                                c1,\r\n                                range2['column'][0] - 1\r\n                            ]\r\n                        }];\r\n                } else if (type == 'operatePart') {\r\n                    //操作部分\r\n                    range = [{\r\n                            'row': [\r\n                                r1 + offset_r,\r\n                                r2 + offset_r\r\n                            ],\r\n                            'column': [\r\n                                range2['column'][0] + offset_c,\r\n                                c2 + offset_c\r\n                            ]\r\n                        }];\r\n                }\r\n            } else if (c1 < range2['column'][0] && c2 > range2['column'][1] && r1 >= range2['row'][0] && r2 <= range2['row'][1]) {\r\n                //选区 列贯穿 条件格式应用范围 中间部分\r\n                if (type == 'allPart') {\r\n                    //所有部分\r\n                    range = [\r\n                        {\r\n                            'row': [\r\n                                r1,\r\n                                r2\r\n                            ],\r\n                            'column': [\r\n                                c1,\r\n                                range2['column'][0] - 1\r\n                            ]\r\n                        },\r\n                        {\r\n                            'row': [\r\n                                r1,\r\n                                r2\r\n                            ],\r\n                            'column': [\r\n                                range2['column'][1] + 1,\r\n                                c2\r\n                            ]\r\n                        },\r\n                        {\r\n                            'row': [\r\n                                r1 + offset_r,\r\n                                r2 + offset_r\r\n                            ],\r\n                            'column': [\r\n                                range2['column'][0] + offset_c,\r\n                                range2['column'][1] + offset_c\r\n                            ]\r\n                        }\r\n                    ];\r\n                } else if (type == 'restPart') {\r\n                    //剩余部分\r\n                    range = [\r\n                        {\r\n                            'row': [\r\n                                r1,\r\n                                r2\r\n                            ],\r\n                            'column': [\r\n                                c1,\r\n                                range2['column'][0] - 1\r\n                            ]\r\n                        },\r\n                        {\r\n                            'row': [\r\n                                r1,\r\n                                r2\r\n                            ],\r\n                            'column': [\r\n                                range2['column'][1] + 1,\r\n                                c2\r\n                            ]\r\n                        }\r\n                    ];\r\n                } else if (type == 'operatePart') {\r\n                    //操作部分\r\n                    range = [{\r\n                            'row': [\r\n                                r1 + offset_r,\r\n                                r2 + offset_r\r\n                            ],\r\n                            'column': [\r\n                                range2['column'][0] + offset_c,\r\n                                range2['column'][1] + offset_c\r\n                            ]\r\n                        }];\r\n                }\r\n            } else if (r1 >= range2['row'][0] && r1 <= range2['row'][1] && c1 >= range2['column'][0] && c1 <= range2['column'][1]) {\r\n                //选区 包含 条件格式应用范围 左上角部分\r\n                if (type == 'allPart') {\r\n                    //所有部分\r\n                    range = [\r\n                        {\r\n                            'row': [\r\n                                r1,\r\n                                range2['row'][1]\r\n                            ],\r\n                            'column': [\r\n                                range2['column'][1] + 1,\r\n                                c2\r\n                            ]\r\n                        },\r\n                        {\r\n                            'row': [\r\n                                range2['row'][1] + 1,\r\n                                r2\r\n                            ],\r\n                            'column': [\r\n                                c1,\r\n                                c2\r\n                            ]\r\n                        },\r\n                        {\r\n                            'row': [\r\n                                r1 + offset_r,\r\n                                range2['row'][1] + offset_r\r\n                            ],\r\n                            'column': [\r\n                                c1 + offset_c,\r\n                                range2['column'][1] + offset_c\r\n                            ]\r\n                        }\r\n                    ];\r\n                } else if (type == 'restPart') {\r\n                    //剩余部分\r\n                    range = [\r\n                        {\r\n                            'row': [\r\n                                r1,\r\n                                range2['row'][1]\r\n                            ],\r\n                            'column': [\r\n                                range2['column'][1] + 1,\r\n                                c2\r\n                            ]\r\n                        },\r\n                        {\r\n                            'row': [\r\n                                range2['row'][1] + 1,\r\n                                r2\r\n                            ],\r\n                            'column': [\r\n                                c1,\r\n                                c2\r\n                            ]\r\n                        }\r\n                    ];\r\n                } else if (type == 'operatePart') {\r\n                    //操作部分\r\n                    range = [{\r\n                            'row': [\r\n                                r1 + offset_r,\r\n                                range2['row'][1] + offset_r\r\n                            ],\r\n                            'column': [\r\n                                c1 + offset_c,\r\n                                range2['column'][1] + offset_c\r\n                            ]\r\n                        }];\r\n                }\r\n            } else if (r1 >= range2['row'][0] && r1 <= range2['row'][1] && c2 >= range2['column'][0] && c2 <= range2['column'][1]) {\r\n                //选区 包含 条件格式应用范围 右上角部分\r\n                if (type == 'allPart') {\r\n                    //所有部分\r\n                    range = [\r\n                        {\r\n                            'row': [\r\n                                r1,\r\n                                range2['row'][1]\r\n                            ],\r\n                            'column': [\r\n                                c1,\r\n                                range2['column'][0] - 1\r\n                            ]\r\n                        },\r\n                        {\r\n                            'row': [\r\n                                range2['row'][1] + 1,\r\n                                r2\r\n                            ],\r\n                            'column': [\r\n                                c1,\r\n                                c2\r\n                            ]\r\n                        },\r\n                        {\r\n                            'row': [\r\n                                r1 + offset_r,\r\n                                range2['row'][1] + offset_r\r\n                            ],\r\n                            'column': [\r\n                                range2['column'][0] + offset_c,\r\n                                c2 + offset_c\r\n                            ]\r\n                        }\r\n                    ];\r\n                } else if (type == 'restPart') {\r\n                    //剩余部分\r\n                    range = [\r\n                        {\r\n                            'row': [\r\n                                r1,\r\n                                range2['row'][1]\r\n                            ],\r\n                            'column': [\r\n                                c1,\r\n                                range2['column'][0] - 1\r\n                            ]\r\n                        },\r\n                        {\r\n                            'row': [\r\n                                range2['row'][1] + 1,\r\n                                r2\r\n                            ],\r\n                            'column': [\r\n                                c1,\r\n                                c2\r\n                            ]\r\n                        }\r\n                    ];\r\n                } else if (type == 'operatePart') {\r\n                    //操作部分\r\n                    range = [{\r\n                            'row': [\r\n                                r1 + offset_r,\r\n                                range2['row'][1] + offset_r\r\n                            ],\r\n                            'column': [\r\n                                range2['column'][0] + offset_c,\r\n                                c2 + offset_c\r\n                            ]\r\n                        }];\r\n                }\r\n            } else if (r2 >= range2['row'][0] && r2 <= range2['row'][1] && c1 >= range2['column'][0] && c1 <= range2['column'][1]) {\r\n                //选区 包含 条件格式应用范围 左下角部分\r\n                if (type == 'allPart') {\r\n                    //所有部分\r\n                    range = [\r\n                        {\r\n                            'row': [\r\n                                r1,\r\n                                range2['row'][0] - 1\r\n                            ],\r\n                            'column': [\r\n                                c1,\r\n                                c2\r\n                            ]\r\n                        },\r\n                        {\r\n                            'row': [\r\n                                range2['row'][0],\r\n                                r2\r\n                            ],\r\n                            'column': [\r\n                                range2['column'][1] + 1,\r\n                                c2\r\n                            ]\r\n                        },\r\n                        {\r\n                            'row': [\r\n                                range2['row'][0] + offset_r,\r\n                                r2 + offset_r\r\n                            ],\r\n                            'column': [\r\n                                c1 + offset_c,\r\n                                range2['column'][1] + offset_c\r\n                            ]\r\n                        }\r\n                    ];\r\n                } else if (type == 'restPart') {\r\n                    //剩余部分\r\n                    range = [\r\n                        {\r\n                            'row': [\r\n                                r1,\r\n                                range2['row'][0] - 1\r\n                            ],\r\n                            'column': [\r\n                                c1,\r\n                                c2\r\n                            ]\r\n                        },\r\n                        {\r\n                            'row': [\r\n                                range2['row'][0],\r\n                                r2\r\n                            ],\r\n                            'column': [\r\n                                range2['column'][1] + 1,\r\n                                c2\r\n                            ]\r\n                        }\r\n                    ];\r\n                } else if (type == 'operatePart') {\r\n                    //操作部分\r\n                    range = [{\r\n                            'row': [\r\n                                range2['row'][0] + offset_r,\r\n                                r2 + offset_r\r\n                            ],\r\n                            'column': [\r\n                                c1 + offset_c,\r\n                                range2['column'][1] + offset_c\r\n                            ]\r\n                        }];\r\n                }\r\n            } else if (r2 >= range2['row'][0] && r2 <= range2['row'][1] && c2 >= range2['column'][0] && c2 <= range2['column'][1]) {\r\n                //选区 包含 条件格式应用范围 右下角部分\r\n                if (type == 'allPart') {\r\n                    //所有部分\r\n                    range = [\r\n                        {\r\n                            'row': [\r\n                                r1,\r\n                                range2['row'][0] - 1\r\n                            ],\r\n                            'column': [\r\n                                c1,\r\n                                c2\r\n                            ]\r\n                        },\r\n                        {\r\n                            'row': [\r\n                                range2['row'][0],\r\n                                r2\r\n                            ],\r\n                            'column': [\r\n                                c1,\r\n                                range2['column'][0] - 1\r\n                            ]\r\n                        },\r\n                        {\r\n                            'row': [\r\n                                range2['row'][0] + offset_r,\r\n                                r2 + offset_r\r\n                            ],\r\n                            'column': [\r\n                                range2['column'][0] + offset_c,\r\n                                c2 + offset_c\r\n                            ]\r\n                        }\r\n                    ];\r\n                } else if (type == 'restPart') {\r\n                    //剩余部分\r\n                    range = [\r\n                        {\r\n                            'row': [\r\n                                r1,\r\n                                range2['row'][0] - 1\r\n                            ],\r\n                            'column': [\r\n                                c1,\r\n                                c2\r\n                            ]\r\n                        },\r\n                        {\r\n                            'row': [\r\n                                range2['row'][0],\r\n                                r2\r\n                            ],\r\n                            'column': [\r\n                                c1,\r\n                                range2['column'][0] - 1\r\n                            ]\r\n                        }\r\n                    ];\r\n                } else if (type == 'operatePart') {\r\n                    //操作部分\r\n                    range = [{\r\n                            'row': [\r\n                                range2['row'][0] + offset_r,\r\n                                r2 + offset_r\r\n                            ],\r\n                            'column': [\r\n                                range2['column'][0] + offset_c,\r\n                                c2 + offset_c\r\n                            ]\r\n                        }];\r\n                }\r\n            } else if (r1 < range2['row'][0] && r2 > range2['row'][1] && c1 >= range2['column'][0] && c1 <= range2['column'][1]) {\r\n                //选区 包含 条件格式应用范围 左中间部分\r\n                if (type == 'allPart') {\r\n                    //所有部分\r\n                    range = [\r\n                        {\r\n                            'row': [\r\n                                r1,\r\n                                range2['row'][0] - 1\r\n                            ],\r\n                            'column': [\r\n                                c1,\r\n                                c2\r\n                            ]\r\n                        },\r\n                        {\r\n                            'row': [\r\n                                range2['row'][0],\r\n                                range2['row'][1]\r\n                            ],\r\n                            'column': [\r\n                                range2['column'][1] + 1,\r\n                                c2\r\n                            ]\r\n                        },\r\n                        {\r\n                            'row': [\r\n                                range2['row'][1] + 1,\r\n                                r2\r\n                            ],\r\n                            'column': [\r\n                                c1,\r\n                                c2\r\n                            ]\r\n                        },\r\n                        {\r\n                            'row': [\r\n                                range2['row'][0] + offset_r,\r\n                                range2['row'][1] + offset_r\r\n                            ],\r\n                            'column': [\r\n                                c1 + offset_c,\r\n                                range2['column'][1] + offset_c\r\n                            ]\r\n                        }\r\n                    ];\r\n                } else if (type == 'restPart') {\r\n                    //剩余部分\r\n                    range = [\r\n                        {\r\n                            'row': [\r\n                                r1,\r\n                                range2['row'][0] - 1\r\n                            ],\r\n                            'column': [\r\n                                c1,\r\n                                c2\r\n                            ]\r\n                        },\r\n                        {\r\n                            'row': [\r\n                                range2['row'][0],\r\n                                range2['row'][1]\r\n                            ],\r\n                            'column': [\r\n                                range2['column'][1] + 1,\r\n                                c2\r\n                            ]\r\n                        },\r\n                        {\r\n                            'row': [\r\n                                range2['row'][1] + 1,\r\n                                r2\r\n                            ],\r\n                            'column': [\r\n                                c1,\r\n                                c2\r\n                            ]\r\n                        }\r\n                    ];\r\n                } else if (type == 'operatePart') {\r\n                    //操作部分\r\n                    range = [{\r\n                            'row': [\r\n                                range2['row'][0] + offset_r,\r\n                                range2['row'][1] + offset_r\r\n                            ],\r\n                            'column': [\r\n                                c1 + offset_c,\r\n                                range2['column'][1] + offset_c\r\n                            ]\r\n                        }];\r\n                }\r\n            } else if (r1 < range2['row'][0] && r2 > range2['row'][1] && c2 >= range2['column'][0] && c2 <= range2['column'][1]) {\r\n                //选区 包含 条件格式应用范围 右中间部分\r\n                if (type == 'allPart') {\r\n                    //所有部分\r\n                    range = [\r\n                        {\r\n                            'row': [\r\n                                r1,\r\n                                range2['row'][0] - 1\r\n                            ],\r\n                            'column': [\r\n                                c1,\r\n                                c2\r\n                            ]\r\n                        },\r\n                        {\r\n                            'row': [\r\n                                range2['row'][0],\r\n                                range2['row'][1]\r\n                            ],\r\n                            'column': [\r\n                                c1,\r\n                                range2['column'][0] - 1\r\n                            ]\r\n                        },\r\n                        {\r\n                            'row': [\r\n                                range2['row'][1] + 1,\r\n                                r2\r\n                            ],\r\n                            'column': [\r\n                                c1,\r\n                                c2\r\n                            ]\r\n                        },\r\n                        {\r\n                            'row': [\r\n                                range2['row'][0] + offset_r,\r\n                                range2['row'][1] + offset_r\r\n                            ],\r\n                            'column': [\r\n                                range2['column'][0] + offset_c,\r\n                                c2 + offset_c\r\n                            ]\r\n                        }\r\n                    ];\r\n                } else if (type == 'restPart') {\r\n                    //剩余部分\r\n                    range = [\r\n                        {\r\n                            'row': [\r\n                                r1,\r\n                                range2['row'][0] - 1\r\n                            ],\r\n                            'column': [\r\n                                c1,\r\n                                c2\r\n                            ]\r\n                        },\r\n                        {\r\n                            'row': [\r\n                                range2['row'][0],\r\n                                range2['row'][1]\r\n                            ],\r\n                            'column': [\r\n                                c1,\r\n                                range2['column'][0] - 1\r\n                            ]\r\n                        },\r\n                        {\r\n                            'row': [\r\n                                range2['row'][1] + 1,\r\n                                r2\r\n                            ],\r\n                            'column': [\r\n                                c1,\r\n                                c2\r\n                            ]\r\n                        }\r\n                    ];\r\n                } else if (type == 'operatePart') {\r\n                    //操作部分\r\n                    range = [{\r\n                            'row': [\r\n                                range2['row'][0] + offset_r,\r\n                                range2['row'][1] + offset_r\r\n                            ],\r\n                            'column': [\r\n                                range2['column'][0] + offset_c,\r\n                                c2 + offset_c\r\n                            ]\r\n                        }];\r\n                }\r\n            } else if (c1 < range2['column'][0] && c2 > range2['column'][1] && r1 >= range2['row'][0] && r1 <= range2['row'][1]) {\r\n                //选区 包含 条件格式应用范围 上中间部分\r\n                if (type == 'allPart') {\r\n                    //所有部分\r\n                    range = [\r\n                        {\r\n                            'row': [\r\n                                r1,\r\n                                range2['row'][1]\r\n                            ],\r\n                            'column': [\r\n                                c1,\r\n                                range2['column'][0] - 1\r\n                            ]\r\n                        },\r\n                        {\r\n                            'row': [\r\n                                r1,\r\n                                range2['row'][1]\r\n                            ],\r\n                            'column': [\r\n                                range2['column'][1] + 1,\r\n                                c2\r\n                            ]\r\n                        },\r\n                        {\r\n                            'row': [\r\n                                range2['row'][1] + 1,\r\n                                r2\r\n                            ],\r\n                            'column': [\r\n                                c1,\r\n                                c2\r\n                            ]\r\n                        },\r\n                        {\r\n                            'row': [\r\n                                r1 + offset_r,\r\n                                range2['row'][1] + offset_r\r\n                            ],\r\n                            'column': [\r\n                                range2['column'][0] + offset_c,\r\n                                range2['column'][1] + offset_c\r\n                            ]\r\n                        }\r\n                    ];\r\n                } else if (type == 'restPart') {\r\n                    //剩余部分\r\n                    range = [\r\n                        {\r\n                            'row': [\r\n                                r1,\r\n                                range2['row'][1]\r\n                            ],\r\n                            'column': [\r\n                                c1,\r\n                                range2['column'][0] - 1\r\n                            ]\r\n                        },\r\n                        {\r\n                            'row': [\r\n                                r1,\r\n                                range2['row'][1]\r\n                            ],\r\n                            'column': [\r\n                                range2['column'][1] + 1,\r\n                                c2\r\n                            ]\r\n                        },\r\n                        {\r\n                            'row': [\r\n                                range2['row'][1] + 1,\r\n                                r2\r\n                            ],\r\n                            'column': [\r\n                                c1,\r\n                                c2\r\n                            ]\r\n                        }\r\n                    ];\r\n                } else if (type == 'operatePart') {\r\n                    //操作部分\r\n                    range = [{\r\n                            'row': [\r\n                                r1 + offset_r,\r\n                                range2['row'][1] + offset_r\r\n                            ],\r\n                            'column': [\r\n                                range2['column'][0] + offset_c,\r\n                                range2['column'][1] + offset_c\r\n                            ]\r\n                        }];\r\n                }\r\n            } else if (c1 < range2['column'][0] && c2 > range2['column'][1] && r2 >= range2['row'][0] && r2 <= range2['row'][1]) {\r\n                //选区 包含 条件格式应用范围 下中间部分\r\n                if (type == 'allPart') {\r\n                    //所有部分\r\n                    range = [\r\n                        {\r\n                            'row': [\r\n                                r1,\r\n                                range2['row'][0] - 1\r\n                            ],\r\n                            'column': [\r\n                                c1,\r\n                                c2\r\n                            ]\r\n                        },\r\n                        {\r\n                            'row': [\r\n                                range2['row'][0],\r\n                                r2\r\n                            ],\r\n                            'column': [\r\n                                c1,\r\n                                range2['column'][0] - 1\r\n                            ]\r\n                        },\r\n                        {\r\n                            'row': [\r\n                                range2['row'][0],\r\n                                r2\r\n                            ],\r\n                            'column': [\r\n                                range2['column'][1] + 1,\r\n                                c2\r\n                            ]\r\n                        },\r\n                        {\r\n                            'row': [\r\n                                range2['row'][0] + offset_r,\r\n                                r2 + offset_r\r\n                            ],\r\n                            'column': [\r\n                                range2['column'][0] + offset_c,\r\n                                range2['column'][1] + offset_c\r\n                            ]\r\n                        }\r\n                    ];\r\n                } else if (type == 'restPart') {\r\n                    //剩余部分\r\n                    range = [\r\n                        {\r\n                            'row': [\r\n                                r1,\r\n                                range2['row'][0] - 1\r\n                            ],\r\n                            'column': [\r\n                                c1,\r\n                                c2\r\n                            ]\r\n                        },\r\n                        {\r\n                            'row': [\r\n                                range2['row'][0],\r\n                                r2\r\n                            ],\r\n                            'column': [\r\n                                c1,\r\n                                range2['column'][0] - 1\r\n                            ]\r\n                        },\r\n                        {\r\n                            'row': [\r\n                                range2['row'][0],\r\n                                r2\r\n                            ],\r\n                            'column': [\r\n                                range2['column'][1] + 1,\r\n                                c2\r\n                            ]\r\n                        }\r\n                    ];\r\n                } else if (type == 'operatePart') {\r\n                    //操作部分\r\n                    range = [{\r\n                            'row': [\r\n                                range2['row'][0] + offset_r,\r\n                                r2 + offset_r\r\n                            ],\r\n                            'column': [\r\n                                range2['column'][0] + offset_c,\r\n                                range2['column'][1] + offset_c\r\n                            ]\r\n                        }];\r\n                }\r\n            } else if (r1 < range2['row'][0] && r2 > range2['row'][1] && c1 < range2['column'][0] && c2 > range2['column'][1]) {\r\n                //选区 包含 条件格式应用范围 正中间部分\r\n                if (type == 'allPart') {\r\n                    //所有部分\r\n                    range = [\r\n                        {\r\n                            'row': [\r\n                                r1,\r\n                                range2['row'][0] - 1\r\n                            ],\r\n                            'column': [\r\n                                c1,\r\n                                c2\r\n                            ]\r\n                        },\r\n                        {\r\n                            'row': [\r\n                                range2['row'][0],\r\n                                range2['row'][1]\r\n                            ],\r\n                            'column': [\r\n                                c1,\r\n                                range2['column'][0] - 1\r\n                            ]\r\n                        },\r\n                        {\r\n                            'row': [\r\n                                range2['row'][0],\r\n                                range2['row'][1]\r\n                            ],\r\n                            'column': [\r\n                                range2['column'][1] + 1,\r\n                                c2\r\n                            ]\r\n                        },\r\n                        {\r\n                            'row': [\r\n                                range2['row'][1] + 1,\r\n                                r2\r\n                            ],\r\n                            'column': [\r\n                                c1,\r\n                                c2\r\n                            ]\r\n                        },\r\n                        {\r\n                            'row': [\r\n                                range2['row'][0] + offset_r,\r\n                                range2['row'][1] + offset_r\r\n                            ],\r\n                            'column': [\r\n                                range2['column'][0] + offset_c,\r\n                                range2['column'][1] + offset_c\r\n                            ]\r\n                        }\r\n                    ];\r\n                } else if (type == 'restPart') {\r\n                    //剩余部分\r\n                    range = [\r\n                        {\r\n                            'row': [\r\n                                r1,\r\n                                range2['row'][0] - 1\r\n                            ],\r\n                            'column': [\r\n                                c1,\r\n                                c2\r\n                            ]\r\n                        },\r\n                        {\r\n                            'row': [\r\n                                range2['row'][0],\r\n                                range2['row'][1]\r\n                            ],\r\n                            'column': [\r\n                                c1,\r\n                                range2['column'][0] - 1\r\n                            ]\r\n                        },\r\n                        {\r\n                            'row': [\r\n                                range2['row'][0],\r\n                                range2['row'][1]\r\n                            ],\r\n                            'column': [\r\n                                range2['column'][1] + 1,\r\n                                c2\r\n                            ]\r\n                        },\r\n                        {\r\n                            'row': [\r\n                                range2['row'][1] + 1,\r\n                                r2\r\n                            ],\r\n                            'column': [\r\n                                c1,\r\n                                c2\r\n                            ]\r\n                        }\r\n                    ];\r\n                } else if (type == 'operatePart') {\r\n                    //操作部分\r\n                    range = [{\r\n                            'row': [\r\n                                range2['row'][0] + offset_r,\r\n                                range2['row'][1] + offset_r\r\n                            ],\r\n                            'column': [\r\n                                range2['column'][0] + offset_c,\r\n                                range2['column'][1] + offset_c\r\n                            ]\r\n                        }];\r\n                }\r\n            } else {\r\n                //选区 在 条件格式应用范围 之外\r\n                if (type == 'allPart') {\r\n                    //所有部分\r\n                    range = [{\r\n                            'row': [\r\n                                r1,\r\n                                r2\r\n                            ],\r\n                            'column': [\r\n                                c1,\r\n                                c2\r\n                            ]\r\n                        }];\r\n                } else if (type == 'restPart') {\r\n                    //剩余部分\r\n                    range = [{\r\n                            'row': [\r\n                                r1,\r\n                                r2\r\n                            ],\r\n                            'column': [\r\n                                c1,\r\n                                c2\r\n                            ]\r\n                        }];\r\n                } else if (type == 'operatePart') {\r\n                    //操作部分\r\n                    range = [];\r\n                }\r\n            }\r\n            return range;\r\n        },\r\n        getcolorGradation: function (color1, color2, value1, value2, value) {\r\n            let rgb1 = color1.split(',');\r\n            let r1 = parseInt(rgb1[0].split('(')[1]);\r\n            let g1 = parseInt(rgb1[1]);\r\n            let b1 = parseInt(rgb1[2].split(')')[0]);\r\n            let rgb2 = color2.split(',');\r\n            let r2 = parseInt(rgb2[0].split('(')[1]);\r\n            let g2 = parseInt(rgb2[1]);\r\n            let b2 = parseInt(rgb2[2].split(')')[0]);\r\n            let r = Math.round(r1 - (r1 - r2) / (value1 - value2) * (value1 - value));\r\n            let g = Math.round(g1 - (g1 - g2) / (value1 - value2) * (value1 - value));\r\n            let b = Math.round(b1 - (b1 - b2) / (value1 - value2) * (value1 - value));\r\n            return 'rgb(' + r + ', ' + g + ', ' + b + ')';\r\n        },\r\n        getCFPartRange: function (sheetIndex, range1, range2) {\r\n            let ruleArr = [];\r\n            let cf = Store.luckysheetfile[getSheetIndex(sheetIndex)].luckysheet_conditionformat_save;\r\n            if (cf != null && cf.length > 0) {\r\n                label:\r\n                    for (let i = 0; i < cf.length; i++) {\r\n                        let cellrange = cf[i].cellrange;\r\n                        for (let j = 0; j < cellrange.length; j++) {\r\n                            let r1 = cellrange[j].row[0], r2 = cellrange[j].row[1];\r\n                            let c1 = cellrange[j].column[0], c2 = cellrange[j].column[1];\r\n                            for (let s = 0; s < range.length; s++) {\r\n                                if (range[s].row[0] >= r1 && range[s].row[0] <= r2 || range[s].row[1] >= r1 && range[s].row[1] <= r2 || range[s].column[0] >= c1 && range[s].column[0] <= c2 || range[s].column[1] >= c1 && range[s].column[1] <= c2) {\r\n                                    ruleArr.push(cf[i]);\r\n                                    continue label;\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n            }\r\n            return ruleArr;\r\n        },\r\n        checksCF: function (r, c, computeMap) {\r\n            if (computeMap != null && r + '_' + c in computeMap) {\r\n                return computeMap[r + '_' + c];\r\n            } else {\r\n                return null;\r\n            }\r\n        },\r\n        getComputeMap: function (sheetIndex) {\r\n            let index = getSheetIndex(Store.currentSheetIndex);\r\n            if (sheetIndex != null) {\r\n                index = getSheetIndex(sheetIndex);\r\n            }\r\n            let ruleArr = Store.luckysheetfile[index]['luckysheet_conditionformat_save'];\r\n            let data = Store.luckysheetfile[index]['data'];\r\n            if (data == null) {\r\n                return null;\r\n            }\r\n            let computeMap = this.compute(ruleArr, data);\r\n            return computeMap;\r\n        },\r\n        compute: function (ruleArr, d) {\r\n            let _this = this;\r\n            if (ruleArr == null) {\r\n                ruleArr = [];\r\n            }  \r\n            //条件计算存储\r\n            let computeMap = {};\r\n            if (ruleArr.length > 0) {\r\n                for (let i = 0; i < ruleArr.length; i++) {\r\n                    let type = ruleArr[i]['type'];\r\n                    let cellrange = ruleArr[i]['cellrange'];\r\n                    let format = ruleArr[i]['format'];\r\n                    if (type == 'dataBar') {\r\n                        //数据条\r\n                        let max = null, min = null;\r\n                        for (let s = 0; s < cellrange.length; s++) {\r\n                            for (let r = cellrange[s].row[0]; r <= cellrange[s].row[1]; r++) {\r\n                                for (let c = cellrange[s].column[0]; c <= cellrange[s].column[1]; c++) {\r\n                                    if (d[r] == null || d[r][c] == null) {\r\n                                        continue;\r\n                                    }\r\n                                    let cell = d[r][c];\r\n                                    if (getObjType(cell) == 'object' && cell['ct'] != null && cell['ct'].t == 'n' && cell.v != null) {\r\n                                        if (max == null || parseInt(cell.v) > max) {\r\n                                            max = parseInt(cell.v);\r\n                                        }\r\n                                        if (min == null || parseInt(cell.v) < min) {\r\n                                            min = parseInt(cell.v);\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                        if (max != null && min != null) {\r\n                            if (min < 0) {\r\n                                //选区范围内有负数\r\n                                let plusLen = Math.round(max / (max - min) * 10) / 10;    //正数所占比\r\n                                //正数所占比\r\n                                let minusLen = Math.round(Math.abs(min) / (max - min) * 10) / 10;    //负数所占比\r\n                                //负数所占比\r\n                                for (let s = 0; s < cellrange.length; s++) {\r\n                                    for (let r = cellrange[s].row[0]; r <= cellrange[s].row[1]; r++) {\r\n                                        for (let c = cellrange[s].column[0]; c <= cellrange[s].column[1]; c++) {\r\n                                            if (d[r] == null || d[r][c] == null) {\r\n                                                continue;\r\n                                            }\r\n                                            let cell = d[r][c];\r\n                                            if (getObjType(cell) == 'object' && cell['ct'] != null && cell['ct'].t == 'n' && cell.v != null) {\r\n                                                if (parseInt(cell.v) < 0) {\r\n                                                    //负数\r\n                                                    let valueLen = Math.round(Math.abs(parseInt(cell.v)) / Math.abs(min) * 100) / 100;\r\n                                                    if (r + '_' + c in computeMap) {\r\n                                                        computeMap[r + '_' + c]['dataBar'] = {\r\n                                                            'valueType': 'minus',\r\n                                                            'minusLen': minusLen,\r\n                                                            'valueLen': valueLen,\r\n                                                            'format': format\r\n                                                        };\r\n                                                    } else {\r\n                                                        computeMap[r + '_' + c] = {\r\n                                                            'dataBar': {\r\n                                                                'valueType': 'minus',\r\n                                                                'minusLen': minusLen,\r\n                                                                'valueLen': valueLen,\r\n                                                                'format': format\r\n                                                            }\r\n                                                        };\r\n                                                    }\r\n                                                }\r\n                                                if (parseInt(cell.v) > 0) {\r\n                                                    //正数\r\n                                                    let valueLen = Math.round(parseInt(cell.v) / max * 100) / 100;\r\n                                                    if (r + '_' + c in computeMap) {\r\n                                                        computeMap[r + '_' + c]['dataBar'] = {\r\n                                                            'valueType': 'plus',\r\n                                                            'plusLen': plusLen,\r\n                                                            'minusLen': minusLen,\r\n                                                            'valueLen': valueLen,\r\n                                                            'format': format\r\n                                                        };\r\n                                                    } else {\r\n                                                        computeMap[r + '_' + c] = {\r\n                                                            'dataBar': {\r\n                                                                'valueType': 'plus',\r\n                                                                'plusLen': plusLen,\r\n                                                                'minusLen': minusLen,\r\n                                                                'valueLen': valueLen,\r\n                                                                'format': format\r\n                                                            }\r\n                                                        };\r\n                                                    }\r\n                                                }\r\n                                            }\r\n                                        }\r\n                                    }\r\n                                }\r\n                            } else {\r\n                                let plusLen = 1;\r\n                                for (let s = 0; s < cellrange.length; s++) {\r\n                                    for (let r = cellrange[s].row[0]; r <= cellrange[s].row[1]; r++) {\r\n                                        for (let c = cellrange[s].column[0]; c <= cellrange[s].column[1]; c++) {\r\n                                            if (d[r] == null || d[r][c] == null) {\r\n                                                continue;\r\n                                            }\r\n                                            let cell = d[r][c];\r\n                                            if (getObjType(cell) == 'object' && cell['ct'] != null && cell['ct'].t == 'n' && cell.v != null) {\r\n                                                let valueLen;\r\n                                                if (max == 0) {\r\n                                                    valueLen = 1;\r\n                                                } else {\r\n                                                    valueLen = Math.round(parseInt(cell.v) / max * 100) / 100;\r\n                                                }\r\n                                                if (r + '_' + c in computeMap) {\r\n                                                    computeMap[r + '_' + c]['dataBar'] = {\r\n                                                        'valueType': 'plus',\r\n                                                        'plusLen': plusLen,\r\n                                                        'valueLen': valueLen,\r\n                                                        'format': format\r\n                                                    };\r\n                                                } else {\r\n                                                    computeMap[r + '_' + c] = {\r\n                                                        'dataBar': {\r\n                                                            'valueType': 'plus',\r\n                                                            'plusLen': plusLen,\r\n                                                            'valueLen': valueLen,\r\n                                                            'format': format\r\n                                                        }\r\n                                                    };\r\n                                                }\r\n                                            }\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    } else if (type == 'colorGradation') {\r\n                        //色阶\r\n                        let max = null, min = null, sum = 0, count = 0;\r\n                        for (let s = 0; s < cellrange.length; s++) {\r\n                            for (let r = cellrange[s].row[0]; r <= cellrange[s].row[1]; r++) {\r\n                                for (let c = cellrange[s].column[0]; c <= cellrange[s].column[1]; c++) {\r\n                                    if (d[r] == null || d[r][c] == null) {\r\n                                        continue;\r\n                                    }\r\n                                    let cell = d[r][c];\r\n                                    if (getObjType(cell) == 'object' && cell['ct'] != null && cell['ct'].t == 'n' && cell.v != null) {\r\n                                        count++;\r\n                                        sum += parseInt(cell.v);\r\n                                        if (max == null || parseInt(cell.v) > max) {\r\n                                            max = parseInt(cell.v);\r\n                                        }\r\n                                        if (min == null || parseInt(cell.v) < min) {\r\n                                            min = parseInt(cell.v);\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                        if (max != null && min != null) {\r\n                            if (format.length == 3) {\r\n                                //三色色阶\r\n                                let avg = Math.floor(sum / count);\r\n                                for (let s = 0; s < cellrange.length; s++) {\r\n                                    for (let r = cellrange[s].row[0]; r <= cellrange[s].row[1]; r++) {\r\n                                        for (let c = cellrange[s].column[0]; c <= cellrange[s].column[1]; c++) {\r\n                                            if (d[r] == null || d[r][c] == null) {\r\n                                                continue;\r\n                                            }\r\n                                            let cell = d[r][c];\r\n                                            if (getObjType(cell) == 'object' && cell['ct'] != null && cell['ct'].t == 'n' && cell.v != null) {\r\n                                                if (parseInt(cell.v) == min) {\r\n                                                    if (r + '_' + c in computeMap) {\r\n                                                        computeMap[r + '_' + c]['cellColor'] = format[2];\r\n                                                    } else {\r\n                                                        computeMap[r + '_' + c] = { 'cellColor': format[2] };\r\n                                                    }\r\n                                                } else if (parseInt(cell.v) > min && parseInt(cell.v) < avg) {\r\n                                                    if (r + '_' + c in computeMap) {\r\n                                                        computeMap[r + '_' + c]['cellColor'] = _this.getcolorGradation(format[2], format[1], min, avg, parseInt(cell.v));\r\n                                                    } else {\r\n                                                        computeMap[r + '_' + c] = { 'cellColor': _this.getcolorGradation(format[2], format[1], min, avg, parseInt(cell.v)) };\r\n                                                    }\r\n                                                } else if (parseInt(cell.v) == avg) {\r\n                                                    if (r + '_' + c in computeMap) {\r\n                                                        computeMap[r + '_' + c]['cellColor'] = format[1];\r\n                                                    } else {\r\n                                                        computeMap[r + '_' + c] = { 'cellColor': format[1] };\r\n                                                    }\r\n                                                } else if (parseInt(cell.v) > avg && parseInt(cell.v) < max) {\r\n                                                    if (r + '_' + c in computeMap) {\r\n                                                        computeMap[r + '_' + c]['cellColor'] = _this.getcolorGradation(format[1], format[0], avg, max, parseInt(cell.v));\r\n                                                    } else {\r\n                                                        computeMap[r + '_' + c] = { 'cellColor': _this.getcolorGradation(format[1], format[0], avg, max, parseInt(cell.v)) };\r\n                                                    }\r\n                                                } else if (parseInt(cell.v) == max) {\r\n                                                    if (r + '_' + c in computeMap) {\r\n                                                        computeMap[r + '_' + c]['cellColor'] = format[0];\r\n                                                    } else {\r\n                                                        computeMap[r + '_' + c] = { 'cellColor': format[0] };\r\n                                                    }\r\n                                                }\r\n                                            }\r\n                                        }\r\n                                    }\r\n                                }\r\n                            } else if (format.length == 2) {\r\n                                //两色色阶\r\n                                for (let s = 0; s < cellrange.length; s++) {\r\n                                    for (let r = cellrange[s].row[0]; r <= cellrange[s].row[1]; r++) {\r\n                                        for (let c = cellrange[s].column[0]; c <= cellrange[s].column[1]; c++) {\r\n                                            if (d[r] == null || d[r][c] == null) {\r\n                                                continue;\r\n                                            }\r\n                                            let cell = d[r][c];\r\n                                            if (getObjType(cell) == 'object' && cell['ct'] != null && cell['ct'].t == 'n' && cell.v != null) {\r\n                                                if (parseInt(cell.v) == min) {\r\n                                                    if (r + '_' + c in computeMap) {\r\n                                                        computeMap[r + '_' + c]['cellColor'] = format[1];\r\n                                                    } else {\r\n                                                        computeMap[r + '_' + c] = { 'cellColor': format[1] };\r\n                                                    }\r\n                                                } else if (parseInt(cell.v) > min && parseInt(cell.v) < max) {\r\n                                                    if (r + '_' + c in computeMap) {\r\n                                                        computeMap[r + '_' + c]['cellColor'] = _this.getcolorGradation(format[1], format[0], min, max, parseInt(cell.v));\r\n                                                    } else {\r\n                                                        computeMap[r + '_' + c] = { 'cellColor': _this.getcolorGradation(format[1], format[0], min, max, parseInt(cell.v)) };\r\n                                                    }\r\n                                                } else if (parseInt(cell.v) == max) {\r\n                                                    if (r + '_' + c in computeMap) {\r\n                                                        computeMap[r + '_' + c]['cellColor'] = format[0];\r\n                                                    } else {\r\n                                                        computeMap[r + '_' + c] = { 'cellColor': format[0] };\r\n                                                    }\r\n                                                }\r\n                                            }\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    } else if (type == 'icons') {\r\n                        //图标集\r\n                        let len = parseInt(format['len']);\r\n                        let leftMin = parseInt(format['leftMin']);\r\n                        let top = parseInt(format['top']);\r\n                        let max = null, min = null;\r\n                        for (let s = 0; s < cellrange.length; s++) {\r\n                            for (let r = cellrange[s].row[0]; r <= cellrange[s].row[1]; r++) {\r\n                                for (let c = cellrange[s].column[0]; c <= cellrange[s].column[1]; c++) {\r\n                                    if (d[r] == null || d[r][c] == null) {\r\n                                        continue;\r\n                                    }\r\n                                    let cell = d[r][c];\r\n                                    if (getObjType(cell) == 'object' && cell['ct'] != null && cell['ct'].t == 'n' && cell.v != null) {\r\n                                        if (max == null || parseInt(cell.v) > max) {\r\n                                            max = parseInt(cell.v);\r\n                                        }\r\n                                        if (min == null || parseInt(cell.v) < min) {\r\n                                            min = parseInt(cell.v);\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                        if (max != null && min != null) {\r\n                            let a = Math.floor((max - min + 1) / len);\r\n                            let b = (max - min + 1) % len;\r\n                            if (len == 3) {\r\n                                //一组图标有三个\r\n                                let v1, v2, v3;\r\n                                if (b == 2) {\r\n                                    v1 = [\r\n                                        min,\r\n                                        min + a\r\n                                    ];\r\n                                    v2 = [\r\n                                        min + a + 1,\r\n                                        min + a * 2\r\n                                    ];\r\n                                    v3 = [\r\n                                        min + a * 2 + 1,\r\n                                        max\r\n                                    ];\r\n                                } else {\r\n                                    v1 = [\r\n                                        min,\r\n                                        min + a - 1\r\n                                    ];\r\n                                    v2 = [\r\n                                        min + a,\r\n                                        min + a * 2 - 1\r\n                                    ];\r\n                                    v3 = [\r\n                                        min + a * 2,\r\n                                        max\r\n                                    ];\r\n                                }\r\n                                for (let s = 0; s < cellrange.length; s++) {\r\n                                    for (let r = cellrange[s].row[0]; r <= cellrange[s].row[1]; r++) {\r\n                                        for (let c = cellrange[s].column[0]; c <= cellrange[s].column[1]; c++) {\r\n                                            if (d[r] == null || d[r][c] == null) {\r\n                                                continue;\r\n                                            }\r\n                                            let cell = d[r][c];\r\n                                            if (getObjType(cell) == 'object' && cell['ct'] != null && cell['ct'].t == 'n' && cell.v != null) {\r\n                                                if (parseInt(cell.v) >= v1[0] && parseInt(cell.v) <= v1[1]) {\r\n                                                    if (r + '_' + c in computeMap) {\r\n                                                        computeMap[r + '_' + c]['icons'] = {\r\n                                                            'left': leftMin + 2,\r\n                                                            'top': top\r\n                                                        };\r\n                                                    } else {\r\n                                                        computeMap[r + '_' + c] = {\r\n                                                            'icons': {\r\n                                                                'left': leftMin + 2,\r\n                                                                'top': top\r\n                                                            }\r\n                                                        };\r\n                                                    }\r\n                                                } else if (parseInt(cell.v) >= v2[0] && parseInt(cell.v) <= v2[1]) {\r\n                                                    if (r + '_' + c in computeMap) {\r\n                                                        computeMap[r + '_' + c]['icons'] = {\r\n                                                            'left': leftMin + 1,\r\n                                                            'top': top\r\n                                                        };\r\n                                                    } else {\r\n                                                        computeMap[r + '_' + c] = {\r\n                                                            'icons': {\r\n                                                                'left': leftMin + 1,\r\n                                                                'top': top\r\n                                                            }\r\n                                                        };\r\n                                                    }\r\n                                                } else if (parseInt(cell.v) >= v3[0] && parseInt(cell.v) <= v3[1]) {\r\n                                                    if (r + '_' + c in computeMap) {\r\n                                                        computeMap[r + '_' + c]['icons'] = {\r\n                                                            'left': leftMin,\r\n                                                            'top': top\r\n                                                        };\r\n                                                    } else {\r\n                                                        computeMap[r + '_' + c] = {\r\n                                                            'icons': {\r\n                                                                'left': leftMin,\r\n                                                                'top': top\r\n                                                            }\r\n                                                        };\r\n                                                    }\r\n                                                }\r\n                                            }\r\n                                        }\r\n                                    }\r\n                                }\r\n                            } else if (len == 4) {\r\n                                //一组图标有四个\r\n                                let v1, v2, v3, v4;\r\n                                if (b == 2) {\r\n                                    v1 = [\r\n                                        min,\r\n                                        min + a\r\n                                    ];\r\n                                    v2 = [\r\n                                        min + a + 1,\r\n                                        min + a * 2\r\n                                    ];\r\n                                    v3 = [\r\n                                        min + a * 2 + 1,\r\n                                        min + a * 3\r\n                                    ];\r\n                                    v4 = [\r\n                                        min + a * 3 + 1,\r\n                                        max\r\n                                    ];\r\n                                } else if (b == 3) {\r\n                                    v1 = [\r\n                                        min,\r\n                                        min + a\r\n                                    ];\r\n                                    v2 = [\r\n                                        min + a + 1,\r\n                                        min + a * 2\r\n                                    ];\r\n                                    v3 = [\r\n                                        min + a * 2 + 1,\r\n                                        min + a * 3 + 1\r\n                                    ];\r\n                                    v4 = [\r\n                                        min + a * 3 + 2,\r\n                                        max\r\n                                    ];\r\n                                } else {\r\n                                    v1 = [\r\n                                        min,\r\n                                        min + a - 1\r\n                                    ];\r\n                                    v2 = [\r\n                                        min + a,\r\n                                        min + a * 2 - 1\r\n                                    ];\r\n                                    v3 = [\r\n                                        min + a * 2,\r\n                                        min + a * 3 - 1\r\n                                    ];\r\n                                    v4 = [\r\n                                        min + a * 3,\r\n                                        max\r\n                                    ];\r\n                                }\r\n                                for (let s = 0; s < cellrange.length; s++) {\r\n                                    for (let r = cellrange[s].row[0]; r <= cellrange[s].row[1]; r++) {\r\n                                        for (let c = cellrange[s].column[0]; c <= cellrange[s].column[1]; c++) {\r\n                                            if (d[r] == null || d[r][c] == null) {\r\n                                                continue;\r\n                                            }\r\n                                            let cell = d[r][c];\r\n                                            if (getObjType(cell) == 'object' && cell['ct'] != null && cell['ct'].t == 'n' && cell.v != null) {\r\n                                                if (parseInt(cell.v) >= v1[0] && parseInt(cell.v) <= v1[1]) {\r\n                                                    if (r + '_' + c in computeMap) {\r\n                                                        computeMap[r + '_' + c]['icons'] = {\r\n                                                            'left': leftMin + 3,\r\n                                                            'top': top\r\n                                                        };\r\n                                                    } else {\r\n                                                        computeMap[r + '_' + c] = {\r\n                                                            'icons': {\r\n                                                                'left': leftMin + 3,\r\n                                                                'top': top\r\n                                                            }\r\n                                                        };\r\n                                                    }\r\n                                                } else if (parseInt(cell.v) >= v2[0] && parseInt(cell.v) <= v2[1]) {\r\n                                                    if (r + '_' + c in computeMap) {\r\n                                                        computeMap[r + '_' + c]['icons'] = {\r\n                                                            'left': leftMin + 2,\r\n                                                            'top': top\r\n                                                        };\r\n                                                    } else {\r\n                                                        computeMap[r + '_' + c] = {\r\n                                                            'icons': {\r\n                                                                'left': leftMin + 2,\r\n                                                                'top': top\r\n                                                            }\r\n                                                        };\r\n                                                    }\r\n                                                } else if (parseInt(cell.v) >= v3[0] && parseInt(cell.v) <= v3[1]) {\r\n                                                    if (r + '_' + c in computeMap) {\r\n                                                        computeMap[r + '_' + c]['icons'] = {\r\n                                                            'left': leftMin + 1,\r\n                                                            'top': top\r\n                                                        };\r\n                                                    } else {\r\n                                                        computeMap[r + '_' + c] = {\r\n                                                            'icons': {\r\n                                                                'left': leftMin + 1,\r\n                                                                'top': top\r\n                                                            }\r\n                                                        };\r\n                                                    }\r\n                                                } else if (parseInt(cell.v) >= v4[0] && parseInt(cell.v) <= v4[1]) {\r\n                                                    if (r + '_' + c in computeMap) {\r\n                                                        computeMap[r + '_' + c]['icons'] = {\r\n                                                            'left': leftMin,\r\n                                                            'top': top\r\n                                                        };\r\n                                                    } else {\r\n                                                        computeMap[r + '_' + c] = {\r\n                                                            'icons': {\r\n                                                                'left': leftMin,\r\n                                                                'top': top\r\n                                                            }\r\n                                                        };\r\n                                                    }\r\n                                                }\r\n                                            }\r\n                                        }\r\n                                    }\r\n                                }\r\n                            } else if (len == 5) {\r\n                                //一组图标有五个\r\n                                let v1, v2, v3, v4, v5;\r\n                                if (b == 2) {\r\n                                    v1 = [\r\n                                        min,\r\n                                        min + a\r\n                                    ];\r\n                                    v2 = [\r\n                                        min + a + 1,\r\n                                        min + a * 2\r\n                                    ];\r\n                                    v3 = [\r\n                                        min + a * 2 + 1,\r\n                                        min + a * 3\r\n                                    ];\r\n                                    v4 = [\r\n                                        min + a * 3 + 1,\r\n                                        min + a * 4\r\n                                    ];\r\n                                    v5 = [\r\n                                        min + a * 4 + 1,\r\n                                        max\r\n                                    ];\r\n                                } else if (b == 3) {\r\n                                    v1 = [\r\n                                        min,\r\n                                        min + a\r\n                                    ];\r\n                                    v2 = [\r\n                                        min + a + 1,\r\n                                        min + a * 2\r\n                                    ];\r\n                                    v3 = [\r\n                                        min + a * 2 + 1,\r\n                                        min + a * 3 + 1\r\n                                    ];\r\n                                    v4 = [\r\n                                        min + a * 3 + 2,\r\n                                        min + a * 4 + 1\r\n                                    ];\r\n                                    v5 = [\r\n                                        min + a * 4 + 2,\r\n                                        max\r\n                                    ];\r\n                                } else if (b == 4) {\r\n                                    v1 = [\r\n                                        min,\r\n                                        min + a\r\n                                    ];\r\n                                    v2 = [\r\n                                        min + a + 1,\r\n                                        min + a * 2 + 1\r\n                                    ];\r\n                                    v3 = [\r\n                                        min + a * 2 + 2,\r\n                                        min + a * 3 + 1\r\n                                    ];\r\n                                    v4 = [\r\n                                        min + a * 3 + 2,\r\n                                        min + a * 4 + 2\r\n                                    ];\r\n                                    v5 = [\r\n                                        min + a * 4 + 3,\r\n                                        max\r\n                                    ];\r\n                                } else {\r\n                                    v1 = [\r\n                                        min,\r\n                                        min + a - 1\r\n                                    ];\r\n                                    v2 = [\r\n                                        min + a,\r\n                                        min + a * 2 - 1\r\n                                    ];\r\n                                    v3 = [\r\n                                        min + a * 2,\r\n                                        min + a * 3 - 1\r\n                                    ];\r\n                                    v4 = [\r\n                                        min + a * 3,\r\n                                        min + a * 4 - 1\r\n                                    ];\r\n                                    v5 = [\r\n                                        min + a * 4,\r\n                                        max\r\n                                    ];\r\n                                }\r\n                                for (let s = 0; s < cellrange.length; s++) {\r\n                                    for (let r = cellrange[s].row[0]; r <= cellrange[s].row[1]; r++) {\r\n                                        for (let c = cellrange[s].column[0]; c <= cellrange[s].column[1]; c++) {\r\n                                            if (d[r] == null || d[r][c] == null) {\r\n                                                continue;\r\n                                            }\r\n                                            let cell = d[r][c];\r\n                                            if (getObjType(cell) == 'object' && cell['ct'] != null && cell['ct'].t == 'n' && cell.v != null) {\r\n                                                if (parseInt(cell.v) >= v1[0] && parseInt(cell.v) <= v1[1]) {\r\n                                                    if (r + '_' + c in computeMap) {\r\n                                                        computeMap[r + '_' + c]['icons'] = {\r\n                                                            'left': leftMin + 4,\r\n                                                            'top': top\r\n                                                        };\r\n                                                    } else {\r\n                                                        computeMap[r + '_' + c] = {\r\n                                                            'icons': {\r\n                                                                'left': leftMin + 4,\r\n                                                                'top': top\r\n                                                            }\r\n                                                        };\r\n                                                    }\r\n                                                } else if (parseInt(cell.v) >= v2[0] && parseInt(cell.v) <= v2[1]) {\r\n                                                    if (r + '_' + c in computeMap) {\r\n                                                        computeMap[r + '_' + c]['icons'] = {\r\n                                                            'left': leftMin + 3,\r\n                                                            'top': top\r\n                                                        };\r\n                                                    } else {\r\n                                                        computeMap[r + '_' + c] = {\r\n                                                            'icons': {\r\n                                                                'left': leftMin + 3,\r\n                                                                'top': top\r\n                                                            }\r\n                                                        };\r\n                                                    }\r\n                                                } else if (parseInt(cell.v) >= v3[0] && parseInt(cell.v) <= v3[1]) {\r\n                                                    if (r + '_' + c in computeMap) {\r\n                                                        computeMap[r + '_' + c]['icons'] = {\r\n                                                            'left': leftMin + 2,\r\n                                                            'top': top\r\n                                                        };\r\n                                                    } else {\r\n                                                        computeMap[r + '_' + c] = {\r\n                                                            'icons': {\r\n                                                                'left': leftMin + 2,\r\n                                                                'top': top\r\n                                                            }\r\n                                                        };\r\n                                                    }\r\n                                                } else if (parseInt(cell.v) >= v4[0] && parseInt(cell.v) <= v4[1]) {\r\n                                                    if (r + '_' + c in computeMap) {\r\n                                                        computeMap[r + '_' + c]['icons'] = {\r\n                                                            'left': leftMin + 1,\r\n                                                            'top': top\r\n                                                        };\r\n                                                    } else {\r\n                                                        computeMap[r + '_' + c] = {\r\n                                                            'icons': {\r\n                                                                'left': leftMin + 1,\r\n                                                                'top': top\r\n                                                            }\r\n                                                        };\r\n                                                    }\r\n                                                } else if (parseInt(cell.v) >= v5[0] && parseInt(cell.v) <= v5[1]) {\r\n                                                    if (r + '_' + c in computeMap) {\r\n                                                        computeMap[r + '_' + c]['icons'] = {\r\n                                                            'left': leftMin,\r\n                                                            'top': top\r\n                                                        };\r\n                                                    } else {\r\n                                                        computeMap[r + '_' + c] = {\r\n                                                            'icons': {\r\n                                                                'left': leftMin,\r\n                                                                'top': top\r\n                                                            }\r\n                                                        };\r\n                                                    }\r\n                                                }\r\n                                            }\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    } else {\r\n                        //获取变量值\r\n                        let conditionName = ruleArr[i].conditionName,\r\n                            //条件名称\r\n                            conditionValue0 = ruleArr[i].conditionValue[0],\r\n                            //条件值1\r\n                            conditionValue1 = ruleArr[i].conditionValue[1],\r\n                            //条件值2\r\n                            textColor = format.textColor,\r\n                            //条件格式文本颜色 fc\r\n                            cellColor = format.cellColor;    //条件格式单元格颜色 bg\r\n                        //条件格式单元格颜色 bg\r\n                        for (let s = 0; s < cellrange.length; s++) {\r\n                            //条件类型判断\r\n                            if (conditionName == 'greaterThan' || conditionName == 'lessThan' || conditionName == 'equal' || conditionName == 'textContains') {\r\n                                //循环应用范围计算\r\n                                for (let r = cellrange[s].row[0]; r <= cellrange[s].row[1]; r++) {\r\n                                    for (let c = cellrange[s].column[0]; c <= cellrange[s].column[1]; c++) {\r\n                                        if (d[r] == null || d[r][c] == null) {\r\n                                            continue;\r\n                                        }    //单元格值\r\n                                        //单元格值\r\n                                        let cell = d[r][c];\r\n                                        if (getObjType(cell) != 'object' || isRealNull(cell.v)) {\r\n                                            continue;\r\n                                        }    //符合条件\r\n                                        //符合条件\r\n                                        if (conditionName == 'greaterThan' && cell.v > conditionValue0) {\r\n                                            if (r + '_' + c in computeMap) {\r\n                                                computeMap[r + '_' + c]['textColor'] = textColor;\r\n                                                computeMap[r + '_' + c]['cellColor'] = cellColor;\r\n                                            } else {\r\n                                                computeMap[r + '_' + c] = {\r\n                                                    'textColor': textColor,\r\n                                                    'cellColor': cellColor\r\n                                                };\r\n                                            }\r\n                                        } else if (conditionName == 'lessThan' && cell.v < conditionValue0) {\r\n                                            if (r + '_' + c in computeMap) {\r\n                                                computeMap[r + '_' + c]['textColor'] = textColor;\r\n                                                computeMap[r + '_' + c]['cellColor'] = cellColor;\r\n                                            } else {\r\n                                                computeMap[r + '_' + c] = {\r\n                                                    'textColor': textColor,\r\n                                                    'cellColor': cellColor\r\n                                                };\r\n                                            }\r\n                                        } else if (conditionName == 'equal' && cell.v == conditionValue0) {\r\n                                            if (r + '_' + c in computeMap) {\r\n                                                computeMap[r + '_' + c]['textColor'] = textColor;\r\n                                                computeMap[r + '_' + c]['cellColor'] = cellColor;\r\n                                            } else {\r\n                                                computeMap[r + '_' + c] = {\r\n                                                    'textColor': textColor,\r\n                                                    'cellColor': cellColor\r\n                                                };\r\n                                            }\r\n                                        } else if (conditionName == 'textContains' && cell.v.toString().indexOf(conditionValue0) != -1) {\r\n                                            if (r + '_' + c in computeMap) {\r\n                                                computeMap[r + '_' + c]['textColor'] = textColor;\r\n                                                computeMap[r + '_' + c]['cellColor'] = cellColor;\r\n                                            } else {\r\n                                                computeMap[r + '_' + c] = {\r\n                                                    'textColor': textColor,\r\n                                                    'cellColor': cellColor\r\n                                                };\r\n                                            }\r\n                                        }\r\n                                    }\r\n                                }\r\n                            } else if (conditionName == 'betweenness') {\r\n                                //比较条件值1和条件值2的大小\r\n                                let vBig, vSmall;\r\n                                if (conditionValue0 > conditionValue1) {\r\n                                    vBig = conditionValue0;\r\n                                    vSmall = conditionValue1;\r\n                                } else {\r\n                                    vBig = conditionValue1;\r\n                                    vSmall = conditionValue0;\r\n                                }    //循环应用范围计算\r\n                                //循环应用范围计算\r\n                                for (let r = cellrange[s].row[0]; r <= cellrange[s].row[1]; r++) {\r\n                                    for (let c = cellrange[s].column[0]; c <= cellrange[s].column[1]; c++) {\r\n                                        if (d[r] == null || d[r][c] == null) {\r\n                                            continue;\r\n                                        }    //单元格值\r\n                                        //单元格值\r\n                                        let cell = d[r][c];\r\n                                        if (getObjType(cell) != 'object' || isRealNull(cell.v)) {\r\n                                            continue;\r\n                                        }    //符合条件\r\n                                        //符合条件\r\n                                        if (cell.v >= vSmall && cell.v <= vBig) {\r\n                                            if (r + '_' + c in computeMap) {\r\n                                                computeMap[r + '_' + c]['textColor'] = textColor;\r\n                                                computeMap[r + '_' + c]['cellColor'] = cellColor;\r\n                                            } else {\r\n                                                computeMap[r + '_' + c] = {\r\n                                                    'textColor': textColor,\r\n                                                    'cellColor': cellColor\r\n                                                };\r\n                                            }\r\n                                        }\r\n                                    }\r\n                                }\r\n                            } else if (conditionName == 'occurrenceDate') {\r\n                                //获取日期所对应的数值\r\n                                let dBig, dSmall;\r\n                                if (conditionValue0.toString().indexOf('-') == -1) {\r\n                                    dBig = genarate(conditionValue0)[2];\r\n                                    dSmall = genarate(conditionValue0)[2];\r\n                                } else {\r\n                                    let str = conditionValue0.toString().split('-');\r\n                                    dBig = genarate(str[1].trim())[2];\r\n                                    dSmall = genarate(str[0].trim())[2];\r\n                                }    //循环应用范围计算\r\n                                //循环应用范围计算\r\n                                for (let r = cellrange[s].row[0]; r <= cellrange[s].row[1]; r++) {\r\n                                    for (let c = cellrange[s].column[0]; c <= cellrange[s].column[1]; c++) {\r\n                                        if (d[r] == null || d[r][c] == null) {\r\n                                            continue;\r\n                                        }    //单元格值类型为日期类型\r\n                                        //单元格值类型为日期类型\r\n                                        if (d[r][c].ct != null && d[r][c].ct.t == 'd') {\r\n                                            //单元格值\r\n                                            let cellVal = getcellvalue(r, c, d);    //符合条件\r\n                                            //符合条件\r\n                                            if (cellVal >= dSmall && cellVal <= dBig) {\r\n                                                if (r + '_' + c in computeMap) {\r\n                                                    computeMap[r + '_' + c]['textColor'] = textColor;\r\n                                                    computeMap[r + '_' + c]['cellColor'] = cellColor;\r\n                                                } else {\r\n                                                    computeMap[r + '_' + c] = {\r\n                                                        'textColor': textColor,\r\n                                                        'cellColor': cellColor\r\n                                                    };\r\n                                                }\r\n                                            }\r\n                                        }\r\n                                    }\r\n                                }\r\n                            } else if (conditionName == 'duplicateValue') {\r\n                                //应用范围单元格值处理\r\n                                let dmap = {};\r\n                                for (let r = cellrange[s].row[0]; r <= cellrange[s].row[1]; r++) {\r\n                                    for (let c = cellrange[s].column[0]; c <= cellrange[s].column[1]; c++) {\r\n                                        let item = getcellvalue(r, c, d);\r\n                                        if (!(item in dmap)) {\r\n                                            dmap[item] = [];\r\n                                        }\r\n                                        dmap[item].push({\r\n                                            'r': r,\r\n                                            'c': c\r\n                                        });\r\n                                    }\r\n                                }    //循环应用范围计算\r\n                                //循环应用范围计算\r\n                                if (conditionValue0 == '0') {\r\n                                    //重复值\r\n                                    for (let x in dmap) {\r\n                                        if (x != 'null' && x != 'undefined' && dmap[x].length > 1) {\r\n                                            for (let j = 0; j < dmap[x].length; j++) {\r\n                                                if (dmap[x][j].r + '_' + dmap[x][j].c in computeMap) {\r\n                                                    computeMap[dmap[x][j].r + '_' + dmap[x][j].c]['textColor'] = textColor;\r\n                                                    computeMap[dmap[x][j].r + '_' + dmap[x][j].c]['cellColor'] = cellColor;\r\n                                                } else {\r\n                                                    computeMap[dmap[x][j].r + '_' + dmap[x][j].c] = {\r\n                                                        'textColor': textColor,\r\n                                                        'cellColor': cellColor\r\n                                                    };\r\n                                                }\r\n                                            }\r\n                                        }\r\n                                    }\r\n                                }\r\n                                if (conditionValue0 == '1') {\r\n                                    //唯一值\r\n                                    for (let x in dmap) {\r\n                                        if (x != 'null' && x != 'undefined' && dmap[x].length == 1) {\r\n                                            if (dmap[x][0].r + '_' + dmap[x][0].c in computeMap) {\r\n                                                computeMap[dmap[x][0].r + '_' + dmap[x][0].c]['textColor'] = textColor;\r\n                                                computeMap[dmap[x][0].r + '_' + dmap[x][0].c]['cellColor'] = cellColor;\r\n                                            } else {\r\n                                                computeMap[dmap[x][0].r + '_' + dmap[x][0].c] = {\r\n                                                    'textColor': textColor,\r\n                                                    'cellColor': cellColor\r\n                                                };\r\n                                            }\r\n                                        }\r\n                                    }\r\n                                }\r\n                            } else if (conditionName == 'top10' || conditionName == 'top10%' || conditionName == 'last10' || conditionName == 'last10%' || conditionName == 'AboveAverage' || conditionName == 'SubAverage') {\r\n                                //应用范围单元格值(数值型)\r\n                                let dArr = [];\r\n                                for (let r = cellrange[s].row[0]; r <= cellrange[s].row[1]; r++) {\r\n                                    for (let c = cellrange[s].column[0]; c <= cellrange[s].column[1]; c++) {\r\n                                        if (d[r] == null || d[r][c] == null) {\r\n                                            continue;\r\n                                        }    //单元格值类型为数字类型\r\n                                        //单元格值类型为数字类型\r\n                                        if (d[r][c].ct != null && d[r][c].ct.t == 'n') {\r\n                                            dArr.push(getcellvalue(r, c, d));\r\n                                        }\r\n                                    }\r\n                                }    //数组处理\r\n                                //数组处理\r\n                                if (conditionName == 'top10' || conditionName == 'top10%' || conditionName == 'last10' || conditionName == 'last10%') {\r\n                                    //从大到小排序\r\n                                    for (let j = 0; j < dArr.length; j++) {\r\n                                        for (let k = 0; k < dArr.length - 1 - j; k++) {\r\n                                            if (dArr[k] < dArr[k + 1]) {\r\n                                                let temp = dArr[k];\r\n                                                dArr[k] = dArr[k + 1];\r\n                                                dArr[k + 1] = temp;\r\n                                            }\r\n                                        }\r\n                                    }    //取条件值数组\r\n                                    //取条件值数组\r\n                                    let cArr;\r\n                                    if (conditionName == 'top10') {\r\n                                        cArr = dArr.slice(0, conditionValue0);    //前10项数组\r\n                                    } else //前10项数组\r\n                                    if (conditionName == 'top10%') {\r\n                                        cArr = dArr.slice(0, Math.floor(conditionValue0 * dArr.length / 100));    //前10%数组\r\n                                    } else //前10%数组\r\n                                    if (conditionName == 'last10') {\r\n                                        cArr = dArr.slice(dArr.length - conditionValue0, dArr.length);    //最后10项数组\r\n                                    } else //最后10项数组\r\n                                    if (conditionName == 'last10%') {\r\n                                        cArr = dArr.slice(dArr.length - Math.floor(conditionValue0 * dArr.length / 100), dArr.length);    //最后10%数组\r\n                                    }    //循环应用范围计算\r\n                                    //最后10%数组\r\n                                    //循环应用范围计算\r\n                                    for (let r = cellrange[s].row[0]; r <= cellrange[s].row[1]; r++) {\r\n                                        for (let c = cellrange[s].column[0]; c <= cellrange[s].column[1]; c++) {\r\n                                            if (d[r] == null || d[r][c] == null) {\r\n                                                continue;\r\n                                            }    //单元格值\r\n                                            //单元格值\r\n                                            let cellVal = getcellvalue(r, c, d);    //符合条件\r\n                                            //符合条件\r\n                                            if (cArr.indexOf(cellVal) != -1) {\r\n                                                if (r + '_' + c in computeMap) {\r\n                                                    computeMap[r + '_' + c]['textColor'] = textColor;\r\n                                                    computeMap[r + '_' + c]['cellColor'] = cellColor;\r\n                                                } else {\r\n                                                    computeMap[r + '_' + c] = {\r\n                                                        'textColor': textColor,\r\n                                                        'cellColor': cellColor\r\n                                                    };\r\n                                                }\r\n                                            }\r\n                                        }\r\n                                    }\r\n                                } else if (conditionName == 'AboveAverage' || conditionName == 'SubAverage') {\r\n                                    //计算数组平均值\r\n                                    let sum = 0;\r\n                                    for (let j = 0; j < dArr.length; j++) {\r\n                                        sum += dArr[j];\r\n                                    }\r\n                                    let averageNum = sum / dArr.length;    //循环应用范围计算\r\n                                    //循环应用范围计算\r\n                                    if (conditionName == 'AboveAverage') {\r\n                                        //高于平均值\r\n                                        for (let r = cellrange[s].row[0]; r <= cellrange[s].row[1]; r++) {\r\n                                            for (let c = cellrange[s].column[0]; c <= cellrange[s].column[1]; c++) {\r\n                                                if (d[r] == null || d[r][c] == null) {\r\n                                                    continue;\r\n                                                }    //单元格值\r\n                                                //单元格值\r\n                                                let cellVal = getcellvalue(r, c, d);    //符合条件\r\n                                                //符合条件\r\n                                                if (cellVal > averageNum) {\r\n                                                    if (r + '_' + c in computeMap) {\r\n                                                        computeMap[r + '_' + c]['textColor'] = textColor;\r\n                                                        computeMap[r + '_' + c]['cellColor'] = cellColor;\r\n                                                    } else {\r\n                                                        computeMap[r + '_' + c] = {\r\n                                                            'textColor': textColor,\r\n                                                            'cellColor': cellColor\r\n                                                        };\r\n                                                    }\r\n                                                }\r\n                                            }\r\n                                        }\r\n                                    } else if (conditionName == 'SubAverage') {\r\n                                        //低于平均值\r\n                                        for (let r = cellrange[s].row[0]; r <= cellrange[s].row[1]; r++) {\r\n                                            for (let c = cellrange[s].column[0]; c <= cellrange[s].column[1]; c++) {\r\n                                                if (d[r] == null || d[r][c] == null) {\r\n                                                    continue;\r\n                                                }    //单元格值\r\n                                                //单元格值\r\n                                                let cellVal = getcellvalue(r, c, d);    //符合条件\r\n                                                //符合条件\r\n                                                if (cellVal < averageNum) {\r\n                                                    if (r + '_' + c in computeMap) {\r\n                                                        computeMap[r + '_' + c]['textColor'] = textColor;\r\n                                                        computeMap[r + '_' + c]['cellColor'] = cellColor;\r\n                                                    } else {\r\n                                                        computeMap[r + '_' + c] = {\r\n                                                            'textColor': textColor,\r\n                                                            'cellColor': cellColor\r\n                                                        };\r\n                                                    }\r\n                                                }\r\n                                            }\r\n                                        }\r\n                                    }\r\n                                }\r\n                            } else if (conditionName == 'formula') {\r\n                                let str = cellrange[s].row[0], edr = cellrange[s].row[1], stc = cellrange[s].column[0], edc = cellrange[s].column[1];\r\n                                let formulaTxt = conditionValue0;\r\n                                if (conditionValue0.toString().slice(0, 1) != '=') {\r\n                                    formulaTxt = '=' + conditionValue0;\r\n                                }\r\n                                for (let r = str; r <= edr; r++) {\r\n                                    for (let c = stc; c <= edc; c++) {\r\n                                        let func = formulaTxt;\r\n                                        let offsetRow = r - str;\r\n                                        let offsetCol = c - stc;\r\n                                        if (offsetRow > 0) {\r\n                                            func = '=' + formula.functionCopy(func, 'down', offsetRow);\r\n                                        }\r\n                                        if (offsetCol > 0) {\r\n                                            func = '=' + formula.functionCopy(func, 'right', offsetCol);\r\n                                        }\r\n                                        let funcV = formula.execfunction(func);\r\n                                        let v = funcV[1];\r\n                                        if (typeof v != 'boolean') {\r\n                                            v = !!Number(v);\r\n                                        }\r\n                                        if (!v) {\r\n                                            continue;\r\n                                        }\r\n                                        if (r + '_' + c in computeMap) {\r\n                                            computeMap[r + '_' + c]['textColor'] = textColor;\r\n                                            computeMap[r + '_' + c]['cellColor'] = cellColor;\r\n                                        } else {\r\n                                            computeMap[r + '_' + c] = {\r\n                                                'textColor': textColor,\r\n                                                'cellColor': cellColor\r\n                                            };\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            return computeMap;\r\n        },\r\n        updateItem: function (type, cellrange, format) {\r\n            if (!checkProtectionFormatCells(Store.currentSheetIndex)) {\r\n                return;\r\n            }\r\n            let _this = this;\r\n            let index = getSheetIndex(Store.currentSheetIndex);    //保存之前的规则\r\n            //保存之前的规则\r\n            let fileH = $.extend(true, [], Store.luckysheetfile);\r\n            let historyRules = _this.getHistoryRules(fileH);    //保存当前的规则\r\n            //保存当前的规则\r\n            let ruleArr;\r\n            if (type == 'delSheet') {\r\n                ruleArr = [];\r\n            } else {\r\n                let rule = {\r\n                    'type': type,\r\n                    'cellrange': cellrange,\r\n                    'format': format\r\n                };\r\n                ruleArr = Store.luckysheetfile[index]['luckysheet_conditionformat_save'] == null ? [] : Store.luckysheetfile[index]['luckysheet_conditionformat_save'];\r\n                ruleArr.push(rule);\r\n            }\r\n            Store.luckysheetfile[index]['luckysheet_conditionformat_save'] = ruleArr;\r\n            let fileC = $.extend(true, [], Store.luckysheetfile);\r\n            let currentRules = _this.getCurrentRules(fileC);    //刷新一次表格\r\n            //刷新一次表格\r\n            _this.ref(historyRules, currentRules);    //发送给后台\r\n            //发送给后台\r\n            if (Store.allowUpdate) {\r\n                Store.saveParam('all', Store.currentSheetIndex, ruleArr, { 'k': 'luckysheet_conditionformat_save' });\r\n            }\r\n        },\r\n        getHistoryRules: function (fileH) {\r\n            let historyRules = [];\r\n            for (let h = 0; h < fileH.length; h++) {\r\n                historyRules.push({\r\n                    'sheetIndex': fileH[h]['index'],\r\n                    'luckysheet_conditionformat_save': fileH[h]['luckysheet_conditionformat_save']\r\n                });\r\n            }\r\n            return historyRules;\r\n        },\r\n        getCurrentRules: function (fileC) {\r\n            let currentRules = [];\r\n            for (let c = 0; c < fileC.length; c++) {\r\n                currentRules.push({\r\n                    'sheetIndex': fileC[c]['index'],\r\n                    'luckysheet_conditionformat_save': fileC[c]['luckysheet_conditionformat_save']\r\n                });\r\n            }\r\n            return currentRules;\r\n        },\r\n        ref: function (historyRules, currentRules) {\r\n            if (Store.clearjfundo) {\r\n                Store.jfundo.length = 0;\r\n                let redo = {};\r\n                redo['type'] = 'updateCF';\r\n                redo['data'] = {\r\n                    'historyRules': historyRules,\r\n                    'currentRules': currentRules\r\n                };\r\n                Store.jfredo.push(redo);\r\n            }\r\n            ///setTimeout(function () {\r\n            ///    luckysheetrefreshgrid();\r\n            ///}, 1);\r\n            Store.refresh();\r\n        }\r\n    };\r\n    return conditionformat;\r\n});"]}