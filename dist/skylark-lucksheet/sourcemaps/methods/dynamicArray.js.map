{"version":3,"sources":["methods/dynamicArray.js"],"names":["define","m_util","m_get","Store","getObjType","getSheetIndex","dynamicArrayCompute","dynamicArray","dynamicArray_compute","i","length","d_row","r","d_col","c","d_f","f","flowdata","dynamicArraySpillEditCompute","d_data","data","d_rowlen","d_collen","dynamicArrayRangeIsAllNull","row","column","x","y","rowIndex","colIndex","v","computeObj","range","r1","r2","c1","c2","isAllNull","toString","dynamicArrayHightShow","luckysheetfile","currentSheetIndex","rlen","clen","d_row_end","d_col_end","visibledatarow","row_pre","col","visibledatacolumn","col_pre","$","css","left","width","top","height","display","hide"],"mappings":"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","file":"../../methods/dynamicArray.js","sourcesContent":["define([\n    '../utils/util',\n    './get',\n    '../store'\n], function (m_util, m_get, Store) {\n    'use strict';\n    const {getObjType} = m_util;\n    const {getSheetIndex} = m_get;\n    //动态数组计算\n    function dynamicArrayCompute(dynamicArray) {\n        let dynamicArray_compute = {};\n        if (getObjType(dynamicArray) == 'array') {\n            for (let i = 0; i < dynamicArray.length; i++) {\n                let d_row = dynamicArray[i].r;\n                let d_col = dynamicArray[i].c;\n                let d_f = dynamicArray[i].f;\n                if (Store.flowdata[d_row][d_col] != null && Store.flowdata[d_row][d_col].f != null && Store.flowdata[d_row][d_col].f == d_f) {\n                    if (d_row + '_' + d_col in dynamicArray_compute) {\n                        dynamicArray_compute = dynamicArraySpillEditCompute(dynamicArray_compute, d_row, d_col);\n                    }\n                    let d_data = dynamicArray[i].data;\n                    let d_rowlen = d_data.length;\n                    let d_collen = 1;\n                    if (getObjType(d_data[0]) == 'array') {\n                        d_collen = d_data[0].length;\n                    }\n                    if (dynamicArrayRangeIsAllNull({\n                            'row': [\n                                d_row,\n                                d_row + d_rowlen - 1\n                            ],\n                            'column': [\n                                d_col,\n                                d_col + d_collen - 1\n                            ]\n                        }, Store.flowdata)) {\n                        for (let x = 0; x < d_rowlen; x++) {\n                            for (let y = 0; y < d_collen; y++) {\n                                let rowIndex = d_row + x;\n                                let colIndex = d_col + y;\n                                if (getObjType(d_data[0]) == 'array') {\n                                    dynamicArray_compute[rowIndex + '_' + colIndex] = {\n                                        'v': d_data[x][y],\n                                        'r': d_row,\n                                        'c': d_col\n                                    };\n                                } else {\n                                    dynamicArray_compute[rowIndex + '_' + colIndex] = {\n                                        'v': d_data[x],\n                                        'r': d_row,\n                                        'c': d_col\n                                    };\n                                }\n                            }\n                        }\n                    } else {\n                        dynamicArray_compute[d_row + '_' + d_col] = {\n                            'v': '#SPILL!',\n                            'r': d_row,\n                            'c': d_col\n                        };\n                    }\n                }\n            }\n        }\n        return dynamicArray_compute;\n    }\n    function dynamicArraySpillEditCompute(computeObj, r, c) {\n        let rowIndex = computeObj[r + '_' + c].r;\n        let colIndex = computeObj[r + '_' + c].c;\n        for (let x in computeObj) {\n            if (x == rowIndex + '_' + colIndex) {\n                computeObj[x].v = '#SPILL!';\n            } else if (computeObj[x].r == rowIndex && computeObj[x].c == colIndex) {\n                delete computeObj[x];\n            }\n        }\n        return computeObj;\n    }    //范围是否都是空单元格(除第一个单元格)\n    //范围是否都是空单元格(除第一个单元格)\n    function dynamicArrayRangeIsAllNull(range, data) {\n        let r1 = range['row'][0], r2 = range['row'][1];\n        let c1 = range['column'][0], c2 = range['column'][1];\n        let isAllNull = true;\n        for (let r = r1; r <= r2; r++) {\n            for (let c = c1; c <= c2; c++) {\n                if (!(r == r1 && c == c1) && data[r][c] != null && data[r][c].v != null && data[r][c].v.toString() != '') {\n                    isAllNull = false;\n                    break;\n                }\n            }\n        }\n        return isAllNull;\n    }    //点击表格区域是否属于动态数组区域\n    //点击表格区域是否属于动态数组区域\n    function dynamicArrayHightShow(r, c) {\n        let dynamicArray = Store.luckysheetfile[getSheetIndex(Store.currentSheetIndex)]['dynamicArray'] == null ? [] : Store.luckysheetfile[getSheetIndex(Store.currentSheetIndex)]['dynamicArray'];\n        let dynamicArray_compute = dynamicArrayCompute(dynamicArray);\n        if (r + '_' + c in dynamicArray_compute && dynamicArray_compute[r + '_' + c].v != '#SPILL!') {\n            let d_row = dynamicArray_compute[r + '_' + c].r;\n            let d_col = dynamicArray_compute[r + '_' + c].c;\n            let d_f = Store.flowdata[d_row][d_col].f;\n            let rlen, clen;\n            for (let i = 0; i < dynamicArray.length; i++) {\n                if (dynamicArray[i].f == d_f) {\n                    rlen = dynamicArray[i].data.length;\n                    if (getObjType(dynamicArray[i].data[0]) == 'array') {\n                        clen = dynamicArray[i].data[0].length;\n                    } else {\n                        clen = 1;\n                    }\n                }\n            }\n            let d_row_end = d_row + rlen - 1;\n            let d_col_end = d_col + clen - 1;\n            let row = Store.visibledatarow[d_row_end], row_pre = d_row - 1 == -1 ? 0 : Store.visibledatarow[d_row - 1];\n            let col = Store.visibledatacolumn[d_col_end], col_pre = d_col - 1 == -1 ? 0 : Store.visibledatacolumn[d_col - 1];\n            $('#luckysheet-dynamicArray-hightShow').css({\n                'left': col_pre,\n                'width': col - col_pre - 1,\n                'top': row_pre,\n                'height': row - row_pre - 1,\n                'display': 'block'\n            });\n        } else {\n            $('#luckysheet-dynamicArray-hightShow').hide();\n        }\n    }\n    return {\n        dynamicArrayCompute,\n        dynamicArraySpillEditCompute,\n        dynamicArrayRangeIsAllNull,\n        dynamicArrayHightShow\n    };\n});"]}