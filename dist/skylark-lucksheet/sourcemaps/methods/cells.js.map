{"version":3,"sources":["methods/cells.js"],"names":["define","m_get","m_util","Store","conditionformat","alternateformat","locale","getSheetIndex","getObjType","cells","borderfix","d","r","c","bg","mergeborer","row_index","col_index","console","warn","value","margeMaindata","start_r","end_r","row","row_pre","start_c","end_c","col","col_pre","col_rs","mc","cs","row_rs","rs","margeMain","visibledatarow","visibledatacolumn","column","getCellRealSize","cell_r","cell_c","_this","this","width","defaultcollen","height","defaultrowlen","celldata","margeset","config","getluckysheetfile","currentSheetIndex","getTextHeightCache","getTextSize","text","font","fontarray","f","$","length","appendTo","o","css","w","innerWidth","h","innerHeight","getStyleByCell","style","af_compute","getComputeMap","checksAF","cf_compute","checksCF","cell","isInline","ct","isInlineStringCell","key","checkstatus","getFontStyleByCell","mergeMoveData","mergeMoveMain","columnseleted","rowseleted","s","top","left","mergesetting","getSheetMerge","mcset","push","offloop","i","changeparam","mergeMove","row_st","row_ed","col_st","col_ed","ismatch","flowdata","row_focus","column_focus","t","isInlineStringCT","isCheck","locale_fontarray","checkstatusByCell","isNaN","parseInt","color","fs","Math","floor","a","foucsStatus","bl","it","ff","cl","un","indexOf","rgbTohex","toString","substr"],"mappings":"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","file":"../../methods/cells.js","sourcesContent":["define([\r\n    './get',\r\n    '../utils/util',\r\n    '../store',\r\n    './conditionformat_methods',\r\n    './alternateformat_methods',\r\n    '../locale/locale'\r\n], function (m_get, m_util, Store,conditionformat,alternateformat,locale) {\r\n    'use strict';\r\n    const {getSheetIndex} = m_get;\r\n    const {getObjType} = m_util;\r\n\r\n    const cells = {\r\n        // from controllers/menuButtons\r\n        borderfix: function (d, r, c) {\r\n            // return [-1, -1, 2, 2];\r\n            let cell = d[r][c];\r\n            let bg = null;\r\n            if (cell == null) {\r\n                return [\r\n                    -1,\r\n                    0,\r\n                    0,\r\n                    -1\r\n                ];\r\n            } else if (d[r][c].bg == null || d[r][c].bg == '') {\r\n                return [\r\n                    -1,\r\n                    0,\r\n                    0,\r\n                    -1\r\n                ];\r\n            } else {\r\n                return [\r\n                    -2,\r\n                    -1,\r\n                    1,\r\n                    0\r\n                ];    //return [-2, -2, 1, 0];\r\n            }\r\n        },\r\n\r\n\r\n        mergeborer: function (d, row_index, col_index) {\r\n            if (d == null || d[row_index] == null) {\r\n                console.warn('Merge info is null', row_index, col_index);\r\n                return null;\r\n            }\r\n            let value = d[row_index][col_index];\r\n            if (getObjType(value) == 'object' && 'mc' in value) {\r\n                let margeMaindata = value['mc'];\r\n                if (margeMaindata == null) {\r\n                    console.warn('Merge info is null', row_index, col_index);\r\n                    return null;\r\n                }\r\n                col_index = margeMaindata.c;\r\n                row_index = margeMaindata.r;\r\n                if (d[row_index][col_index] == null) {\r\n                    console.warn('Main merge Cell info is null', row_index, col_index);\r\n                    return null;\r\n                }\r\n                let col_rs = d[row_index][col_index].mc.cs;\r\n                let row_rs = d[row_index][col_index].mc.rs;\r\n                let margeMain = d[row_index][col_index].mc;\r\n                let start_r, end_r, row, row_pre;\r\n                for (let r = row_index; r < margeMain.rs + row_index; r++) {\r\n                    if (r == 0) {\r\n                        start_r = -1;\r\n                    } else {\r\n                        start_r = Store.visibledatarow[r - 1] - 1;\r\n                    }\r\n                    end_r = Store.visibledatarow[r];\r\n                    if (row_pre == null) {\r\n                        row_pre = start_r;\r\n                        row = end_r;\r\n                    } else {\r\n                        row += end_r - start_r - 1;\r\n                    }\r\n                }\r\n                let start_c, end_c, col, col_pre;\r\n                for (let c = col_index; c < margeMain.cs + col_index; c++) {\r\n                    if (c == 0) {\r\n                        start_c = 0;\r\n                    } else {\r\n                        start_c = Store.visibledatacolumn[c - 1];\r\n                    }\r\n                    end_c = Store.visibledatacolumn[c];\r\n                    if (col_pre == null) {\r\n                        col_pre = start_c;\r\n                        col = end_c;\r\n                    } else {\r\n                        col += end_c - start_c;\r\n                    }\r\n                }\r\n                return {\r\n                    'row': [\r\n                        row_pre,\r\n                        row,\r\n                        row_index,\r\n                        row_index + row_rs - 1\r\n                    ],\r\n                    'column': [\r\n                        col_pre,\r\n                        col,\r\n                        col_index,\r\n                        col_index + col_rs - 1\r\n                    ]\r\n                };\r\n            } else {\r\n                return null;\r\n            }\r\n        },\r\n        getCellRealSize: function (d, cell_r, cell_c) {\r\n            let _this = this;\r\n            let width = Store.defaultcollen;\r\n            let height = Store.defaultrowlen;\r\n            let celldata = d[cell_r][cell_c];\r\n            if (!!celldata && celldata['mc'] != null) {\r\n                let mc = celldata['mc'];\r\n                let margeset = _this.mergeborer(d, mc.r, mc.c);\r\n                if (!!margeset) {\r\n                    let row = margeset.row[1];\r\n                    let row_pre = margeset.row[0];\r\n                    let row_index = margeset.row[2];\r\n                    let row_index_ed = margeset.row[3];\r\n                    let col = margeset.column[1];\r\n                    let col_pre = margeset.column[0];\r\n                    let col_index = margeset.column[2];\r\n                    let col_index_ed = margeset.column[3];\r\n                    width = col - col_pre - 1;\r\n                    height = row - row_pre - 1;\r\n                }\r\n            } else {\r\n                let config = getluckysheetfile()[getSheetIndex(Store.currentSheetIndex)]['config'];\r\n                if (config['columnlen'] != null && config['columnlen'][cell_c] != null) {\r\n                    width = config['columnlen'][cell_c];\r\n                }\r\n                if (config['rowlen'] != null && config['rowlen'][cell_r] != null) {\r\n                    height = config['rowlen'][cell_r];\r\n                }\r\n            }\r\n            return [\r\n                width,\r\n                height\r\n            ];\r\n        },\r\n        getTextHeightCache: {},\r\n        getTextSize: function (text, font) {\r\n            let fontarray = locale().fontarray;\r\n            let f = font || '10pt ' + fontarray[0];\r\n            let _this = this;\r\n            if (f in _this.getTextHeightCache) {\r\n                return _this.getTextHeightCache[f];\r\n            }\r\n            if ($('#luckysheetTextSizeTest').length == 0) {\r\n                $('<span id=\"luckysheetTextSizeTest\" style=\"float:left;white-space:nowrap;visibility:hidden;margin:0;padding:0;\">' + text + '</span>').appendTo($('body'));\r\n            }\r\n            let o = $('#luckysheetTextSizeTest').text(text).css({ 'font': f }), w = o.innerWidth(), h = o.innerHeight();\r\n            _this.getTextHeightCache[f] = [\r\n                w,\r\n                h\r\n            ];\r\n            return [\r\n                w,\r\n                h\r\n            ];\r\n        },\r\n        getStyleByCell: function (d, r, c) {\r\n            let _this = this;\r\n            let style = '';    //交替颜色\r\n            //交替颜色\r\n            let af_compute = alternateformat.getComputeMap();\r\n            let checksAF = alternateformat.checksAF(r, c, af_compute);    //条件格式\r\n            //条件格式\r\n            let cf_compute = conditionformat.getComputeMap();\r\n            let checksCF = conditionformat.checksCF(r, c, cf_compute);\r\n            const locale_fontarray = locale().fontarray;\r\n            let cell = d[r][c];\r\n            let ct = cell.ct, isInline = false;\r\n            if (cells.isInlineStringCell(cell)) {\r\n                isInline = true;\r\n            }\r\n            for (let key in cell) {\r\n                let value = _this.checkstatus(d, r, c, key);\r\n                if (checksAF != null || checksCF != null && checksCF['cellColor'] != null) {\r\n                    if (checksCF != null && checksCF['cellColor'] != null) {\r\n                        style += 'background: ' + checksCF['cellColor'] + ';';\r\n                    } else if (checksAF != null) {\r\n                        style += 'background: ' + checksAF[1] + ';';\r\n                    }\r\n                }\r\n                if (getObjType(value) == 'object') {\r\n                    continue;\r\n                }\r\n                if (key == 'bg' || checksAF != null || checksCF != null && checksCF['cellColor'] != null) {\r\n                    if (checksCF != null && checksCF['cellColor'] != null) {\r\n                        style += 'background: ' + checksCF['cellColor'] + ';';\r\n                    } else if (checksAF != null) {\r\n                        style += 'background: ' + checksAF[1] + ';';\r\n                    } else {\r\n                        style += 'background: ' + value + ';';\r\n                    }\r\n                }    // if(!isInline){\r\n                     //     if(key == \"bl\" && value != \"0\"){\r\n                     //         style += \"font-weight: bold;\";\r\n                     //     }\r\n                     //     if(key == \"it\" && value != \"0\"){\r\n                     //         style += \"font-style:italic;\";\r\n                     //     }\r\n                     //     if(key == \"ff\" && value != \"0\"){\r\n                     //         let f = value;\r\n                     //         if(!isNaN(parseInt(value))){\r\n                     //             f = locale_fontarray[parseInt(value)];\r\n                     //         }\r\n                     //         style += \"font-family: \" + f + \";\";\r\n                     //     }\r\n                     //     if(key == \"fs\" && value != \"10\"){\r\n                     //         style += \"font-size: \"+ value + \"pt;\";\r\n                     //     }\r\n                     //     if((key == \"fc\" && value != \"#000000\") || checksAF != null || (checksCF != null && checksCF[\"textColor\"] != null)){\r\n                     //         if(checksCF != null && checksCF[\"textColor\"] != null){\r\n                     //             style += \"color: \" + checksCF[\"textColor\"] + \";\";\r\n                     //         }\r\n                     //         else if(checksAF != null){\r\n                     //             style += \"color: \" + checksAF[0] + \";\";\r\n                     //         }\r\n                     //         else{\r\n                     //             style += \"color: \" + value + \";\";  \r\n                     //         }\r\n                     //     }\r\n                     // }\r\n                // if(!isInline){\r\n                //     if(key == \"bl\" && value != \"0\"){\r\n                //         style += \"font-weight: bold;\";\r\n                //     }\r\n                //     if(key == \"it\" && value != \"0\"){\r\n                //         style += \"font-style:italic;\";\r\n                //     }\r\n                //     if(key == \"ff\" && value != \"0\"){\r\n                //         let f = value;\r\n                //         if(!isNaN(parseInt(value))){\r\n                //             f = locale_fontarray[parseInt(value)];\r\n                //         }\r\n                //         style += \"font-family: \" + f + \";\";\r\n                //     }\r\n                //     if(key == \"fs\" && value != \"10\"){\r\n                //         style += \"font-size: \"+ value + \"pt;\";\r\n                //     }\r\n                //     if((key == \"fc\" && value != \"#000000\") || checksAF != null || (checksCF != null && checksCF[\"textColor\"] != null)){\r\n                //         if(checksCF != null && checksCF[\"textColor\"] != null){\r\n                //             style += \"color: \" + checksCF[\"textColor\"] + \";\";\r\n                //         }\r\n                //         else if(checksAF != null){\r\n                //             style += \"color: \" + checksAF[0] + \";\";\r\n                //         }\r\n                //         else{\r\n                //             style += \"color: \" + value + \";\";  \r\n                //         }\r\n                //     }\r\n                // }\r\n                if (key == 'ht' && value != '1') {\r\n                    if (value == '0') {\r\n                        style += 'text-align: center;';\r\n                    } else if (value == '2') {\r\n                        style += 'text-align: right;';\r\n                    }\r\n                }\r\n                if (key == 'vt' && value != '1') {\r\n                    if (value == '0') {\r\n                        style += 'align-items: center;';\r\n                    } else if (value == '2') {\r\n                        style += 'align-items: flex-end;';\r\n                    }\r\n                }\r\n            }\r\n            if (!isInline) {\r\n                style += cells.getFontStyleByCell(cell, checksAF, checksCF);\r\n            }\r\n            return style;\r\n        },\r\n\r\n        mergeMoveData: {},\r\n        mergeMoveMain: function (columnseleted, rowseleted, s, top, height, left, width) {\r\n            let _this = this;\r\n            let mergesetting = Store.getSheetMerge();\r\n            if (mergesetting == null) {\r\n                return;\r\n            }\r\n            let mcset = [];\r\n            for (let key in mergesetting) {\r\n                mcset.push(key);\r\n            }\r\n            if (rowseleted[0] > rowseleted[1]) {\r\n                rowseleted[1] = rowseleted[0];\r\n            }\r\n            if (columnseleted[0] > columnseleted[1]) {\r\n                columnseleted[1] = columnseleted[0];\r\n            }\r\n            let offloop = true;\r\n            _this.mergeMoveData = {};\r\n            while (offloop) {\r\n                offloop = false;\r\n                for (let i = 0; i < mcset.length; i++) {\r\n                    let key = mcset[i];\r\n                    let mc = mergesetting[key];\r\n                    if (key in _this.mergeMoveData) {\r\n                        continue;\r\n                    }\r\n                    let changeparam = _this.mergeMove(mc, columnseleted, rowseleted, s, top, height, left, width);\r\n                    if (changeparam != null) {\r\n                        _this.mergeMoveData[key] = mc;\r\n                        columnseleted = changeparam[0];\r\n                        rowseleted = changeparam[1];\r\n                        top = changeparam[2];\r\n                        height = changeparam[3];\r\n                        left = changeparam[4];\r\n                        width = changeparam[5];\r\n                        offloop = true;\r\n                    } else {\r\n                        delete _this.mergeMoveData[key];\r\n                    }\r\n                }\r\n            }\r\n            return [\r\n                columnseleted,\r\n                rowseleted,\r\n                top,\r\n                height,\r\n                left,\r\n                width\r\n            ];\r\n        },\r\n        mergeMove: function (mc, columnseleted, rowseleted, s, top, height, left, width) {\r\n            let _this = this;\r\n            let row_st = mc.r, row_ed = mc.r + mc.rs - 1;\r\n            let col_st = mc.c, col_ed = mc.c + mc.cs - 1;\r\n            let ismatch = false;\r\n            if (columnseleted[1] < columnseleted[0]) {\r\n                columnseleted[0] = columnseleted[1];\r\n            }\r\n            if (rowseleted[1] < rowseleted[0]) {\r\n                rowseleted[0] = rowseleted[1];\r\n            }\r\n            if (columnseleted[0] <= col_st && columnseleted[1] >= col_ed && rowseleted[0] <= row_st && rowseleted[1] >= row_ed || !(columnseleted[1] < col_st || columnseleted[0] > col_ed) && !(rowseleted[1] < row_st || rowseleted[0] > row_ed)) {\r\n                let margeset = _this.mergeborer(Store.flowdata, mc.r, mc.c);\r\n                if (!!margeset) {\r\n                    let row = margeset.row[1], row_pre = margeset.row[0], row_index = margeset.row[2], col = margeset.column[1], col_pre = margeset.column[0], col_index = margeset.column[2];\r\n                    if (!(columnseleted[1] < col_st || columnseleted[0] > col_ed)) {\r\n                        //向上滑动\r\n                        if (rowseleted[0] <= row_ed && rowseleted[0] >= row_st) {\r\n                            height += top - row_pre;\r\n                            top = row_pre;\r\n                            rowseleted[0] = row_st;\r\n                        }  \r\n                        //向下滑动或者居中时往上滑动的向下补齐\r\n                        if (rowseleted[1] >= row_st && rowseleted[1] <= row_ed) {\r\n                            if (s.row_focus >= row_st && s.row_focus <= row_ed) {\r\n                                height = row - top;\r\n                            } else {\r\n                                height = row - top;\r\n                            }\r\n                            rowseleted[1] = row_ed;\r\n                        }\r\n                    }\r\n                    if (!(rowseleted[1] < row_st || rowseleted[0] > row_ed)) {\r\n                        if (columnseleted[0] <= col_ed && columnseleted[0] >= col_st) {\r\n                            width += left - col_pre;\r\n                            left = col_pre;\r\n                            columnseleted[0] = col_st;\r\n                        }   \r\n                        //向右滑动或者居中时往左滑动的向下补齐\r\n                        if (columnseleted[1] >= col_st && columnseleted[1] <= col_ed) {\r\n                            if (s.column_focus >= col_st && s.column_focus <= col_ed) {\r\n                                width = col - left;\r\n                            } else {\r\n                                width = col - left;\r\n                            }\r\n                            columnseleted[1] = col_ed;\r\n                        }\r\n                    }\r\n                    ismatch = true;\r\n                }\r\n            }\r\n            if (ismatch) {\r\n                return [\r\n                    columnseleted,\r\n                    rowseleted,\r\n                    top,\r\n                    height,\r\n                    left,\r\n                    width\r\n                ];\r\n            } else {\r\n                return null;\r\n            }\r\n        },\r\n\r\n        //from ../controllers/inlineString\r\n        isInlineStringCell : function (cell) {\r\n            let isIs = cell && cell.ct != null && cell.ct.t == 'inlineStr' && cell.ct.s != null && cell.ct.s.length > 0;\r\n            return isIs;\r\n        },\r\n        isInlineStringCT : function(ct) {\r\n            let isIs = ct != null && ct.t == 'inlineStr' && ct.s != null && ct.s.length > 0;\r\n            return isIs;\r\n        },\r\n        getFontStyleByCell : function (cell, checksAF, checksCF, isCheck = true) {\r\n            if (cell == null) {\r\n                return;\r\n            }\r\n            let style = '';\r\n            const _locale = locale();\r\n            const locale_fontarray = _locale.fontarray;\r\n            for (let key in cell) {\r\n                let value = cell[key];\r\n                if (isCheck) {\r\n                    value = cells.checkstatusByCell(cell, key);\r\n                }\r\n                if (key == 'bl' && value != '0') {\r\n                    style += 'font-weight: bold;';\r\n                }\r\n                if (key == 'it' && value != '0') {\r\n                    style += 'font-style:italic;';\r\n                }\r\n                if (key == 'ff') {\r\n                    let f = value;\r\n                    if (!isNaN(parseInt(value))) {\r\n                        f = locale_fontarray[parseInt(value)];\r\n                    } else {\r\n                        f = value;\r\n                    }\r\n                    style += 'font-family: ' + f + ';';\r\n                }\r\n                if (key == 'fs' && value != '10') {\r\n                    style += 'font-size: ' + value + 'pt;';\r\n                }\r\n                if (key == 'fc' && value != '#000000' || checksAF != null || checksCF != null && checksCF['textColor'] != null) {\r\n                    if (checksCF != null && checksCF['textColor'] != null) {\r\n                        style += 'color: ' + checksCF['textColor'] + ';';\r\n                    } else if (checksAF != null) {\r\n                        style += 'color: ' + checksAF[0] + ';';\r\n                    } else {\r\n                        style += 'color: ' + value + ';';\r\n                    }\r\n                }\r\n                if (key == 'cl' && value != '0') {\r\n                    style += 'text-decoration: line-through;';\r\n                }\r\n                if (key == 'un' && (value == '1' || value == '3')) {\r\n                    let color = cell['_color'];\r\n                    if (color == null) {\r\n                        color = cell['fc'];\r\n                    }\r\n                    let fs = cell['_fontSize'];\r\n                    if (fs == null) {\r\n                        fs = cell['fs'];\r\n                    }\r\n                    style += 'border-bottom: ' + Math.floor(fs / 9) + 'px solid ' + color + ';';\r\n                }\r\n            }\r\n            return style;\r\n        },\r\n        checkstatusByCell : function (cell, a) {\r\n            let foucsStatus = cell;\r\n            let tf = {\r\n                'bl': 1,\r\n                'it': 1,\r\n                'ff': 1,\r\n                'cl': 1,\r\n                'un': 1\r\n            };\r\n            if (a in tf || a == 'fs' && cells.isInlineStringCell(cell)) {\r\n                if (foucsStatus == null) {\r\n                    foucsStatus = '0';\r\n                } else {\r\n                    // var  w = window.getSelection(), isInlineEdit=false; \r\n                    // if(w.type!=\"None\"){\r\n                    //     var range = w.getRangeAt(0);\r\n                    //     let startContainer = range.startContainer;\r\n                    //     if (parseInt($(\"#luckysheet-input-box\").css(\"top\")) > 0 && startContainer.parentNode.tagName==\"SPAN\" && !range.collapsed) {\r\n                    //         let span = startContainer.parentNode;\r\n                    //         let styleList = convertCssToStyleList(span.style.cssText);\r\n                    //         foucsStatus = styleList[a];\r\n                    //         isInlineEdit = true;\r\n                    //     }\r\n                    // }\r\n                    // if(!isInlineEdit){       \r\n                    //     if(isInlineStringCell(cell)){\r\n                    //         foucsStatus = cell.ct.s[0][a];\r\n                    //     }\r\n                    //     else{\r\n                    //         foucsStatus = foucsStatus[a];\r\n                    //     }\r\n                    // }   \r\n                    foucsStatus = foucsStatus[a];\r\n                    if (foucsStatus == null) {\r\n                        foucsStatus = '0';\r\n                    }\r\n                }\r\n            } else if (a == 'fc') {\r\n                if (foucsStatus == null) {\r\n                    foucsStatus = '#000000';\r\n                } else {\r\n                    foucsStatus = foucsStatus[a];\r\n                    if (foucsStatus == null) {\r\n                        foucsStatus = '#000000';\r\n                    }\r\n                    if (foucsStatus.indexOf('rgba') > -1) {\r\n                        foucsStatus = rgbTohex(foucsStatus);\r\n                    }\r\n                }\r\n            } else if (a == 'bg') {\r\n                if (foucsStatus == null) {\r\n                    foucsStatus = null;\r\n                } else {\r\n                    foucsStatus = foucsStatus[a];\r\n                    if (foucsStatus == null) {\r\n                        foucsStatus = null;\r\n                    } else if (foucsStatus.toString().indexOf('rgba') > -1) {\r\n                        foucsStatus = rgbTohex(foucsStatus);\r\n                    }\r\n                }\r\n            } else if (a.substr(0, 2) == 'bs') {\r\n                if (foucsStatus == null) {\r\n                    foucsStatus = 'none';\r\n                } else {\r\n                    foucsStatus = foucsStatus[a];\r\n                    if (foucsStatus == null) {\r\n                        foucsStatus = 'none';\r\n                    }\r\n                }\r\n            } else if (a.substr(0, 2) == 'bc') {\r\n                if (foucsStatus == null) {\r\n                    foucsStatus = '#000000';\r\n                } else {\r\n                    foucsStatus = foucsStatus[a];\r\n                    if (foucsStatus == null) {\r\n                        foucsStatus = '#000000';\r\n                    }\r\n                }\r\n            } else if (a == 'ht') {\r\n                if (foucsStatus == null) {\r\n                    foucsStatus = '1';\r\n                } else {\r\n                    foucsStatus = foucsStatus[a];\r\n                    if (foucsStatus == null) {\r\n                        foucsStatus = '1';\r\n                    }\r\n                }\r\n                if ([\r\n                        '0',\r\n                        '1',\r\n                        '2'\r\n                    ].indexOf(foucsStatus.toString()) == -1) {\r\n                    foucsStatus = '1';\r\n                }\r\n            } else if (a == 'vt') {\r\n                //默认垂直居中\r\n                if (foucsStatus == null) {\r\n                    foucsStatus = '0';\r\n                } else {\r\n                    foucsStatus = foucsStatus[a];\r\n                    if (foucsStatus == null) {\r\n                        foucsStatus = '0';\r\n                    }\r\n                }\r\n                if ([\r\n                        '0',\r\n                        '1',\r\n                        '2'\r\n                    ].indexOf(foucsStatus.toString()) == -1) {\r\n                    foucsStatus = '0';\r\n                }\r\n            } else if (a == 'ct') {\r\n                if (foucsStatus == null) {\r\n                    foucsStatus = null;\r\n                } else {\r\n                    foucsStatus = foucsStatus[a];\r\n                    if (foucsStatus == null) {\r\n                        foucsStatus = null;\r\n                    }\r\n                }\r\n            } else if (a == 'fs') {\r\n                if (foucsStatus == null) {\r\n                    foucsStatus = '10';\r\n                } else {\r\n                    foucsStatus = foucsStatus[a];\r\n                    if (foucsStatus == null) {\r\n                        foucsStatus = '10';\r\n                    }\r\n                }\r\n            } else if (a == 'tb') {\r\n                if (foucsStatus == null) {\r\n                    foucsStatus = '0';\r\n                } else {\r\n                    foucsStatus = foucsStatus[a];\r\n                    if (foucsStatus == null) {\r\n                        foucsStatus = '0';\r\n                    }\r\n                }\r\n            } else if (a == 'tr') {\r\n                if (foucsStatus == null) {\r\n                    foucsStatus = '0';\r\n                } else {\r\n                    foucsStatus = foucsStatus[a];\r\n                    if (foucsStatus == null) {\r\n                        foucsStatus = '0';\r\n                    }\r\n                }\r\n            } else if (a == 'rt') {\r\n                if (foucsStatus == null) {\r\n                    foucsStatus = null;\r\n                } else {\r\n                    foucsStatus = foucsStatus[a];\r\n                    if (foucsStatus == null) {\r\n                        foucsStatus = null;\r\n                    }\r\n                }\r\n            }\r\n            return foucsStatus;\r\n        },\r\n        checkstatus: function (d, r, c, a) {\r\n            if (d == null || d[r] == null) {\r\n                console.warn(\"It's incorrect data\", r, c);\r\n                return null;\r\n            }\r\n            let foucsStatus = d[r][c];\r\n            return cells.checkstatusByCell(foucsStatus, a);\r\n        },\r\n    };\r\n\r\n    return cells;\r\n});"]}