{"version":3,"sources":["function/matrix_methods.js"],"names":["define","matrix","sylvester_matrix","precision","create","elements","setElements","I","n","j","els","i","prototype","e","this","length","dimensions","cols","rows","eql","M","nj","Math","abs","dup","map","fn","context","call","isSameSizeAs","add","x","subtract","canMultiplyFromLeft","multiply","returnVector","modulus","c","sum","col","minor","a","b","d","ni","transpose","isSquare","max","m","indexOf","diagonal","push","toRightTriangular","p","np","multiplier","determinant","det","isSingular","trace","tr","rank","augment","T","inverse","divisor","new_element","inverse_elements","round","snapTo","init"],"mappings":"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","file":"../../function/matrix_methods.js","sourcesContent":["define(function () {\n    'use strict';\n    var matrix = {};\n    var init = function init(matrix) {\n        var sylvester_matrix = function () {\n        };\n        sylvester_matrix.precision = 0.000001;\n        sylvester_matrix.create = function (elements) {\n            var M = new sylvester_matrix();\n            return M.setElements(elements);\n        };\n        var $M = sylvester_matrix.create;\n        sylvester_matrix.I = function (n) {\n            var els = [], i = n, j;\n            while (i--) {\n                j = n;\n                els[i] = [];\n                while (j--) {\n                    els[i][j] = i === j ? 1 : 0;\n                }\n            }\n            return sylvester_matrix.create(els);\n        };\n        sylvester_matrix.prototype = {\n            e: function (i, j) {\n                if (i < 1 || i > this.elements.length || j < 1 || j > this.elements[0].length) {\n                    return null;\n                }\n                return this.elements[i - 1][j - 1];\n            },\n            dimensions: function () {\n                var cols = this.elements.length === 0 ? 0 : this.elements[0].length;\n                return {\n                    rows: this.elements.length,\n                    cols: cols\n                };\n            },\n            rows: function () {\n                return this.elements.length;\n            },\n            cols: function () {\n                if (this.elements.length === 0) {\n                    return 0;\n                }\n                return this.elements[0].length;\n            },\n            eql: function (matrix) {\n                var M = matrix.elements || matrix;\n                if (!M[0] || typeof M[0][0] === 'undefined') {\n                    M = sylvester_matrix.create(M).elements;\n                }\n                if (this.elements.length === 0 || M.length === 0) {\n                    return this.elements.length === M.length;\n                }\n                if (this.elements.length !== M.length) {\n                    return false;\n                }\n                if (this.elements[0].length !== M[0].length) {\n                    return false;\n                }\n                var i = this.elements.length, nj = this.elements[0].length, j;\n                while (i--) {\n                    j = nj;\n                    while (j--) {\n                        if (Math.abs(this.elements[i][j] - M[i][j]) > sylvester_matrix.precision) {\n                            return false;\n                        }\n                    }\n                }\n                return true;\n            },\n            dup: function () {\n                return sylvester_matrix.create(this.elements);\n            },\n            map: function (fn, context) {\n                if (this.elements.length === 0) {\n                    return sylvester_matrix.create([]);\n                }\n                var els = [], i = this.elements.length, nj = this.elements[0].length, j;\n                while (i--) {\n                    j = nj;\n                    els[i] = [];\n                    while (j--) {\n                        els[i][j] = fn.call(context, this.elements[i][j], i + 1, j + 1);\n                    }\n                }\n                return sylvester_matrix.create(els);\n            },\n            isSameSizeAs: function (matrix) {\n                var M = matrix.elements || matrix;\n                if (typeof M[0][0] === 'undefined') {\n                    M = sylvester_matrix.create(M).elements;\n                }\n                if (this.elements.length === 0) {\n                    return M.length === 0;\n                }\n                return this.elements.length === M.length && this.elements[0].length === M[0].length;\n            },\n            add: function (matrix) {\n                if (this.elements.length === 0)\n                    return this.map(function (x) {\n                        return x;\n                    });\n                var M = matrix.elements || matrix;\n                if (typeof M[0][0] === 'undefined') {\n                    M = sylvester_matrix.create(M).elements;\n                }\n                if (!this.isSameSizeAs(M)) {\n                    return null;\n                }\n                return this.map(function (x, i, j) {\n                    return x + M[i - 1][j - 1];\n                });\n            },\n            subtract: function (matrix) {\n                if (this.elements.length === 0)\n                    return this.map(function (x) {\n                        return x;\n                    });\n                var M = matrix.elements || matrix;\n                if (typeof M[0][0] === 'undefined') {\n                    M = sylvester_matrix.create(M).elements;\n                }\n                if (!this.isSameSizeAs(M)) {\n                    return null;\n                }\n                return this.map(function (x, i, j) {\n                    return x - M[i - 1][j - 1];\n                });\n            },\n            canMultiplyFromLeft: function (matrix) {\n                if (this.elements.length === 0) {\n                    return false;\n                }\n                var M = matrix.elements || matrix;\n                if (typeof M[0][0] === 'undefined') {\n                    M = sylvester_matrix.create(M).elements;\n                }    // this.columns should equal matrix.rows\n                // this.columns should equal matrix.rows\n                return this.elements[0].length === M.length;\n            },\n            multiply: function (matrix) {\n                if (this.elements.length === 0) {\n                    return null;\n                }\n                if (!matrix.elements) {\n                    return this.map(function (x) {\n                        return x * matrix;\n                    });\n                }\n                var returnVector = matrix.modulus ? true : false;\n                var M = matrix.elements || matrix;\n                if (typeof M[0][0] === 'undefined') {\n                    M = sylvester_matrix.create(M).elements;\n                }\n                if (!this.canMultiplyFromLeft(M)) {\n                    return null;\n                }\n                var i = this.elements.length, nj = M[0].length, j;\n                var cols = this.elements[0].length, c, elements = [], sum;\n                while (i--) {\n                    j = nj;\n                    elements[i] = [];\n                    while (j--) {\n                        c = cols;\n                        sum = 0;\n                        while (c--) {\n                            sum += this.elements[i][c] * M[c][j];\n                        }\n                        elements[i][j] = sum;\n                    }\n                }\n                var M = sylvester_matrix.create(elements);\n                return returnVector ? M.col(1) : M;\n            },\n            minor: function (a, b, c, d) {\n                if (this.elements.length === 0) {\n                    return null;\n                }\n                var elements = [], ni = c, i, nj, j;\n                var rows = this.elements.length, cols = this.elements[0].length;\n                while (ni--) {\n                    i = c - ni - 1;\n                    elements[i] = [];\n                    nj = d;\n                    while (nj--) {\n                        j = d - nj - 1;\n                        elements[i][j] = this.elements[(a + i - 1) % rows][(b + j - 1) % cols];\n                    }\n                }\n                return sylvester_matrix.create(elements);\n            },\n            transpose: function () {\n                if (this.elements.length === 0)\n                    return sylvester_matrix.create([]);\n                var rows = this.elements.length, i, cols = this.elements[0].length, j;\n                var elements = [], i = cols;\n                while (i--) {\n                    j = rows;\n                    elements[i] = [];\n                    while (j--) {\n                        elements[i][j] = this.elements[j][i];\n                    }\n                }\n                return sylvester_matrix.create(elements);\n            },\n            isSquare: function () {\n                var cols = this.elements.length === 0 ? 0 : this.elements[0].length;\n                return this.elements.length === cols;\n            },\n            max: function () {\n                if (this.elements.length === 0) {\n                    return null;\n                }\n                var m = 0, i = this.elements.length, nj = this.elements[0].length, j;\n                while (i--) {\n                    j = nj;\n                    while (j--) {\n                        if (Math.abs(this.elements[i][j]) > Math.abs(m)) {\n                            m = this.elements[i][j];\n                        }\n                    }\n                }\n                return m;\n            },\n            indexOf: function (x) {\n                if (this.elements.length === 0) {\n                    return null;\n                }\n                var index = null, ni = this.elements.length, i, nj = this.elements[0].length, j;\n                for (i = 0; i < ni; i++) {\n                    for (j = 0; j < nj; j++) {\n                        if (this.elements[i][j] === x) {\n                            return {\n                                i: i + 1,\n                                j: j + 1\n                            };\n                        }\n                    }\n                }\n                return null;\n            },\n            diagonal: function () {\n                if (!this.isSquare) {\n                    return null;\n                }\n                var els = [], n = this.elements.length;\n                for (var i = 0; i < n; i++) {\n                    els.push(this.elements[i][i]);\n                }\n                return sylvester_matrix.create(els);\n            },\n            toRightTriangular: function () {\n                if (this.elements.length === 0)\n                    return sylvester_matrix.create([]);\n                var M = this.dup(), els;\n                var n = this.elements.length, i, j, np = this.elements[0].length, p;\n                for (i = 0; i < n; i++) {\n                    if (M.elements[i][i] === 0) {\n                        for (j = i + 1; j < n; j++) {\n                            if (M.elements[j][i] !== 0) {\n                                els = [];\n                                for (p = 0; p < np; p++) {\n                                    els.push(M.elements[i][p] + M.elements[j][p]);\n                                }\n                                M.elements[i] = els;\n                                break;\n                            }\n                        }\n                    }\n                    if (M.elements[i][i] !== 0) {\n                        for (j = i + 1; j < n; j++) {\n                            var multiplier = M.elements[j][i] / M.elements[i][i];\n                            els = [];\n                            for (p = 0; p < np; p++) {\n                                // Elements with column numbers up to an including the number of the\n                                // row that we're subtracting can safely be set straight to zero,\n                                // since that's the point of this routine and it avoids having to\n                                // loop over and correct rounding errors later\n                                els.push(p <= i ? 0 : M.elements[j][p] - M.elements[i][p] * multiplier);\n                            }\n                            M.elements[j] = els;\n                        }\n                    }\n                }\n                return M;\n            },\n            determinant: function () {\n                if (this.elements.length === 0) {\n                    return 1;\n                }\n                if (!this.isSquare()) {\n                    return null;\n                }\n                var M = this.toRightTriangular();\n                var det = M.elements[0][0], n = M.elements.length;\n                for (var i = 1; i < n; i++) {\n                    det = det * M.elements[i][i];\n                }\n                return det;\n            },\n            isSingular: function () {\n                return this.isSquare() && this.determinant() === 0;\n            },\n            trace: function () {\n                if (this.elements.length === 0) {\n                    return 0;\n                }\n                if (!this.isSquare()) {\n                    return null;\n                }\n                var tr = this.elements[0][0], n = this.elements.length;\n                for (var i = 1; i < n; i++) {\n                    tr += this.elements[i][i];\n                }\n                return tr;\n            },\n            rank: function () {\n                if (this.elements.length === 0) {\n                    return 0;\n                }\n                var M = this.toRightTriangular(), rank = 0;\n                var i = this.elements.length, nj = this.elements[0].length, j;\n                while (i--) {\n                    j = nj;\n                    while (j--) {\n                        if (Math.abs(M.elements[i][j]) > sylvester_matrix.precision) {\n                            rank++;\n                            break;\n                        }\n                    }\n                }\n                return rank;\n            },\n            augment: function (matrix) {\n                if (this.elements.length === 0) {\n                    return this.dup();\n                }\n                var M = matrix.elements || matrix;\n                if (typeof M[0][0] === 'undefined') {\n                    M = sylvester_matrix.create(M).elements;\n                }\n                var T = this.dup(), cols = T.elements[0].length;\n                var i = T.elements.length, nj = M[0].length, j;\n                if (i !== M.length) {\n                    return null;\n                }\n                while (i--) {\n                    j = nj;\n                    while (j--) {\n                        T.elements[i][cols + j] = M[i][j];\n                    }\n                }\n                return T;\n            },\n            inverse: function () {\n                if (this.elements.length === 0) {\n                    return null;\n                }\n                if (!this.isSquare() || this.isSingular()) {\n                    return null;\n                }\n                var n = this.elements.length, i = n, j;\n                var M = this.augment(sylvester_matrix.I(n)).toRightTriangular();\n                var np = M.elements[0].length, p, els, divisor;\n                var inverse_elements = [], new_element;    // Sylvester.Matrix is non-singular so there will be no zeros on the\n                                                           // diagonal. Cycle through rows from last to first.\n                // Sylvester.Matrix is non-singular so there will be no zeros on the\n                // diagonal. Cycle through rows from last to first.\n                while (i--) {\n                    // First, normalise diagonal elements to 1\n                    els = [];\n                    inverse_elements[i] = [];\n                    divisor = M.elements[i][i];\n                    for (p = 0; p < np; p++) {\n                        new_element = M.elements[i][p] / divisor;\n                        els.push(new_element);    // Shuffle off the current row of the right hand side into the results\n                                                  // array as it will not be modified by later runs through this loop\n                        // Shuffle off the current row of the right hand side into the results\n                        // array as it will not be modified by later runs through this loop\n                        if (p >= n) {\n                            inverse_elements[i].push(new_element);\n                        }\n                    }\n                    M.elements[i] = els;    // Then, subtract this row from those above it to give the identity matrix\n                                            // on the left hand side\n                    // Then, subtract this row from those above it to give the identity matrix\n                    // on the left hand side\n                    j = i;\n                    while (j--) {\n                        els = [];\n                        for (p = 0; p < np; p++) {\n                            els.push(M.elements[j][p] - M.elements[i][p] * M.elements[j][i]);\n                        }\n                        M.elements[j] = els;\n                    }\n                }\n                return sylvester_matrix.create(inverse_elements);\n            },\n            round: function () {\n                return this.map(function (x) {\n                    return Math.round(x);\n                });\n            },\n            snapTo: function (x) {\n                return this.map(function (p) {\n                    return Math.abs(p - x) <= sylvester_matrix.precision ? x : p;\n                });\n            },\n            setElements: function (els) {\n                var i, j, elements = els.elements || els;\n                if (elements[0] && typeof elements[0][0] !== 'undefined') {\n                    i = elements.length;\n                    this.elements = [];\n                    while (i--) {\n                        j = elements[i].length;\n                        this.elements[i] = [];\n                        while (j--) {\n                            this.elements[i][j] = elements[i][j];\n                        }\n                    }\n                    return this;\n                }\n                var n = elements.length;\n                this.elements = [];\n                for (i = 0; i < n; i++) {\n                    this.elements.push([elements[i]]);\n                }\n                return this;\n            }\n        };\n        matrix.sylvester_matrix = sylvester_matrix;\n    };\n    init(matrix);\n    function inverse(els) {\n        var M = matrix.sylvester_matrix.create(els);\n        return M.inverse().elements;\n    }\n    return { inverse: inverse };\n});"]}