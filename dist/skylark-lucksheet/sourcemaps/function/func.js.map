{"version":3,"sources":["function/func.js"],"names":["define","func_methods","formula","tooltip","m_validate","m_getdata","m_format","m_matrix_methods","m_get","m_util","Store","numeral","isRealNum","valueIsError","error","getdatabyselectionD","genarate","inverse","getSheetIndex","getluckysheetfile","getRangetxt","getObjType","ABCatNum","luckysheet_calcADPMM","fp","sp","tp","value","add","subtract","Function","parseFloat","divide","multiply","luckysheet_getcelldata","txt","window","luckysheet_getcelldata_cache","luckysheetfile","val","split","sheettxt","rangetxt","sheetIndex","sheetdata","length","replace","substr","substring","i","name","index","data","calculateSheetIndex","indexOf","row","parseInt","col","isNaN","ret","column","execFunctionGlobalData","ef","retAll","sheetName","startCell","rowl","coll","info","r","c","luckysheet_compareWith","arguments","data_fp","getCellDataDyadicArr","data_tp","isDyadicArr","v","d","booleanOperation","a","operator","b","booleanToNum","toString","toLowerCase","result","m","rowArr","n","push","rowlen","collen","p","na","tp_inverse","Math","pow","luckysheet_getarraydata","arr","luckysheet_parseData","Array","isArray","undefined","isCompareOperator","flag","luckysheet_getValue","args","luckysheet_indirect_check","cellTxt","luckysheet_indirect_check_return","luckysheet_offset_check","reference","rows","getFirstValue","cols","height","width","cellrange","getcellrange","cellRow0","cellCol0","cellRow1","cellCol1","flowdata","luckysheet_getSpecialReference","isCellFirst","param1","param2","functionRange","rangeTxt","rangeT","rangetxtArr"],"mappings":"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","file":"../../function/func.js","sourcesContent":["define([\n    '../global/func_methods',\n    '../global/formula',\n    '../global/tooltip',\n    '../global/validate',\n    '../global/getdata',\n    '../global/format',\n    '../function/matrix_methods',\n    '../methods/get',\n    '../utils/util',\n    '../store',\n    '../vendors/numeral'\n], function (func_methods, formula, tooltip, m_validate, m_getdata, m_format, m_matrix_methods, m_get, m_util, Store, numeral) {\n    'use strict';\n    const {isRealNum, valueIsError, error} = m_validate;\n    const {getdatabyselectionD} = m_getdata;\n    const {genarate} = m_format;\n    const {inverse} = m_matrix_methods;\n    const {getSheetIndex, getluckysheetfile, getRangetxt} = m_get;\n    const {getObjType, ABCatNum} = m_util;\n    //函数功能：比较或运算\n    function luckysheet_compareWith() {\n        //第一个参数和第三个参数，返回比较结果的布尔值或者运算值\n        //formula.operatorjson; 存储运算符和比较符\n        let sp = arguments[1];    //操作符\n                                  //参数一\n        //操作符\n        //参数一\n        let data_fp = arguments[0];\n        let fp;\n        if (getObjType(data_fp) == 'object' && data_fp.startCell != null) {\n            //参数是选区\n            if (sp == '&') {\n                fp = func_methods.getCellDataDyadicArr(data_fp, 'text');\n            } else {\n                fp = func_methods.getCellDataDyadicArr(data_fp, 'number');\n            }\n            if (fp.length == 1 && fp[0].length == 1) {\n                fp = fp[0][0];\n            }\n        } else {\n            fp = data_fp;\n        }    //参数二\n        //参数二\n        let data_tp = arguments[2];\n        let tp;\n        if (getObjType(data_tp) == 'object' && data_tp.startCell != null) {\n            //参数是选区\n            if (sp == '&') {\n                tp = func_methods.getCellDataDyadicArr(data_tp, 'text');\n            } else {\n                tp = func_methods.getCellDataDyadicArr(data_tp, 'number');\n            }\n            if (tp.length == 1 && tp[0].length == 1) {\n                tp = tp[0][0];\n            }\n        } else {\n            tp = data_tp;\n        }\n        if (valueIsError(fp)) {\n            return fp;\n        }\n        if (valueIsError(tp)) {\n            return tp;\n        }    //参数是不规则二维数组 时 return #VALUE! 错误\n        //参数是不规则二维数组 时 return #VALUE! 错误\n        if (getObjType(fp) == 'array' && getObjType(fp[0]) == 'array' && !func_methods.isDyadicArr(fp)) {\n            return error.v;\n        }\n        if (getObjType(tp) == 'array' && getObjType(tp[0]) == 'array' && !func_methods.isDyadicArr(tp)) {\n            return error.v;\n        }\n        if (sp == '<>') {\n            sp = '!=';\n        }\n        if (sp == '=') {\n            sp = '==';\n        }\n        if (fp == null && tp == null) {\n            return '#INVERSE!';\n        } else if (fp == '#INVERSE!') {\n            fp = 0;\n            if (sp == '-') {\n                sp = '+';\n            } else if (sp == '+') {\n                sp = '-';\n            }\n        } else if (sp == '-' && fp == null) {\n            fp = 0;\n        } else if (sp == '/' && (tp == 0 || tp == null)) {\n            return error.d;\n        }    //计算result\n        //计算result\n        function booleanOperation(a, operator, b) {\n            if (isRealNum(a)) {\n                a = parseFloat(a);\n            }\n            if (isRealNum(b)) {\n                b = parseFloat(b);\n            }\n            if (operator == '==') {\n                if (a == b) {\n                    return true;\n                } else {\n                    return false;\n                }\n            } else if (operator == '!=') {\n                if (a != b) {\n                    return true;\n                } else {\n                    return false;\n                }\n            } else if (operator == '>=') {\n                if (a >= b) {\n                    return true;\n                } else {\n                    return false;\n                }\n            } else if (operator == '<=') {\n                if (a <= b) {\n                    return true;\n                } else {\n                    return false;\n                }\n            } else if (operator == '>') {\n                if (a > b) {\n                    return true;\n                } else {\n                    return false;\n                }\n            } else if (operator == '<') {\n                if (a < b) {\n                    return true;\n                } else {\n                    return false;\n                }\n            }\n        }    //布尔值对应数字（true = 1, false = 1）\n        //布尔值对应数字（true = 1, false = 1）\n        function booleanToNum(v) {\n            if (v == null) {\n                return v;\n            }\n            if (v.toString().toLowerCase() == 'true') {\n                return 1;\n            }\n            if (v.toString().toLowerCase() == 'false') {\n                return 0;\n            }\n            return v;\n        }\n        if (sp == '*') {\n            //乘\n            if (getObjType(fp) == 'array' && getObjType(tp) == 'array') {\n                let result = [];\n                if (getObjType(fp[0]) == 'array' && getObjType(tp[0]) == 'array') {\n                    //二维数组相乘（m*n 与 m*n 等于 m*n；m*p 与 p*n 等于 m*n；其它错误） \n                    if (fp.length == tp.length && fp[0].length == tp[0].length) {\n                        for (let m = 0; m < fp.length; m++) {\n                            let rowArr = [];\n                            for (let n = 0; n < fp[m].length; n++) {\n                                fp[m][n] = booleanToNum(fp[m][n]);\n                                tp[m][n] = booleanToNum(tp[m][n]);\n                                let value;\n                                if (isRealNum(fp[m][n]) && isRealNum(tp[m][n])) {\n                                    value = luckysheet_calcADPMM(fp[m][n], sp, tp[m][n]);    //parseFloat(fp[m][n]) * parseFloat(tp[m][n]);\n                                } else\n                                    //parseFloat(fp[m][n]) * parseFloat(tp[m][n]);\n                                    {\n                                        value = error.v;\n                                    }\n                                rowArr.push(value);\n                            }\n                            result.push(rowArr);\n                        }\n                    } else if (fp[0].length == tp.length) {\n                        let rowlen = fp.length;\n                        let collen = tp[0].length;\n                        for (let m = 0; m < rowlen; m++) {\n                            let rowArr = [];\n                            for (let n = 0; n < collen; n++) {\n                                let value = 0;\n                                for (let p = 0; p < fp[0].length; p++) {\n                                    fp[m][p] = booleanToNum(fp[m][p]);\n                                    tp[p][n] = booleanToNum(tp[p][n]);\n                                    if (isRealNum(fp[m][p]) && isRealNum(tp[p][n])) {\n                                        value += luckysheet_calcADPMM(fp[m][p], sp, tp[p][n]);    //parseFloat(fp[m][p]) * parseFloat(tp[p][n]);\n                                    } else\n                                        //parseFloat(fp[m][p]) * parseFloat(tp[p][n]);\n                                        {\n                                            value += error.v;\n                                        }\n                                }\n                                if (value.toString() == 'NaN') {\n                                    value = error.v;\n                                }\n                                rowArr.push(value);\n                            }\n                            result.push(rowArr);\n                        }\n                    } else if (fp.length == tp[0].length) {\n                        let rowlen = tp.length;\n                        let collen = fp[0].length;\n                        for (let m = 0; m < rowlen; m++) {\n                            let rowArr = [];\n                            for (let n = 0; n < collen; n++) {\n                                let value = 0;\n                                for (let p = 0; p < tp[0].length; p++) {\n                                    fp[p][n] = booleanToNum(fp[p][n]);\n                                    tp[m][p] = booleanToNum(tp[m][p]);\n                                    if (isRealNum(tp[m][p]) && isRealNum(fp[p][n])) {\n                                        value += luckysheet_calcADPMM(fp[p][n], sp, tp[m][p]);    //parseFloat(tp[m][p]) * parseFloat(fp[p][n]);\n                                    } else\n                                        //parseFloat(tp[m][p]) * parseFloat(fp[p][n]);\n                                        {\n                                            value += error.v;\n                                        }\n                                }\n                                if (value.toString() == 'NaN') {\n                                    value = error.v;\n                                }\n                                rowArr.push(value);\n                            }\n                            result.push(rowArr);\n                        }\n                    } else {\n                        return error.na;\n                    }\n                } else if (getObjType(fp[0]) == 'array') {\n                    //二维数组与一维数组相乘（m*n 与 n 等于 m*n；m*1 与 n 等于 m*n；其它错误）\n                    if (fp[0].length == tp.length) {\n                        for (let m = 0; m < fp.length; m++) {\n                            let rowArr = [];\n                            for (let n = 0; n < fp[m].length; n++) {\n                                fp[m][n] = booleanToNum(fp[m][n]);\n                                tp[n] = booleanToNum(tp[n]);\n                                let value;\n                                if (isRealNum(fp[m][n]) && isRealNum(tp[n])) {\n                                    value = luckysheet_calcADPMM(fp[m][n], sp, tp[n]);    //parseFloat(fp[m][n]) * parseFloat(tp[n]);\n                                } else\n                                    //parseFloat(fp[m][n]) * parseFloat(tp[n]);\n                                    {\n                                        value = error.v;\n                                    }\n                                rowArr.push(value);\n                            }\n                            result.push(rowArr);\n                        }\n                    } else if (fp[0].length == 1) {\n                        let rowlen = fp.length;\n                        let collen = tp.length;\n                        for (let m = 0; m < rowlen; m++) {\n                            let rowArr = [];\n                            for (let n = 0; n < collen; n++) {\n                                fp[m][0] = booleanToNum(fp[m][0]);\n                                tp[n] = booleanToNum(tp[n]);\n                                let value;\n                                if (isRealNum(fp[m][0]) && isRealNum(tp[n])) {\n                                    value = luckysheet_calcADPMM(fp[m][0], sp, tp[n]);    // parseFloat(fp[m][0]) * parseFloat(tp[n]);\n                                } else\n                                    // parseFloat(fp[m][0]) * parseFloat(tp[n]);\n                                    {\n                                        value = error.v;\n                                    }\n                                rowArr.push(value);\n                            }\n                            result.push(rowArr);\n                        }\n                    } else {\n                        return error.na;\n                    }\n                } else if (getObjType(tp[0]) == 'array') {\n                    //二维数组与一维数组相乘（m*n 与 n 等于 m*n；m*1 与 n 等于 m*n；其它错误）\n                    if (tp[0].length == fp.length) {\n                        for (let m = 0; m < tp.length; m++) {\n                            let rowArr = [];\n                            for (let n = 0; n < tp[m].length; n++) {\n                                fp[n] = booleanToNum(fp[n]);\n                                tp[m][n] = booleanToNum(tp[m][n]);\n                                let value;\n                                if (isRealNum(fp[n]) && isRealNum(tp[m][n])) {\n                                    value = luckysheet_calcADPMM(fp[n], sp, tp[m][n]);    // parseFloat(fp[n]) * parseFloat(tp[m][n]);\n                                } else\n                                    // parseFloat(fp[n]) * parseFloat(tp[m][n]);\n                                    {\n                                        value = error.v;\n                                    }\n                                rowArr.push(value);\n                            }\n                            result.push(rowArr);\n                        }\n                    } else if (tp[0].length == 1) {\n                        let rowlen = tp.length;\n                        let collen = fp.length;\n                        for (let m = 0; m < rowlen; m++) {\n                            let rowArr = [];\n                            for (let n = 0; n < collen; n++) {\n                                fp[n] = booleanToNum(fp[n]);\n                                tp[m][0] = booleanToNum(tp[m][0]);\n                                let value;\n                                if (isRealNum(fp[n]) && isRealNum(tp[m][0])) {\n                                    value = luckysheet_calcADPMM(fp[n], sp, tp[m][0]);    //parseFloat(fp[n]) * parseFloat(tp[m][0]);\n                                } else\n                                    //parseFloat(fp[n]) * parseFloat(tp[m][0]);\n                                    {\n                                        value = error.v;\n                                    }\n                                rowArr.push(value);\n                            }\n                            result.push(rowArr);\n                        }\n                    } else {\n                        return error.na;\n                    }\n                } else {\n                    //一维数组与一维数组相乘时，数组大小不一样是错误\n                    if (fp.length != tp.length) {\n                        return error.na;\n                    }\n                    for (let n = 0; n < fp.length; n++) {\n                        fp[n] = booleanToNum(fp[n]);\n                        tp[n] = booleanToNum(tp[n]);\n                        let value;\n                        if (isRealNum(fp[n]) && isRealNum(tp[n])) {\n                            value = luckysheet_calcADPMM(fp[n], sp, tp[n]);    // parseFloat(fp[n]) * parseFloat(tp[n]);\n                        } else\n                            // parseFloat(fp[n]) * parseFloat(tp[n]);\n                            {\n                                value = error.v;\n                            }\n                        result.push(value);\n                    }\n                }\n                return result;\n            } else if (getObjType(fp) == 'array') {\n                tp = booleanToNum(tp);\n                let result = [];\n                if (getObjType(fp[0]) == 'array') {\n                    for (let m = 0; m < fp.length; m++) {\n                        let rowArr = [];\n                        for (let n = 0; n < fp[m].length; n++) {\n                            fp[m][n] = booleanToNum(fp[m][n]);\n                            let value;\n                            if (isRealNum(fp[m][n]) && isRealNum(tp)) {\n                                value = luckysheet_calcADPMM(fp[m][n], sp, tp);    // parseFloat(fp[m][n]) * parseFloat(tp);\n                            } else\n                                // parseFloat(fp[m][n]) * parseFloat(tp);\n                                {\n                                    value = error.v;\n                                }\n                            rowArr.push(value);\n                        }\n                        result.push(rowArr);\n                    }\n                } else {\n                    for (let n = 0; n < fp.length; n++) {\n                        fp[n] = booleanToNum(fp[n]);\n                        let value;\n                        if (isRealNum(fp[n]) && isRealNum(tp)) {\n                            value = luckysheet_calcADPMM(fp[n], sp, tp);    // parseFloat(fp[n]) * parseFloat(tp);\n                        } else\n                            // parseFloat(fp[n]) * parseFloat(tp);\n                            {\n                                value = error.v;\n                            }\n                        result.push(value);\n                    }\n                }\n                return result;\n            } else if (getObjType(tp) == 'array') {\n                fp = booleanToNum(fp);\n                let result = [];\n                if (getObjType(tp[0]) == 'array') {\n                    for (let m = 0; m < tp.length; m++) {\n                        let rowArr = [];\n                        for (let n = 0; n < tp[m].length; n++) {\n                            tp[m][n] = booleanToNum(tp[m][n]);\n                            let value;\n                            if (isRealNum(fp) && isRealNum(tp[m][n])) {\n                                value = luckysheet_calcADPMM(fp, sp, tp[m][n]);    // parseFloat(fp) * parseFloat(tp[m][n]);\n                            } else\n                                // parseFloat(fp) * parseFloat(tp[m][n]);\n                                {\n                                    value = error.v;\n                                }\n                            rowArr.push(value);\n                        }\n                        result.push(rowArr);\n                    }\n                } else {\n                    for (let n = 0; n < tp.length; n++) {\n                        tp[n] = booleanToNum(tp[n]);\n                        let value;\n                        if (isRealNum(fp) && isRealNum(tp[n])) {\n                            value = luckysheet_calcADPMM(fp, sp, tp[n]);    //parseFloat(fp) * parseFloat(tp[n]);\n                        } else\n                            //parseFloat(fp) * parseFloat(tp[n]);\n                            {\n                                value = error.v;\n                            }\n                        result.push(value);\n                    }\n                }\n                return result;\n            } else {\n                fp = booleanToNum(fp);\n                tp = booleanToNum(tp);\n                let result;\n                if (isRealNum(fp) && isRealNum(tp)) {\n                    result = luckysheet_calcADPMM(fp, sp, tp);    //parseFloat(fp) * parseFloat(tp);\n                } else\n                    //parseFloat(fp) * parseFloat(tp);\n                    {\n                        result = error.v;\n                    }\n                return result;\n            }\n        } else if (sp == '/') {\n            //除\n            if (getObjType(fp) == 'array' && getObjType(tp) == 'array') {\n                let result = [];\n                if (getObjType(fp[0]) == 'array' && getObjType(tp[0]) == 'array') {\n                    //二维数组相除（m*n 与 m*n 等于 m*n；m*p 与 p*n 等于 m*n；其它错误） \n                    if (fp.length == tp.length && fp[0].length == tp[0].length) {\n                        for (let m = 0; m < fp.length; m++) {\n                            let rowArr = [];\n                            for (let n = 0; n < fp[m].length; n++) {\n                                fp[m][n] = booleanToNum(fp[m][n]);\n                                tp[m][n] = booleanToNum(tp[m][n]);\n                                let value;\n                                if (isRealNum(fp[m][n]) && isRealNum(tp[m][n])) {\n                                    if (parseFloat(tp[m][n]) == 0) {\n                                        value = error.d;\n                                    } else {\n                                        value = luckysheet_calcADPMM(fp[m][n], sp, tp[m][n]);    // parseFloat(fp[m][n]) / parseFloat(tp[m][n]);    \n                                    }\n                                } else\n                                    // parseFloat(fp[m][n]) / parseFloat(tp[m][n]);    \n                                    {\n                                        value = error.v;\n                                    }\n                                rowArr.push(value);\n                            }\n                            result.push(rowArr);\n                        }\n                    } else if (fp[0].length == tp.length) {\n                        let tp_inverse = inverse(tp);\n                        let rowlen = fp.length;\n                        let collen = tp_inverse[0].length;\n                        for (let m = 0; m < rowlen; m++) {\n                            let rowArr = [];\n                            for (let n = 0; n < collen; n++) {\n                                let value = 0;\n                                for (let p = 0; p < fp[0].length; p++) {\n                                    fp[m][p] = booleanToNum(fp[m][p]);\n                                    tp_inverse[p][n] = booleanToNum(tp_inverse[p][n]);\n                                    if (isRealNum(fp[m][p]) && isRealNum(tp_inverse[p][n])) {\n                                        value += luckysheet_calcADPMM(fp[m][p], '*', tp_inverse[p][n]);    // parseFloat(fp[m][p]) * parseFloat(tp_inverse[p][n]);\n                                    } else\n                                        // parseFloat(fp[m][p]) * parseFloat(tp_inverse[p][n]);\n                                        {\n                                            value += error.v;\n                                        }\n                                }\n                                if (value.toString() == 'NaN') {\n                                    value = error.v;\n                                }\n                                rowArr.push(value);\n                            }\n                            result.push(rowArr);\n                        }\n                    } else {\n                        return error.na;\n                    }\n                } else if (getObjType(fp[0]) == 'array') {\n                    //二维数组与一维数组相除（m*n 与 n 等于 m*n；m*1 与 n 等于 m*n；其它错误）\n                    if (fp[0].length == tp.length) {\n                        for (let m = 0; m < fp.length; m++) {\n                            let rowArr = [];\n                            for (let n = 0; n < fp[m].length; n++) {\n                                fp[m][n] = booleanToNum(fp[m][n]);\n                                tp[n] = booleanToNum(tp[n]);\n                                let value;\n                                if (isRealNum(fp[m][n]) && isRealNum(tp[n])) {\n                                    if (parseFloat(tp[n]) == 0) {\n                                        value = error.d;\n                                    } else {\n                                        value = luckysheet_calcADPMM(fp[m][n], sp, tp[n]);    // parseFloat(fp[m][n]) / parseFloat(tp[n]);\n                                    }\n                                } else\n                                    // parseFloat(fp[m][n]) / parseFloat(tp[n]);\n                                    {\n                                        value = error.v;\n                                    }\n                                rowArr.push(value);\n                            }\n                            result.push(rowArr);\n                        }\n                    } else if (fp[0].length == 1) {\n                        let rowlen = fp.length;\n                        let collen = tp.length;\n                        for (let m = 0; m < rowlen; m++) {\n                            let rowArr = [];\n                            for (let n = 0; n < collen; n++) {\n                                fp[m][0] = booleanToNum(fp[m][0]);\n                                tp[n] = booleanToNum(tp[n]);\n                                let value;\n                                if (isRealNum(fp[m][0]) && isRealNum(tp[n])) {\n                                    if (parseFloat(tp[n]) == 0) {\n                                        value = error.d;\n                                    } else {\n                                        value = luckysheet_calcADPMM(fp[m][0], sp, tp[n]);    // parseFloat(fp[m][0]) / parseFloat(tp[n]);\n                                    }\n                                } else\n                                    // parseFloat(fp[m][0]) / parseFloat(tp[n]);\n                                    {\n                                        value = error.v;\n                                    }\n                                rowArr.push(value);\n                            }\n                            result.push(rowArr);\n                        }\n                    } else {\n                        return error.na;\n                    }\n                } else if (getObjType(tp[0]) == 'array') {\n                    //二维数组与一维数组相除（m*n 与 n 等于 m*n；m*1 与 n 等于 m*n；其它错误）\n                    if (tp[0].length == fp.length) {\n                        for (let m = 0; m < tp.length; m++) {\n                            let rowArr = [];\n                            for (let n = 0; n < tp[m].length; n++) {\n                                fp[n] = booleanToNum(fp[n]);\n                                tp[m][n] = booleanToNum(tp[m][n]);\n                                let value;\n                                if (isRealNum(fp[n]) && isRealNum(tp[m][n])) {\n                                    if (parseFloat(tp[m][n]) == 0) {\n                                        value = error.d;\n                                    } else {\n                                        value = luckysheet_calcADPMM(fp[n], sp, tp[m][n]);    //parseFloat(fp[n]) / parseFloat(tp[m][n]);\n                                    }\n                                } else\n                                    //parseFloat(fp[n]) / parseFloat(tp[m][n]);\n                                    {\n                                        value = error.v;\n                                    }\n                                rowArr.push(value);\n                            }\n                            result.push(rowArr);\n                        }\n                    } else if (tp[0].length == 1) {\n                        let rowlen = tp.length;\n                        let collen = fp.length;\n                        for (let m = 0; m < rowlen; m++) {\n                            let rowArr = [];\n                            for (let n = 0; n < collen; n++) {\n                                fp[n] = booleanToNum(fp[n]);\n                                tp[m][0] = booleanToNum(tp[m][0]);\n                                let value;\n                                if (isRealNum(fp[n]) && isRealNum(tp[m][0])) {\n                                    if (parseFloat(tp[m][0]) == 0) {\n                                        value = error.d;\n                                    } else {\n                                        value = luckysheet_calcADPMM(fp[n], sp, tp[m][0]);    //parseFloat(fp[n]) / parseFloat(tp[m][0]);\n                                    }\n                                } else\n                                    //parseFloat(fp[n]) / parseFloat(tp[m][0]);\n                                    {\n                                        value = error.v;\n                                    }\n                                rowArr.push(value);\n                            }\n                            result.push(rowArr);\n                        }\n                    } else {\n                        return error.na;\n                    }\n                } else {\n                    //一维数组与一维数组相除时，数组大小不一样是错误\n                    if (fp.length != tp.length) {\n                        return error.na;\n                    }\n                    for (let n = 0; n < fp.length; n++) {\n                        fp[n] = booleanToNum(fp[n]);\n                        tp[n] = booleanToNum(tp[n]);\n                        let value;\n                        if (isRealNum(fp[n]) && isRealNum(tp[n])) {\n                            if (parseFloat(tp[n]) == 0) {\n                                value = error.d;\n                            } else {\n                                value = luckysheet_calcADPMM(fp[n], sp, tp[n]);    //parseFloat(fp[n]) / parseFloat(tp[n]);\n                            }\n                        } else\n                            //parseFloat(fp[n]) / parseFloat(tp[n]);\n                            {\n                                value = error.v;\n                            }\n                        result.push(value);\n                    }\n                }\n                return result;\n            } else if (getObjType(fp) == 'array') {\n                tp = booleanToNum(tp);\n                let result = [];\n                if (getObjType(fp[0]) == 'array') {\n                    for (let m = 0; m < fp.length; m++) {\n                        let rowArr = [];\n                        for (let n = 0; n < fp[m].length; n++) {\n                            fp[m][n] = booleanToNum(fp[m][n]);\n                            let value;\n                            if (isRealNum(fp[m][n]) && isRealNum(tp)) {\n                                if (parseFloat(tp) == 0) {\n                                    value = error.d;\n                                } else {\n                                    value = luckysheet_calcADPMM(fp[m][n], sp, tp);    //parseFloat(fp[m][n]) / parseFloat(tp);\n                                }\n                            } else\n                                //parseFloat(fp[m][n]) / parseFloat(tp);\n                                {\n                                    value = error.v;\n                                }\n                            rowArr.push(value);\n                        }\n                        result.push(rowArr);\n                    }\n                } else {\n                    for (let n = 0; n < fp.length; n++) {\n                        fp[n] = booleanToNum(fp[n]);\n                        let value;\n                        if (isRealNum(fp[n]) && isRealNum(tp)) {\n                            if (parseFloat(tp) == 0) {\n                                value = error.d;\n                            } else {\n                                value = luckysheet_calcADPMM(fp[n], sp, tp);    //parseFloat(fp[n]) / parseFloat(tp);\n                            }\n                        } else\n                            //parseFloat(fp[n]) / parseFloat(tp);\n                            {\n                                value = error.v;\n                            }\n                        result.push(value);\n                    }\n                }\n                return result;\n            } else if (getObjType(tp) == 'array') {\n                fp = booleanToNum(fp);\n                let result = [];\n                if (getObjType(tp[0]) == 'array') {\n                    for (let m = 0; m < tp.length; m++) {\n                        let rowArr = [];\n                        for (let n = 0; n < tp[m].length; n++) {\n                            tp[m][n] = booleanToNum(tp[m][n]);\n                            let value;\n                            if (isRealNum(fp) && isRealNum(tp[m][n])) {\n                                if (parseFloat(tp[m][n]) == 0) {\n                                    value = error.d;\n                                } else {\n                                    value = luckysheet_calcADPMM(fp, sp, tp[m][n]);    //parseFloat(fp) / parseFloat(tp[m][n]);\n                                }\n                            } else\n                                //parseFloat(fp) / parseFloat(tp[m][n]);\n                                {\n                                    value = error.v;\n                                }\n                            rowArr.push(value);\n                        }\n                        result.push(rowArr);\n                    }\n                } else {\n                    for (let n = 0; n < tp.length; n++) {\n                        tp[n] = booleanToNum(tp[n]);\n                        let value;\n                        if (isRealNum(fp) && isRealNum(tp[n])) {\n                            if (parseFloat(tp[n]) == 0) {\n                                value = error.d;\n                            } else {\n                                value = luckysheet_calcADPMM(fp, sp, tp[n]);    //parseFloat(fp) / parseFloat(tp[n]);\n                            }\n                        } else\n                            //parseFloat(fp) / parseFloat(tp[n]);\n                            {\n                                value = error.v;\n                            }\n                        result.push(value);\n                    }\n                }\n                return result;\n            } else {\n                fp = booleanToNum(fp);\n                tp = booleanToNum(tp);\n                let result;\n                if (isRealNum(fp) && isRealNum(tp)) {\n                    if (parseFloat(tp) == 0) {\n                        result = error.d;\n                    } else {\n                        result = luckysheet_calcADPMM(fp, sp, tp);    //parseFloat(fp) / parseFloat(tp);\n                    }\n                } else\n                    //parseFloat(fp) / parseFloat(tp);\n                    {\n                        result = error.v;\n                    }\n                return result;\n            }\n        } else if (sp == '+' || sp == '-' || sp == '%') {\n            //加 减 取余\n            if (getObjType(fp) == 'array' && getObjType(tp) == 'array') {\n                let result = [];\n                if (getObjType(fp[0]) == 'array' && getObjType(tp[0]) == 'array') {\n                    if (fp.length != tp.length && fp[0].length != tp[0].length) {\n                        return error.na;\n                    }\n                    for (let m = 0; m < fp.length; m++) {\n                        let rowArr = [];\n                        for (let n = 0; n < fp[m].length; n++) {\n                            fp[m][n] = booleanToNum(fp[m][n]);\n                            tp[m][n] = booleanToNum(tp[m][n]);\n                            let value;\n                            if (isRealNum(fp[m][n]) && isRealNum(tp[m][n])) {\n                                if (sp == '%' && parseFloat(tp[m][n]) == 0) {\n                                    value = error.d;\n                                } else {\n                                    value = luckysheet_calcADPMM(fp[m][n], sp, tp[m][n]);    // eval(parseFloat(fp[m][n]) + sp + parseFloat(tp[m][n]));    \n                                }\n                            } else\n                                // eval(parseFloat(fp[m][n]) + sp + parseFloat(tp[m][n]));    \n                                {\n                                    value = error.v;\n                                }\n                            rowArr.push(value);\n                        }\n                        result.push(rowArr);\n                    }\n                } else if (getObjType(fp[0]) == 'array') {\n                    if (fp[0].length != tp.length) {\n                        return error.na;\n                    }\n                    for (let m = 0; m < fp.length; m++) {\n                        let rowArr = [];\n                        for (let n = 0; n < fp[m].length; n++) {\n                            fp[m][n] = booleanToNum(fp[m][n]);\n                            tp[n] = booleanToNum(tp[n]);\n                            let value;\n                            if (isRealNum(fp[m][n]) && isRealNum(tp[n])) {\n                                if (sp == '%' && parseFloat(tp[n]) == 0) {\n                                    value = error.d;\n                                } else {\n                                    value = luckysheet_calcADPMM(fp[m][n], sp, tp[n]);    //eval(parseFloat(fp[m][n]) + sp + parseFloat(tp[n]));    \n                                }\n                            } else\n                                //eval(parseFloat(fp[m][n]) + sp + parseFloat(tp[n]));    \n                                {\n                                    value = error.v;\n                                }\n                            rowArr.push(value);\n                        }\n                        result.push(rowArr);\n                    }\n                } else if (getObjType(tp[0]) == 'array') {\n                    if (tp[0].length != fp.length) {\n                        return error.na;\n                    }\n                    for (let m = 0; m < tp.length; m++) {\n                        let rowArr = [];\n                        for (let n = 0; n < tp[m].length; n++) {\n                            fp[n] = booleanToNum(fp[n]);\n                            tp[m][n] = booleanToNum(tp[m][n]);\n                            let value;\n                            if (isRealNum(fp[n]) && isRealNum(tp[m][n])) {\n                                if (sp == '%' && parseFloat(tp[m][n]) == 0) {\n                                    value = error.d;\n                                } else {\n                                    value = luckysheet_calcADPMM(fp[n], sp, tp[m][n]);    //eval(parseFloat(fp[n]) + sp + parseFloat(tp[m][n]));    \n                                }\n                            } else\n                                //eval(parseFloat(fp[n]) + sp + parseFloat(tp[m][n]));    \n                                {\n                                    value = error.v;\n                                }\n                            rowArr.push(value);\n                        }\n                        result.push(rowArr);\n                    }\n                } else {\n                    if (fp.length != tp.length) {\n                        return error.na;\n                    }\n                    for (let n = 0; n < fp.length; n++) {\n                        fp[n] = booleanToNum(fp[n]);\n                        tp[n] = booleanToNum(tp[n]);\n                        let value;\n                        if (isRealNum(fp[n]) && isRealNum(tp[n])) {\n                            if (sp == '%' && parseFloat(tp[n]) == 0) {\n                                value = error.d;\n                            } else {\n                                value = luckysheet_calcADPMM(fp[n], sp, tp[n]);    //eval(parseFloat(fp[n]) + sp + \"(\" + parseFloat(tp[n]) + \")\" );    \n                            }\n                        } else\n                            //eval(parseFloat(fp[n]) + sp + \"(\" + parseFloat(tp[n]) + \")\" );    \n                            {\n                                value = error.v;\n                            }\n                        result.push(value);\n                    }\n                }\n                return result;\n            } else if (getObjType(fp) == 'array') {\n                tp = booleanToNum(tp);\n                let result = [];\n                if (getObjType(fp[0]) == 'array') {\n                    for (let m = 0; m < fp.length; m++) {\n                        let rowArr = [];\n                        for (let n = 0; n < fp[m].length; n++) {\n                            fp[m][n] = booleanToNum(fp[m][n]);\n                            let value;\n                            if (isRealNum(fp[m][n]) && isRealNum(tp)) {\n                                if (sp == '%' && parseFloat(tp) == 0) {\n                                    value = error.d;\n                                } else {\n                                    value = luckysheet_calcADPMM(fp[m][n], sp, tp);    //eval(parseFloat(fp[m][n]) + sp + parseFloat(tp));    \n                                }\n                            } else\n                                //eval(parseFloat(fp[m][n]) + sp + parseFloat(tp));    \n                                {\n                                    value = error.v;\n                                }\n                            rowArr.push(value);\n                        }\n                        result.push(rowArr);\n                    }\n                } else {\n                    for (let n = 0; n < fp.length; n++) {\n                        fp[n] = booleanToNum(fp[n]);\n                        let value;\n                        if (isRealNum(fp[n]) && isRealNum(tp)) {\n                            if (sp == '%' && parseFloat(tp) == 0) {\n                                value = error.d;\n                            } else {\n                                value = luckysheet_calcADPMM(fp[n], sp, tp);    //eval(parseFloat(fp[n]) + sp + parseFloat(tp));    \n                            }\n                        } else\n                            //eval(parseFloat(fp[n]) + sp + parseFloat(tp));    \n                            {\n                                value = error.v;\n                            }\n                        result.push(value);\n                    }\n                }\n                return result;\n            } else if (getObjType(tp) == 'array') {\n                fp = booleanToNum(fp);\n                let result = [];\n                if (getObjType(tp[0]) == 'array') {\n                    for (let m = 0; m < tp.length; m++) {\n                        let rowArr = [];\n                        for (let n = 0; n < tp[m].length; n++) {\n                            tp[m][n] = booleanToNum(tp[m][n]);\n                            let value;\n                            if (isRealNum(fp) && isRealNum(tp[m][n])) {\n                                if (sp == '%' && parseFloat(tp[m][n]) == 0) {\n                                    value = error.d;\n                                } else {\n                                    value = luckysheet_calcADPMM(fp, sp, tp[m][n]);    //eval(parseFloat(fp) + sp + parseFloat(tp[m][n]));    \n                                }\n                            } else\n                                //eval(parseFloat(fp) + sp + parseFloat(tp[m][n]));    \n                                {\n                                    value = error.v;\n                                }\n                            rowArr.push(value);\n                        }\n                        result.push(rowArr);\n                    }\n                } else {\n                    for (let n = 0; n < tp.length; n++) {\n                        tp[n] = booleanToNum(tp[n]);\n                        let value;\n                        if (isRealNum(fp) && isRealNum(tp[n])) {\n                            if (sp == '%' && parseFloat(tp[n]) == 0) {\n                                value = error.d;\n                            } else {\n                                value = luckysheet_calcADPMM(fp, sp, tp[n]);    //eval(parseFloat(fp) + sp + parseFloat(tp[n]));    \n                            }\n                        } else\n                            //eval(parseFloat(fp) + sp + parseFloat(tp[n]));    \n                            {\n                                value = error.v;\n                            }\n                        result.push(value);\n                    }\n                }\n                return result;\n            } else {\n                fp = booleanToNum(fp);\n                tp = booleanToNum(tp);\n                let result;\n                if (isRealNum(fp) && isRealNum(tp)) {\n                    if (sp == '%' && parseFloat(tp) == 0) {\n                        result = error.d;\n                    } else {\n                        result = luckysheet_calcADPMM(fp, sp, tp);    //eval(parseFloat(fp) + sp + \"(\" + parseFloat(tp) + \")\");    \n                    }\n                } else\n                    //eval(parseFloat(fp) + sp + \"(\" + parseFloat(tp) + \")\");    \n                    {\n                        result = error.v;\n                    }\n                return result;\n            }\n        } else if (sp == '==' || sp == '!=' || sp == '>=' || sp == '<=' || sp == '>' || sp == '<') {\n            //比较运算符\n            if (getObjType(fp) == 'array' && getObjType(tp) == 'array') {\n                let result = [];\n                if (getObjType(fp[0]) == 'array' && getObjType(tp[0]) == 'array') {\n                    if (fp.length != tp.length && fp[0].length != tp[0].length) {\n                        return error.na;\n                    }\n                    for (let m = 0; m < fp.length; m++) {\n                        let rowArr = [];\n                        for (let n = 0; n < fp[m].length; n++) {\n                            let value = booleanOperation(fp[m][n], sp, tp[m][n]);\n                            rowArr.push(value);\n                        }\n                        result.push(rowArr);\n                    }\n                } else if (getObjType(fp[0]) == 'array') {\n                    if (fp[0].length != tp.length) {\n                        return error.na;\n                    }\n                    for (let m = 0; m < fp.length; m++) {\n                        let rowArr = [];\n                        for (let n = 0; n < fp[m].length; n++) {\n                            let value = booleanOperation(fp[m][n], sp, tp[n]);\n                            rowArr.push(value);\n                        }\n                        result.push(rowArr);\n                    }\n                } else if (getObjType(tp[0]) == 'array') {\n                    if (tp[0].length != fp.length) {\n                        return error.na;\n                    }\n                    for (let m = 0; m < tp.length; m++) {\n                        let rowArr = [];\n                        for (let n = 0; n < tp[m].length; n++) {\n                            let value = booleanOperation(fp[n], sp, tp[m][n]);\n                            rowArr.push(value);\n                        }\n                        result.push(rowArr);\n                    }\n                } else {\n                    if (fp.length != tp.length) {\n                        return error.na;\n                    }\n                    for (let n = 0; n < fp.length; n++) {\n                        let value = booleanOperation(fp[n], sp, tp[n]);\n                        result.push(value);\n                    }\n                }\n                return result;\n            } else if (getObjType(fp) == 'array') {\n                let result = [];\n                if (getObjType(fp[0]) == 'array') {\n                    for (let m = 0; m < fp.length; m++) {\n                        let rowArr = [];\n                        for (let n = 0; n < fp[m].length; n++) {\n                            let value = booleanOperation(fp[m][n], sp, tp);\n                            rowArr.push(value);\n                        }\n                        result.push(rowArr);\n                    }\n                } else {\n                    for (let n = 0; n < fp.length; n++) {\n                        let value = booleanOperation(fp[n], sp, tp);\n                        result.push(value);\n                    }\n                }\n                return result;\n            } else if (getObjType(tp) == 'array') {\n                let result = [];\n                if (getObjType(tp[0]) == 'array') {\n                    for (let m = 0; m < tp.length; m++) {\n                        let rowArr = [];\n                        for (let n = 0; n < tp[m].length; n++) {\n                            let value = booleanOperation(fp, sp, tp[m][n]);\n                            rowArr.push(value);\n                        }\n                        result.push(rowArr);\n                    }\n                } else {\n                    for (let n = 0; n < tp.length; n++) {\n                        let value = booleanOperation(fp, sp, tp[n]);\n                        result.push(value);\n                    }\n                }\n                return result;\n            } else {\n                return booleanOperation(fp, sp, tp);\n            }\n        } else if (sp == '&') {\n            //连接符\n            if (getObjType(fp) == 'array' && getObjType(tp) == 'array') {\n                let result = [];\n                if (getObjType(fp[0]) == 'array' && getObjType(tp[0]) == 'array') {\n                    if (fp.length != tp.length && fp[0].length != tp[0].length) {\n                        return error.na;\n                    }\n                    for (let m = 0; m < fp.length; m++) {\n                        let rowArr = [];\n                        for (let n = 0; n < fp[m].length; n++) {\n                            rowArr.push(fp[m][n] + '' + tp[m][n]);\n                        }\n                        result.push(rowArr);\n                    }\n                } else if (getObjType(fp[0]) == 'array') {\n                    if (fp[0].length != tp.length) {\n                        return error.na;\n                    }\n                    for (let m = 0; m < fp.length; m++) {\n                        let rowArr = [];\n                        for (let n = 0; n < fp[m].length; n++) {\n                            rowArr.push(fp[m][n] + '' + tp[n]);\n                        }\n                        result.push(rowArr);\n                    }\n                } else if (getObjType(tp[0]) == 'array') {\n                    if (tp[0].length != fp.length) {\n                        return error.na;\n                    }\n                    for (let m = 0; m < tp.length; m++) {\n                        let rowArr = [];\n                        for (let n = 0; n < tp[m].length; n++) {\n                            rowArr.push(fp[n] + '' + tp[m][n]);\n                        }\n                        result.push(rowArr);\n                    }\n                } else {\n                    if (fp.length != tp.length) {\n                        return error.na;\n                    }\n                    for (let n = 0; n < fp.length; n++) {\n                        result.push(fp[n] + '' + tp[n]);\n                    }\n                }\n                return result;\n            } else if (getObjType(fp) == 'array') {\n                let result = [];\n                if (getObjType(fp[0]) == 'array') {\n                    for (let m = 0; m < fp.length; m++) {\n                        let rowArr = [];\n                        for (let n = 0; n < fp[m].length; n++) {\n                            rowArr.push(fp[m][n] + '' + tp);\n                        }\n                        result.push(rowArr);\n                    }\n                } else {\n                    for (let n = 0; n < fp.length; n++) {\n                        result.push(fp[n] + '' + tp);\n                    }\n                }\n                return result;\n            } else if (getObjType(tp) == 'array') {\n                let result = [];\n                if (getObjType(tp[0]) == 'array') {\n                    for (let m = 0; m < tp.length; m++) {\n                        let rowArr = [];\n                        for (let n = 0; n < tp[m].length; n++) {\n                            rowArr.push(fp + '' + tp[m][n]);\n                        }\n                        result.push(rowArr);\n                    }\n                } else {\n                    for (let n = 0; n < tp.length; n++) {\n                        result.push(fp + '' + tp[n]);\n                    }\n                }\n                return result;\n            } else {\n                return fp + '' + tp;\n            }\n        } else if (sp == '^') {\n            //幂\n            if (getObjType(fp) == 'array' && getObjType(tp) == 'array') {\n                let result = [];\n                if (getObjType(fp[0]) == 'array' && getObjType(tp[0]) == 'array') {\n                    if (fp.length != tp.length && fp[0].length != tp[0].length) {\n                        return error.na;\n                    }\n                    for (let m = 0; m < fp.length; m++) {\n                        let rowArr = [];\n                        for (let n = 0; n < fp[m].length; n++) {\n                            fp[m][n] = booleanToNum(fp[m][n]);\n                            tp[m][n] = booleanToNum(tp[m][n]);\n                            let value;\n                            if (isRealNum(fp[m][n]) && isRealNum(tp[m][n])) {\n                                value = Math.pow(parseFloat(fp[m][n]), parseFloat(tp[m][n]));\n                            } else {\n                                value = error.v;\n                            }\n                            rowArr.push(value);\n                        }\n                        result.push(rowArr);\n                    }\n                } else if (getObjType(fp[0]) == 'array') {\n                    if (fp[0].length != tp.length) {\n                        return error.na;\n                    }\n                    for (let m = 0; m < fp.length; m++) {\n                        let rowArr = [];\n                        for (let n = 0; n < fp[m].length; n++) {\n                            fp[m][n] = booleanToNum(fp[m][n]);\n                            tp[n] = booleanToNum(tp[n]);\n                            let value;\n                            if (isRealNum(fp[m][n]) && isRealNum(tp[n])) {\n                                value = Math.pow(parseFloat(fp[m][n]), parseFloat(tp[n]));\n                            } else {\n                                value = error.v;\n                            }\n                            rowArr.push(value);\n                        }\n                        result.push(rowArr);\n                    }\n                } else if (getObjType(tp[0]) == 'array') {\n                    if (tp[0].length != fp.length) {\n                        return error.na;\n                    }\n                    for (let m = 0; m < tp.length; m++) {\n                        let rowArr = [];\n                        for (let n = 0; n < tp[m].length; n++) {\n                            fp[n] = booleanToNum(fp[n]);\n                            tp[m][n] = booleanToNum(tp[m][n]);\n                            let value;\n                            if (isRealNum(fp[n]) && isRealNum(tp[m][n])) {\n                                value = Math.pow(parseFloat(fp[n]), parseFloat(tp[m][n]));\n                            } else {\n                                value = error.v;\n                            }\n                            rowArr.push(value);\n                        }\n                        result.push(rowArr);\n                    }\n                } else {\n                    if (fp.length != tp.length) {\n                        return error.na;\n                    }\n                    for (let n = 0; n < fp.length; n++) {\n                        fp[n] = booleanToNum(fp[n]);\n                        tp[n] = booleanToNum(tp[n]);\n                        let value;\n                        if (isRealNum(fp[n]) && isRealNum(tp[n])) {\n                            value = Math.pow(parseFloat(fp[n]), parseFloat(tp[n]));\n                        } else {\n                            value = error.v;\n                        }\n                        result.push(value);\n                    }\n                }\n                return result;\n            } else if (getObjType(fp) == 'array') {\n                tp = booleanToNum(tp);\n                let result = [];\n                if (getObjType(fp[0]) == 'array') {\n                    for (let m = 0; m < fp.length; m++) {\n                        let rowArr = [];\n                        for (let n = 0; n < fp[m].length; n++) {\n                            fp[m][n] = booleanToNum(fp[m][n]);\n                            let value;\n                            if (isRealNum(fp[m][n]) && isRealNum(tp)) {\n                                value = Math.pow(parseFloat(fp[m][n]), parseFloat(tp));\n                            } else {\n                                value = error.v;\n                            }\n                            rowArr.push(value);\n                        }\n                        result.push(rowArr);\n                    }\n                } else {\n                    for (let n = 0; n < fp.length; n++) {\n                        fp[n] = booleanToNum(fp[n]);\n                        let value;\n                        if (isRealNum(fp[n]) && isRealNum(tp)) {\n                            value = Math.pow(parseFloat(fp[n]), parseFloat(tp));\n                        } else {\n                            value = error.v;\n                        }\n                        result.push(value);\n                    }\n                }\n                return result;\n            } else if (getObjType(tp) == 'array') {\n                fp = booleanToNum(fp);\n                let result = [];\n                if (getObjType(tp[0]) == 'array') {\n                    for (let m = 0; m < tp.length; m++) {\n                        let rowArr = [];\n                        for (let n = 0; n < tp[m].length; n++) {\n                            tp[m][n] = booleanToNum(tp[m][n]);\n                            let value;\n                            if (isRealNum(fp) && isRealNum(tp[m][n])) {\n                                value = Math.pow(parseFloat(fp), parseFloat(tp[m][n]));\n                            } else {\n                                value = error.v;\n                            }\n                            rowArr.push(value);\n                        }\n                        result.push(rowArr);\n                    }\n                } else {\n                    for (let n = 0; n < tp.length; n++) {\n                        tp[n] = booleanToNum(tp[n]);\n                        let value;\n                        if (isRealNum(fp) && isRealNum(tp[n])) {\n                            value = Math.pow(parseFloat(fp), parseFloat(tp[n]));\n                        } else {\n                            value = error.v;\n                        }\n                        result.push(value);\n                    }\n                }\n                return result;\n            } else {\n                fp = booleanToNum(fp);\n                tp = booleanToNum(tp);\n                let result;\n                if (isRealNum(fp) && isRealNum(tp)) {\n                    result = Math.pow(parseFloat(fp), parseFloat(tp));\n                } else {\n                    result = error.v;\n                }\n                return result;\n            }\n        }\n    }    //解析 公式中{1,2,3;2,3,4} 为数组[[1,2,3],[2,3,4]]\n    //解析 公式中{1,2,3;2,3,4} 为数组[[1,2,3],[2,3,4]]\n    function luckysheet_getarraydata() {\n        let fp = arguments[0];\n        fp = fp.replace('{', '').replace('}', '').replace(/\\\"/g, '');\n        let arr = [];\n        if (fp.indexOf(';') > -1) {\n            arr = fp.split(';');\n            for (let i = 0; i < arr.length; i++) {\n                arr[i] = arr[i].split(',');\n            }\n        } else {\n            arr = fp.split(',');\n        }\n        return arr;\n    }\n    function luckysheet_calcADPMM(fp, sp, tp) {\n        let value;\n        if (sp == '+') {\n            value = numeral(fp).add(tp).value();\n        } else if (sp == '-') {\n            value = numeral(fp).subtract(tp).value();\n        } else if (sp == '%') {\n            value = new Function('return ' + parseFloat(fp) + sp + '(' + parseFloat(tp) + ')')();\n        } else if (sp == '/') {\n            value = numeral(fp).divide(tp).value();\n        } else if (sp == '*') {\n            value = numeral(fp).multiply(tp).value();\n        }\n        return value;\n    }\n    function luckysheet_getcelldata(txt) {\n        if (window.luckysheet_getcelldata_cache == null) {\n            window.luckysheet_getcelldata_cache = {};\n        }\n        if (txt in window.luckysheet_getcelldata_cache) {\n            return window.luckysheet_getcelldata_cache[txt];\n        }\n        let luckysheetfile = getluckysheetfile();\n        let val = txt.split('!');\n        let sheettxt = '', rangetxt = '', sheetIndex = -1, sheetdata = null;\n        if (val.length > 1) {\n            sheettxt = val[0].replace(/''/g, \"'\");\n            rangetxt = val[1];\n            if (sheettxt.substr(0, 1) == \"'\" && sheettxt.substr(sheettxt.length - 1, 1) == \"'\") {\n                sheettxt = sheettxt.substring(1, sheettxt.length - 1);\n            }\n            for (let i in luckysheetfile) {\n                if (sheettxt == luckysheetfile[i].name) {\n                    sheetIndex = luckysheetfile[i].index;\n                    sheetdata = luckysheetfile[i].data;\n                    break;\n                }\n            }\n            if (sheetIndex == -1) {\n                sheetIndex = 0;\n            }\n        } else {\n            let index = getSheetIndex(Store.calculateSheetIndex);\n            sheettxt = luckysheetfile[index].name;\n            sheetIndex = luckysheetfile[index].index;    // sheetdata = Store.flowdata;\n            // sheetdata = Store.flowdata;\n            sheetdata = luckysheetfile[index].data;\n            rangetxt = val[0];    // 取消execFunctionGroupData，改用execFunctionGlobalData\n                                  // if (formula.execFunctionGroupData != null) {\n                                  //     sheetdata = formula.execFunctionGroupData;\n                                  // }\n        }\n        // 取消execFunctionGroupData，改用execFunctionGlobalData\n        // if (formula.execFunctionGroupData != null) {\n        //     sheetdata = formula.execFunctionGroupData;\n        // }\n        if (rangetxt.indexOf(':') == -1) {\n            let row = parseInt(rangetxt.replace(/[^0-9]/g, '')) - 1;\n            let col = ABCatNum(rangetxt.replace(/[^A-Za-z]/g, ''));\n            if (!isNaN(row) && !isNaN(col)) {\n                let ret = getdatabyselectionD(sheetdata, {\n                    'row': [\n                        row,\n                        row\n                    ],\n                    'column': [\n                        col,\n                        col\n                    ]\n                })[0][0];\n                if (formula.execFunctionGlobalData != null) {\n                    let ef = formula.execFunctionGlobalData[row + '_' + col + '_' + sheetIndex];\n                    if (ef != null) {\n                        ret = ef;\n                    }\n                }    //范围的长宽\n                //范围的长宽\n                let rowl = 1;\n                let coll = 1;\n                let retAll = {\n                    'sheetName': sheettxt,\n                    'startCell': rangetxt,\n                    'rowl': rowl,\n                    'coll': coll,\n                    'data': ret\n                };\n                window.luckysheet_getcelldata_cache[txt] = retAll;\n                return retAll;\n            } else {\n                return [];\n            }\n        } else {\n            rangetxt = rangetxt.split(':');\n            let row = [], col = [];\n            row[0] = parseInt(rangetxt[0].replace(/[^0-9]/g, '')) - 1;\n            row[1] = parseInt(rangetxt[1].replace(/[^0-9]/g, '')) - 1;\n            if (isNaN(row[0])) {\n                row[0] = 0;\n            }\n            if (isNaN(row[1])) {\n                row[1] = sheetdata.length - 1;\n            }\n            if (row[0] > row[1]) {\n                tooltip.info('选择失败', '输入范围错误\\uFF01');\n                return [];\n            }\n            col[0] = ABCatNum(rangetxt[0].replace(/[^A-Za-z]/g, ''));\n            col[1] = ABCatNum(rangetxt[1].replace(/[^A-Za-z]/g, ''));\n            if (isNaN(col[0])) {\n                col[0] = 0;\n            }\n            if (isNaN(col[1])) {\n                col[1] = sheetdata[0].length - 1;\n            }\n            if (col[0] > col[1]) {\n                tooltip.info('选择失败', '输入范围错误\\uFF01');\n                return [];\n            }\n            let ret = getdatabyselectionD(sheetdata, {\n                'row': row,\n                'column': col\n            });\n            if (formula.execFunctionGlobalData != null) {\n                for (let r = row[0]; r <= row[1]; r++) {\n                    for (let c = col[0]; c <= col[1]; c++) {\n                        let ef = formula.execFunctionGlobalData[r + '_' + c + '_' + sheetIndex];\n                        if (ef != null) {\n                            ret[r - row[0]][c - col[0]] = ef;\n                        }\n                    }\n                }\n            }    //范围的长宽\n            //范围的长宽\n            let rowl = row[1] - row[0] + 1;\n            let coll = col[1] - col[0] + 1;\n            let retAll = {\n                'sheetName': sheettxt,\n                'startCell': rangetxt[0],\n                'rowl': rowl,\n                'coll': coll,\n                'data': ret\n            };\n            window.luckysheet_getcelldata_cache[txt] = retAll;\n            return retAll;\n        }\n    }    //解析单个取得的值，有字符串，数字，引用单元格或者函数\n    //解析单个取得的值，有字符串，数字，引用单元格或者函数\n    function luckysheet_parseData(value) {\n        if (typeof value === 'object') {\n            if (value == null) {\n                return '';\n            } else if (Array.isArray(value)) {\n                //函数返回的带期望格式的数组，可提取格式\n                let v = genarate(value[0]);\n                return v[2];\n            } else {\n                //getcelldat引用单元格对象，带有格式\n                if (Array.isArray(value.data)) {\n                    //单元格区域\n                    return error.v;\n                } else {\n                    //单个单元格\n                    if (value.data.v === undefined) {\n                        return '';\n                    } else {\n                        return value.data.v;\n                    }\n                }\n            }\n        } else if (!formula.isCompareOperator(value).flag) {\n            let v = genarate(value);\n            return v[2];\n        } else if (typeof value === 'string' || typeof value === 'number') {\n            return value;\n        }\n        return error.v;\n    }\n    function luckysheet_getValue() {\n        //解析获取函数参数，无格式，且可包含带操作符的\">5\"\n        //数据类型：1.手动输入或函数返回的字符串，普通字符串或数字直接取值，特殊格式需转化 如：\"2019-1-1\"（特殊格式转化为数字）、\">5\"或数字\n        //2.引用单元格对象，取得二维数组或单个的v 如：A1\n        //3.函数返回的带期望格式的数组，取得第一个参数，转化为数字 如：[\"2019-1-1\",true]\n        let args = arguments[0];\n        for (let i = 0; i < args.length; i++) {\n            let value = args[i];\n            if (typeof value === 'object') {\n                if (value == null) {\n                    value = '';\n                } else if (Array.isArray(value)) {\n                    //函数返回的带期望格式的数组，可提取格式\n                    let v = genarate(value[0]);\n                    value = v[2];\n                } else {\n                    //getcelldat引用单元格对象，带有格式\n                    if (Array.isArray(value.data)) {\n                        //单元格区域\n                        value = value.data;\n                    } else {\n                        //单个单元格\n                        if (value.data.v === undefined) {\n                            //空白单元格\n                            value = '';\n                        } else {\n                            value = value.data.v;\n                        }\n                    }\n                }\n            } else if (!formula.isCompareOperator(value).flag) {\n                let v = genarate(value);\n                value = v[2];\n            }\n            args[i] = value;\n        }\n    }\n    function luckysheet_indirect_check() {\n        let cellTxt = arguments[0];\n        if (cellTxt == null || cellTxt.length == 0) {\n            return null;\n        }\n        return cellTxt;\n    }\n    function luckysheet_indirect_check_return(txt) {\n        return txt;\n    }\n    function luckysheet_offset_check() {\n        if (!(getObjType(arguments[0]) == 'object' && arguments[0].startCell != null)) {\n            return formula.error.v;\n        }\n        var reference = arguments[0].startCell;    //要偏移的行数\n        //要偏移的行数\n        var rows = func_methods.getFirstValue(arguments[1]);\n        if (valueIsError(rows)) {\n            return rows;\n        }\n        if (!isRealNum(rows)) {\n            return formula.error.v;\n        }\n        rows = parseInt(rows);    //要偏移的列数\n        //要偏移的列数\n        var cols = func_methods.getFirstValue(arguments[2]);\n        if (valueIsError(cols)) {\n            return cols;\n        }\n        if (!isRealNum(cols)) {\n            return formula.error.v;\n        }\n        cols = parseInt(cols);    //要从偏移目标开始返回的范围的高度\n        //要从偏移目标开始返回的范围的高度\n        var height = arguments[0].rowl;\n        if (arguments.length >= 4) {\n            height = func_methods.getFirstValue(arguments[3]);\n            if (valueIsError(height)) {\n                return height;\n            }\n            if (!isRealNum(height)) {\n                return formula.error.v;\n            }\n            height = parseInt(height);\n        }    //要从偏移目标开始返回的范围的宽度\n        //要从偏移目标开始返回的范围的宽度\n        var width = arguments[0].coll;\n        if (arguments.length == 5) {\n            width = func_methods.getFirstValue(arguments[4]);\n            if (valueIsError(width)) {\n                return width;\n            }\n            if (!isRealNum(width)) {\n                return formula.error.v;\n            }\n            width = parseInt(width);\n        }\n        if (height < 1 || width < 1) {\n            return formula.error.r;\n        }    //计算\n        //计算\n        var cellrange = formula.getcellrange(reference);\n        var cellRow0 = cellrange['row'][0];\n        var cellCol0 = cellrange['column'][0];\n        cellRow0 += rows;\n        cellCol0 += cols;\n        var cellRow1 = cellRow0 + height - 1;\n        var cellCol1 = cellCol0 + width - 1;\n        if (cellRow0 < 0 || cellRow1 >= Store.flowdata.length || cellCol0 < 0 || cellCol1 >= Store.flowdata[0].length) {\n            return formula.error.r;\n        }\n        return getRangetxt(Store.calculateSheetIndex, {\n            row: [\n                cellRow0,\n                cellRow1\n            ],\n            column: [\n                cellCol0,\n                cellCol1\n            ]\n        });\n    }\n    function luckysheet_getSpecialReference(isCellFirst, param1, param2) {\n        let functionRange, rangeTxt;\n        if (isCellFirst) {\n            rangeTxt = param1;\n            functionRange = param2;\n        } else {\n            functionRange = param1;\n            rangeTxt = param2;\n        }\n        if (functionRange.startCell.indexOf(':') > -1 || rangeTxt.indexOf(':') > -1) {\n            return error.v;\n        }\n        if (isCellFirst) {\n            return luckysheet_getcelldata(rangeTxt + ':' + functionRange.startCell);\n        } else {\n            let rangeT = rangeTxt, sheetName = '';\n            if (rangeTxt.indexOf('!') > -1) {\n                let rangetxtArr = rangeTxt.split('!');\n                sheetName = rangetxtArr[0] + '!';\n                rangeT = rangetxtArr[1];\n            }\n            return luckysheet_getcelldata(sheetName + functionRange.startCell + ':' + rangeT);\n        }\n    }\n    return {\n        luckysheet_compareWith,\n        luckysheet_getarraydata,\n        luckysheet_getcelldata,\n        luckysheet_parseData,\n        luckysheet_getValue,\n        luckysheet_indirect_check,\n        luckysheet_indirect_check_return,\n        luckysheet_offset_check,\n        luckysheet_calcADPMM,\n        luckysheet_getSpecialReference\n    };\n});"]}