{"version":3,"sources":["widgets/extend.js"],"names":["define","m_extend_methods","formula","m_getdata","m_setdata","luckysheetFreezen","m_select","m_sheetSearch","m_protection","m_get","Store","luckysheetextendData","getMoveRange","datagridgrowth","getcellFormula","setcellvalue","selectHightlightShow","luckysheet_searcharray","checkProtectionAuthorityNormal","checkProtectionNotEnable","getSheetIndex","luckysheetextendtable","type","index","value","direction","sheetIndex","currentSheetIndex","curOrder","file","luckysheetfile","d","$","extend","data","Math","floor","cfg","config","merge_new","m","mc","r","c","rs","cs","calcChain","newCalcChain","length","i","calc","calc_r","calc_c","calc_i","calc_funcStr","functionStr","functionStrChange","f","push","filter_select","filter","newFilterObj","JSON","stringify","f_r1","row","f_r2","f_c1","column","f_c2","k","f_rowhidden","rowhidden","f_rowhidden_new","n","parseFloat","str","edr","f_cindex","cindex","stc","edc","CFarr","luckysheet_conditionformat_save","newCFarr","cf_range","cellrange","cf_new_range","j","CFr1","CFr2","CFc1","CFc2","cf","AFarr","luckysheet_alternateformat_save","newAFarr","AFr1","AFr2","AFc1","AFc2","af","newFreezen","freezenhorizontaldata","freezenverticaldata","freezen_scrollTop","freezen_row_st","freezen_top","visibledatarow","columnHeaderHeight","cutVolumn","freezen_scrollLeft","freezen_col_st","freezen_left","visibledatacolumn","rowHeaderWidth","dataVerification","newDataVerification","key","Number","split","item","type1","hyperlink","newHyperlink","rowlen_new","rowhidden_new","borderInfo","rangeType","borderRange","range","emptyRange","bd_r1","bd_r2","bd_obj","borderType","style","color","row_index","arr","Function","join","columnlen_new","colhidden_new","col","bd_c1","bd_c2","col_index","unshift","splice","refreshGrid_adRC","len","rc","restore","luckysheet_select_save","scrollLeft","scrollTop","winH","height","width","row_pre","hide","luckysheetdeletetable","st","ed","slen","freezen_st","freezen_st2","addcol","concat","luckysheetDeleteCell","rlen","clen","r_i","c_i","f_stc","f_edc","k2","addrow","refreshGrid_deleteCell"],"mappings":"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","file":"../../widgets/extend.js","sourcesContent":["define([\n    '../methods/extend_methods',\n    '../methods/formula_methods',\n    '../methods/getdata',\n    '../methods/setdata',\n    '../methods/freezen_methods',\n    './select',\n    '../methods/sheetSearch',\n    '../methods/protection_methods',\n    '../methods/get',\n    '../store'\n], function (m_extend_methods,formula, m_getdata, m_setdata, luckysheetFreezen, m_select, m_sheetSearch, m_protection, m_get, Store) {\n    'use strict';\n    const {luckysheetextendData, getMoveRange} = m_extend_methods;\n\n    const {datagridgrowth, getcellFormula} = m_getdata;\n    const {setcellvalue} = m_setdata;\n    const {selectHightlightShow} = m_select;\n    const {luckysheet_searcharray} = m_sheetSearch;\n    const {checkProtectionAuthorityNormal, checkProtectionNotEnable} = m_protection;\n    const {getSheetIndex} = m_get;\n    //增加行列\n    function luckysheetextendtable(type, index, value, direction, sheetIndex) {\n        sheetIndex = sheetIndex || Store.currentSheetIndex;\n        if (type == 'row' && !checkProtectionAuthorityNormal(sheetIndex, 'insertRows')) {\n            return;\n        } else if (type == 'column' && !checkProtectionAuthorityNormal(sheetIndex, 'insertColumns')) {\n            return;\n        }\n        let curOrder = getSheetIndex(sheetIndex);\n        let file = Store.luckysheetfile[curOrder];\n        let d = $.extend(true, [], file.data);\n        value = Math.floor(value);\n        let cfg = $.extend(true, {}, file.config);    //合并单元格配置变动\n        //合并单元格配置变动\n        if (cfg['merge'] == null) {\n            cfg['merge'] = {};\n        }\n        let merge_new = {};\n        for (let m in cfg['merge']) {\n            let mc = cfg['merge'][m];\n            let r = mc.r, c = mc.c, rs = mc.rs, cs = mc.cs;\n            if (type == 'row') {\n                if (index < r) {\n                    merge_new[r + value + '_' + c] = {\n                        'r': r + value,\n                        'c': c,\n                        'rs': rs,\n                        'cs': cs\n                    };\n                } else if (index == r) {\n                    if (direction == 'lefttop') {\n                        merge_new[r + value + '_' + c] = {\n                            'r': r + value,\n                            'c': c,\n                            'rs': rs,\n                            'cs': cs\n                        };\n                    } else {\n                        merge_new[r + '_' + c] = {\n                            'r': r,\n                            'c': c,\n                            'rs': rs + value,\n                            'cs': cs\n                        };\n                    }\n                } else if (index < r + rs - 1) {\n                    merge_new[r + '_' + c] = {\n                        'r': r,\n                        'c': c,\n                        'rs': rs + value,\n                        'cs': cs\n                    };\n                } else if (index == r + rs - 1) {\n                    if (direction == 'lefttop') {\n                        merge_new[r + '_' + c] = {\n                            'r': r,\n                            'c': c,\n                            'rs': rs + value,\n                            'cs': cs\n                        };\n                    } else {\n                        merge_new[r + '_' + c] = {\n                            'r': r,\n                            'c': c,\n                            'rs': rs,\n                            'cs': cs\n                        };\n                    }\n                } else {\n                    merge_new[r + '_' + c] = {\n                        'r': r,\n                        'c': c,\n                        'rs': rs,\n                        'cs': cs\n                    };\n                }\n            } else if (type == 'column') {\n                if (index < c) {\n                    merge_new[r + '_' + (c + value)] = {\n                        'r': r,\n                        'c': c + value,\n                        'rs': rs,\n                        'cs': cs\n                    };\n                } else if (index == c) {\n                    if (direction == 'lefttop') {\n                        merge_new[r + '_' + (c + value)] = {\n                            'r': r,\n                            'c': c + value,\n                            'rs': rs,\n                            'cs': cs\n                        };\n                    } else {\n                        merge_new[r + '_' + c] = {\n                            'r': r,\n                            'c': c,\n                            'rs': rs,\n                            'cs': cs + value\n                        };\n                    }\n                } else if (index < c + cs - 1) {\n                    merge_new[r + '_' + c] = {\n                        'r': r,\n                        'c': c,\n                        'rs': rs,\n                        'cs': cs + value\n                    };\n                } else if (index == c + cs - 1) {\n                    if (direction == 'lefttop') {\n                        merge_new[r + '_' + c] = {\n                            'r': r,\n                            'c': c,\n                            'rs': rs,\n                            'cs': cs + value\n                        };\n                    } else {\n                        merge_new[r + '_' + c] = {\n                            'r': r,\n                            'c': c,\n                            'rs': rs,\n                            'cs': cs\n                        };\n                    }\n                } else {\n                    merge_new[r + '_' + c] = {\n                        'r': r,\n                        'c': c,\n                        'rs': rs,\n                        'cs': cs\n                    };\n                }\n            }\n        }\n        cfg['merge'] = merge_new;    //公式配置变动\n        //公式配置变动\n        let calcChain = file.calcChain;\n        let newCalcChain = [];\n        if (calcChain != null && calcChain.length > 0) {\n            for (let i = 0; i < calcChain.length; i++) {\n                let calc = $.extend(true, {}, calcChain[i]);\n                let calc_r = calc.r, calc_c = calc.c, calc_i = calc.index, calc_funcStr = getcellFormula(calc_r, calc_c, calc_i);\n                if (type == 'row') {\n                    let functionStr = '=' + formula.functionStrChange(calc_funcStr, 'add', 'row', direction, index, value);\n                    if (d[calc_r][calc_c] && d[calc_r][calc_c].f == calc_funcStr) {\n                        d[calc_r][calc_c].f = functionStr;\n                    }\n                    if (direction == 'lefttop') {\n                        if (calc_r >= index) {\n                            calc.r += value;\n                        }\n                    } else if (direction == 'rightbottom') {\n                        if (calc_r > index) {\n                            calc.r += value;\n                        }\n                    }\n                    newCalcChain.push(calc);\n                } else if (type == 'column') {\n                    let functionStr = '=' + formula.functionStrChange(calc_funcStr, 'add', 'col', direction, index, value);\n                    if (d[calc_r][calc_c] && d[calc_r][calc_c].f == calc_funcStr) {\n                        d[calc_r][calc_c].f = functionStr;\n                    }\n                    if (direction == 'lefttop') {\n                        if (calc_c >= index) {\n                            calc.c += value;\n                        }\n                    } else if (direction == 'rightbottom') {\n                        if (calc_c > index) {\n                            calc.c += value;\n                        }\n                    }\n                    newCalcChain.push(calc);\n                }\n            }\n        }    //筛选配置变动\n        //筛选配置变动\n        let filter_select = file.filter_select;\n        let filter = file.filter;\n        let newFilterObj = null;\n        if (filter_select != null && JSON.stringify(filter_select) != '{}') {\n            newFilterObj = {\n                'filter_select': null,\n                'filter': null\n            };\n            let f_r1 = filter_select.row[0], f_r2 = filter_select.row[1];\n            let f_c1 = filter_select.column[0], f_c2 = filter_select.column[1];\n            if (type == 'row') {\n                if (f_r1 < index) {\n                    if (f_r2 == index && direction == 'lefttop') {\n                        f_r2 += value;\n                    } else if (f_r2 > index) {\n                        f_r2 += value;\n                    }\n                } else if (f_r1 == index) {\n                    if (direction == 'lefttop') {\n                        f_r1 += value;\n                        f_r2 += value;\n                    } else if (direction == 'rightbottom' && f_r2 > index) {\n                        f_r2 += value;\n                    }\n                } else {\n                    f_r1 += value;\n                    f_r2 += value;\n                }\n                if (filter != null) {\n                    newFilterObj.filter = {};\n                    for (let k in filter) {\n                        let f_rowhidden = filter[k].rowhidden;\n                        let f_rowhidden_new = {};\n                        for (let n in f_rowhidden) {\n                            n = parseFloat(n);\n                            if (n < index) {\n                                f_rowhidden_new[n] = 0;\n                            } else if (n == index) {\n                                if (direction == 'lefttop') {\n                                    f_rowhidden_new[n + value] = 0;\n                                } else if (direction == 'rightbottom') {\n                                    f_rowhidden_new[n] = 0;\n                                }\n                            } else {\n                                f_rowhidden_new[n + value] = 0;\n                            }\n                        }\n                        newFilterObj.filter[k] = $.extend(true, {}, filter[k]);\n                        newFilterObj.filter[k].rowhidden = f_rowhidden_new;\n                        newFilterObj.filter[k].str = f_r1;\n                        newFilterObj.filter[k].edr = f_r2;\n                    }\n                }\n            } else if (type == 'column') {\n                if (f_c1 < index) {\n                    if (f_c2 == index && direction == 'lefttop') {\n                        f_c2 += value;\n                    } else if (f_c2 > index) {\n                        f_c2 += value;\n                    }\n                } else if (f_c1 == index) {\n                    if (direction == 'lefttop') {\n                        f_c1 += value;\n                        f_c2 += value;\n                    } else if (direction == 'rightbottom' && f_c2 > index) {\n                        f_c2 += value;\n                    }\n                } else {\n                    f_c1 += value;\n                    f_c2 += value;\n                }\n                if (filter != null) {\n                    newFilterObj.filter = {};\n                    for (let k in filter) {\n                        let f_cindex = filter[k].cindex;\n                        if (f_cindex == index && direction == 'lefttop') {\n                            f_cindex += value;\n                        } else if (f_cindex > index) {\n                            f_cindex += value;\n                        }\n                        newFilterObj.filter[f_cindex - f_c1] = $.extend(true, {}, filter[k]);\n                        newFilterObj.filter[f_cindex - f_c1].cindex = f_cindex;\n                        newFilterObj.filter[f_cindex - f_c1].stc = f_c1;\n                        newFilterObj.filter[f_cindex - f_c1].edc = f_c2;\n                    }\n                }\n            }\n            newFilterObj.filter_select = {\n                'row': [\n                    f_r1,\n                    f_r2\n                ],\n                'column': [\n                    f_c1,\n                    f_c2\n                ]\n            };\n        }\n        if (newFilterObj != null && newFilterObj.filter != null) {\n            if (cfg['rowhidden'] == null) {\n                cfg['rowhidden'] = {};\n            }\n            for (let k in newFilterObj.filter) {\n                let f_rowhidden = newFilterObj.filter[k].rowhidden;\n                for (let n in f_rowhidden) {\n                    cfg['rowhidden'][n] = 0;\n                }\n            }\n        }    //条件格式配置变动\n        //条件格式配置变动\n        let CFarr = file.luckysheet_conditionformat_save;\n        let newCFarr = [];\n        if (CFarr != null && CFarr.length > 0) {\n            for (let i = 0; i < CFarr.length; i++) {\n                let cf_range = CFarr[i].cellrange;\n                let cf_new_range = [];\n                for (let j = 0; j < cf_range.length; j++) {\n                    let CFr1 = cf_range[j].row[0], CFr2 = cf_range[j].row[1], CFc1 = cf_range[j].column[0], CFc2 = cf_range[j].column[1];\n                    if (type == 'row') {\n                        if (CFr1 < index) {\n                            if (CFr2 == index && direction == 'lefttop') {\n                                CFr2 += value;\n                            } else if (CFr2 > index) {\n                                CFr2 += value;\n                            }\n                        } else if (CFr1 == index) {\n                            if (direction == 'lefttop') {\n                                CFr1 += value;\n                                CFr2 += value;\n                            } else if (direction == 'rightbottom' && CFr2 > index) {\n                                CFr2 += value;\n                            }\n                        } else {\n                            CFr1 += value;\n                            CFr2 += value;\n                        }\n                    } else if (type == 'column') {\n                        if (CFc1 < index) {\n                            if (CFc2 == index && direction == 'lefttop') {\n                                CFc2 += value;\n                            } else if (CFc2 > index) {\n                                CFc2 += value;\n                            }\n                        } else if (CFc1 == index) {\n                            if (direction == 'lefttop') {\n                                CFc1 += value;\n                                CFc2 += value;\n                            } else if (direction == 'rightbottom' && CFc2 > index) {\n                                CFc2 += value;\n                            }\n                        } else {\n                            CFc1 += value;\n                            CFc2 += value;\n                        }\n                    }\n                    cf_new_range.push({\n                        'row': [\n                            CFr1,\n                            CFr2\n                        ],\n                        'column': [\n                            CFc1,\n                            CFc2\n                        ]\n                    });\n                }\n                let cf = $.extend(true, {}, CFarr[i]);\n                cf.cellrange = cf_new_range;\n                newCFarr.push(cf);\n            }\n        }    //交替颜色配置变动\n        //交替颜色配置变动\n        let AFarr = file.luckysheet_alternateformat_save;\n        let newAFarr = [];\n        if (AFarr != null && AFarr.length > 0) {\n            for (let i = 0; i < AFarr.length; i++) {\n                let AFr1 = AFarr[i].cellrange.row[0], AFr2 = AFarr[i].cellrange.row[1], AFc1 = AFarr[i].cellrange.column[0], AFc2 = AFarr[i].cellrange.column[1];\n                let af = $.extend(true, {}, AFarr[i]);\n                if (type == 'row') {\n                    if (AFr1 < index) {\n                        if (AFr2 == index && direction == 'lefttop') {\n                            AFr2 += value;\n                        } else if (AFr2 > index) {\n                            AFr2 += value;\n                        }\n                    } else if (AFr1 == index) {\n                        if (direction == 'lefttop') {\n                            AFr1 += value;\n                            AFr2 += value;\n                        } else if (direction == 'rightbottom' && AFr2 > index) {\n                            AFr2 += value;\n                        }\n                    } else {\n                        AFr1 += value;\n                        AFr2 += value;\n                    }\n                } else if (type == 'column') {\n                    if (AFc1 < index) {\n                        if (AFc2 == index && direction == 'lefttop') {\n                            AFc2 += value;\n                        } else if (AFc2 > index) {\n                            AFc2 += value;\n                        }\n                    } else if (AFc1 == index) {\n                        if (direction == 'lefttop') {\n                            AFc1 += value;\n                            AFc2 += value;\n                        } else if (direction == 'rightbottom' && AFc2 > index) {\n                            AFc2 += value;\n                        }\n                    } else {\n                        AFc1 += value;\n                        AFc2 += value;\n                    }\n                }\n                af.cellrange = {\n                    'row': [\n                        AFr1,\n                        AFr2\n                    ],\n                    'column': [\n                        AFc1,\n                        AFc2\n                    ]\n                };\n                newAFarr.push(af);\n            }\n        }    //冻结配置变动\n        //冻结配置变动\n        let newFreezen = {\n            'freezenhorizontaldata': null,\n            'freezenverticaldata': null\n        };\n        if (Store.freezenhorizontaldata != null && type == 'row') {\n            let freezen_scrollTop = Store.freezenhorizontaldata[2];\n            let freezen_row_st = Store.freezenhorizontaldata[1] - 1;\n            if (freezen_row_st == index && direction == 'lefttop') {\n                freezen_row_st += value;\n            } else if (freezen_row_st > index) {\n                freezen_row_st += value;\n            }\n            let freezen_top = Store.visibledatarow[freezen_row_st] - 2 - freezen_scrollTop + Store.columnHeaderHeight;\n            newFreezen.freezenhorizontaldata = [\n                Store.visibledatarow[freezen_row_st],\n                freezen_row_st + 1,\n                freezen_scrollTop,\n                luckysheetFreezen.cutVolumn(Store.visibledatarow, freezen_row_st + 1),\n                freezen_top\n            ];\n        } else {\n            newFreezen.freezenhorizontaldata = Store.freezenhorizontaldata;\n        }\n        if (Store.freezenverticaldata != null && type == 'column') {\n            let freezen_scrollLeft = Store.freezenverticaldata[2];\n            let freezen_col_st = Store.freezenverticaldata[1] - 1;\n            if (freezen_col_st == index && direction == 'lefttop') {\n                freezen_col_st += value;\n            } else if (freezen_col_st > index) {\n                freezen_col_st += value;\n            }\n            let freezen_left = Store.visibledatacolumn[freezen_col_st] - 2 - freezen_scrollLeft + Store.rowHeaderWidth;\n            newFreezen.freezenverticaldata = [\n                Store.visibledatacolumn[freezen_col_st],\n                freezen_col_st + 1,\n                freezen_scrollLeft,\n                luckysheetFreezen.cutVolumn(Store.visibledatacolumn, freezen_col_st + 1),\n                freezen_left\n            ];\n        } else {\n            newFreezen.freezenverticaldata = Store.freezenverticaldata;\n        }    //数据验证配置变动\n        //数据验证配置变动\n        let dataVerification = file.dataVerification;\n        let newDataVerification = {};\n        if (dataVerification != null) {\n            for (let key in dataVerification) {\n                let r = Number(key.split('_')[0]), c = Number(key.split('_')[1]);\n                let item = dataVerification[key];\n                if (type == 'row') {\n                    if (index < r) {\n                        newDataVerification[r + value + '_' + c] = item;\n                    } else if (index == r) {\n                        if (direction == 'lefttop') {\n                            newDataVerification[r + value + '_' + c] = item;\n                            for (let i = 0; i < value; i++) {\n                                newDataVerification[r + i + '_' + c] = item;\n                            }\n                        } else {\n                            newDataVerification[r + '_' + c] = item;\n                            for (let i = 0; i < value; i++) {\n                                newDataVerification[r + i + 1 + '_' + c] = item;\n                            }\n                        }\n                    } else {\n                        newDataVerification[r + '_' + c] = item;\n                    }\n                } else if (type == 'column') {\n                    if (index < c) {\n                        newDataVerification[r + '_' + (c + value)] = item;\n                    } else if (index == c) {\n                        if (direction == 'lefttop') {\n                            newDataVerification[r + '_' + (c + value)] = item;\n                            for (let i = 0; i < value; i++) {\n                                newDataVerification[r + '_' + (c + i)] = item;\n                            }\n                        } else {\n                            newDataVerification[r + '_' + c] = item;\n                            for (let i = 0; i < value; i++) {\n                                newDataVerification[r + '_' + (c + i + 1)] = item;\n                            }\n                        }\n                    } else {\n                        newDataVerification[r + '_' + c] = item;\n                    }\n                }\n            }\n        }    //超链接配置变动\n        //超链接配置变动\n        let hyperlink = file.hyperlink;\n        let newHyperlink = {};\n        if (hyperlink != null) {\n            for (let key in hyperlink) {\n                let r = Number(key.split('_')[0]), c = Number(key.split('_')[1]);\n                let item = hyperlink[key];\n                if (type == 'row') {\n                    if (index < r) {\n                        newHyperlink[r + value + '_' + c] = item;\n                    } else if (index == r) {\n                        if (direction == 'lefttop') {\n                            newHyperlink[r + value + '_' + c] = item;\n                        } else {\n                            newHyperlink[r + '_' + c] = item;\n                        }\n                    } else {\n                        newHyperlink[r + '_' + c] = item;\n                    }\n                } else if (type == 'column') {\n                    if (index < c) {\n                        newHyperlink[r + '_' + (c + value)] = item;\n                    } else if (index == c) {\n                        if (direction == 'lefttop') {\n                            newHyperlink[r + '_' + (c + value)] = item;\n                        } else {\n                            newHyperlink[r + '_' + c] = item;\n                        }\n                    } else {\n                        newHyperlink[r + '_' + c] = item;\n                    }\n                }\n            }\n        }\n        let type1;\n        if (type == 'row') {\n            type1 = 'r';    //行高配置变动\n            //行高配置变动\n            if (cfg['rowlen'] != null) {\n                let rowlen_new = {};\n                for (let r in cfg['rowlen']) {\n                    r = parseFloat(r);\n                    if (r < index) {\n                        rowlen_new[r] = cfg['rowlen'][r];\n                    } else if (r == index) {\n                        if (direction == 'lefttop') {\n                            rowlen_new[r + value] = cfg['rowlen'][r];\n                        } else if (direction == 'rightbottom') {\n                            rowlen_new[r] = cfg['rowlen'][r];\n                        }\n                    } else {\n                        rowlen_new[r + value] = cfg['rowlen'][r];\n                    }\n                }\n                cfg['rowlen'] = rowlen_new;\n            }    //隐藏行配置变动\n            //隐藏行配置变动\n            if (cfg['rowhidden'] != null) {\n                let rowhidden_new = {};\n                for (let r in cfg['rowhidden']) {\n                    r = parseFloat(r);\n                    if (r < index) {\n                        rowhidden_new[r] = cfg['rowhidden'][r];\n                    } else if (r == index) {\n                        if (direction == 'lefttop') {\n                            rowhidden_new[r + value] = cfg['rowhidden'][r];\n                        } else if (direction == 'rightbottom') {\n                            rowhidden_new[r] = cfg['rowhidden'][r];\n                        }\n                    } else {\n                        rowhidden_new[r + value] = cfg['rowhidden'][r];\n                    }\n                }\n                cfg['rowhidden'] = rowhidden_new;\n            }    //空行模板\n            //空行模板\n            let row = [];\n            for (let c = 0; c < d[0].length; c++) {\n                row.push(null);\n            }    //边框\n            //边框\n            if (cfg['borderInfo'] && cfg['borderInfo'].length > 0) {\n                let borderInfo = [];\n                for (let i = 0; i < cfg['borderInfo'].length; i++) {\n                    let rangeType = cfg['borderInfo'][i].rangeType;\n                    if (rangeType == 'range') {\n                        let borderRange = cfg['borderInfo'][i].range;\n                        let emptyRange = [];\n                        for (let j = 0; j < borderRange.length; j++) {\n                            let bd_r1 = borderRange[j].row[0], bd_r2 = borderRange[j].row[1];\n                            if (direction == 'lefttop') {\n                                if (index <= bd_r1) {\n                                    bd_r1 += value;\n                                    bd_r2 += value;\n                                } else if (index <= bd_r2) {\n                                    bd_r2 += value;\n                                }\n                            } else {\n                                if (index < bd_r1) {\n                                    bd_r1 += value;\n                                    bd_r2 += value;\n                                } else if (index < bd_r2) {\n                                    bd_r2 += value;\n                                }\n                            }\n                            if (bd_r2 >= bd_r1) {\n                                emptyRange.push({\n                                    'row': [\n                                        bd_r1,\n                                        bd_r2\n                                    ],\n                                    'column': borderRange[j].column\n                                });\n                            }\n                        }\n                        if (emptyRange.length > 0) {\n                            let bd_obj = {\n                                'rangeType': 'range',\n                                'borderType': cfg['borderInfo'][i].borderType,\n                                'style': cfg['borderInfo'][i].style,\n                                'color': cfg['borderInfo'][i].color,\n                                'range': emptyRange\n                            };\n                            borderInfo.push(bd_obj);\n                        }\n                    } else if (rangeType == 'cell') {\n                        let row_index = cfg['borderInfo'][i].value.row_index;\n                        if (direction == 'lefttop') {\n                            if (index <= row_index) {\n                                row_index += value;\n                            }\n                        } else {\n                            if (index < row_index) {\n                                row_index += value;\n                            }\n                        }\n                        cfg['borderInfo'][i].value.row_index = row_index;\n                        borderInfo.push(cfg['borderInfo'][i]);\n                    }\n                }\n                cfg['borderInfo'] = borderInfo;\n            }\n            let arr = [];\n            for (let r = 0; r < value; r++) {\n                arr.push(JSON.stringify(row));\n            }\n            if (direction == 'lefttop') {\n                if (index == 0) {\n                    new Function('d', 'return ' + 'd.unshift(' + arr.join(',') + ')')(d);\n                } else {\n                    new Function('d', 'return ' + 'd.splice(' + index + ', 0, ' + arr.join(',') + ')')(d);\n                }\n            } else {\n                new Function('d', 'return ' + 'd.splice(' + (index + 1) + ', 0, ' + arr.join(',') + ')')(d);\n            }\n        } else {\n            type1 = 'c';    //行高配置变动\n            //行高配置变动\n            if (cfg['columnlen'] != null) {\n                let columnlen_new = {};\n                for (let c in cfg['columnlen']) {\n                    c = parseFloat(c);\n                    if (c < index) {\n                        columnlen_new[c] = cfg['columnlen'][c];\n                    } else if (c == index) {\n                        if (direction == 'lefttop') {\n                            columnlen_new[c + value] = cfg['columnlen'][c];\n                        } else if (direction == 'rightbottom') {\n                            columnlen_new[c] = cfg['columnlen'][c];\n                        }\n                    } else {\n                        columnlen_new[c + value] = cfg['columnlen'][c];\n                    }\n                }\n                cfg['columnlen'] = columnlen_new;\n            }    //隐藏列配置变动\n            //隐藏列配置变动\n            if (cfg['colhidden'] != null) {\n                let colhidden_new = {};\n                for (let c in cfg['colhidden']) {\n                    c = parseFloat(c);\n                    if (c < index) {\n                        colhidden_new[c] = cfg['colhidden'][c];\n                    } else if (c == index) {\n                        if (direction == 'lefttop') {\n                            colhidden_new[c + value] = cfg['colhidden'][c];\n                        } else if (direction == 'rightbottom') {\n                            colhidden_new[c] = cfg['colhidden'][c];\n                        }\n                    } else {\n                        colhidden_new[c + value] = cfg['colhidden'][c];\n                    }\n                }\n                cfg['colhidden'] = colhidden_new;\n            }    //空列模板\n            //空列模板\n            let col = [];\n            for (let r = 0; r < d.length; r++) {\n                col.push(null);\n            }    //边框\n            //边框\n            if (cfg['borderInfo'] && cfg['borderInfo'].length > 0) {\n                let borderInfo = [];\n                for (let i = 0; i < cfg['borderInfo'].length; i++) {\n                    let rangeType = cfg['borderInfo'][i].rangeType;\n                    if (rangeType == 'range') {\n                        let borderRange = cfg['borderInfo'][i].range;\n                        let emptyRange = [];\n                        for (let j = 0; j < borderRange.length; j++) {\n                            let bd_c1 = borderRange[j].column[0], bd_c2 = borderRange[j].column[1];\n                            if (direction == 'lefttop') {\n                                if (index <= bd_c1) {\n                                    bd_c1 += value;\n                                    bd_c2 += value;\n                                } else if (index <= bd_c2) {\n                                    bd_c2 += value;\n                                }\n                            } else {\n                                if (index < bd_c1) {\n                                    bd_c1 += value;\n                                    bd_c2 += value;\n                                } else if (index < bd_c2) {\n                                    bd_c2 += value;\n                                }\n                            }\n                            if (bd_c2 >= bd_c1) {\n                                emptyRange.push({\n                                    'row': borderRange[j].row,\n                                    'column': [\n                                        bd_c1,\n                                        bd_c2\n                                    ]\n                                });\n                            }\n                        }\n                        if (emptyRange.length > 0) {\n                            let bd_obj = {\n                                'rangeType': 'range',\n                                'borderType': cfg['borderInfo'][i].borderType,\n                                'style': cfg['borderInfo'][i].style,\n                                'color': cfg['borderInfo'][i].color,\n                                'range': emptyRange\n                            };\n                            borderInfo.push(bd_obj);\n                        }\n                    } else if (rangeType == 'cell') {\n                        let col_index = cfg['borderInfo'][i].value.col_index;\n                        if (direction == 'lefttop') {\n                            if (index <= col_index) {\n                                col_index += value;\n                            }\n                        } else {\n                            if (index < col_index) {\n                                col_index += value;\n                            }\n                        }\n                        cfg['borderInfo'][i].value.col_index = col_index;\n                        borderInfo.push(cfg['borderInfo'][i]);\n                    }\n                }\n                cfg['borderInfo'] = borderInfo;\n            }\n            for (let r = 0; r < d.length; r++) {\n                let row = d[r];\n                for (let i = 0; i < value; i++) {\n                    if (direction == 'lefttop') {\n                        if (index == 0) {\n                            row.unshift(col[r]);\n                        } else {\n                            row.splice(index, 0, col[r]);\n                        }\n                    } else {\n                        row.splice(index + 1, 0, col[r]);\n                    }\n                }\n            }\n        }    // 修改当前sheet页时刷新\n        // 修改当前sheet页时刷新\n        if (file.index == Store.currentSheetIndex) {\n            ///jfrefreshgrid_adRC(d, cfg, 'addRC', {\n            Store.refreshGrid_adRC(d, cfg, 'addRC', {\n                'index': index,\n                'len': value,\n                'direction': direction,\n                'rc': type1,\n                'restore': false\n            }, newCalcChain, newFilterObj, newCFarr, newAFarr, newFreezen, newDataVerification, newHyperlink);\n        } else {\n            file.data = d;\n            file.config = cfg;\n            file.calcChain = newCalcChain;\n            file.filter = newFilterObj.filter;\n            file.filter_select = newFilterObj.filter_select;\n            file.luckysheet_conditionformat_save = newCFarr;\n            file.luckysheet_alternateformat_save = newAFarr;\n            file.dataVerification = newDataVerification;\n            file.hyperlink = newHyperlink;\n        }\n        let range = null;\n        if (type == 'row') {\n            if (direction == 'lefttop') {\n                range = [{\n                        'row': [\n                            index,\n                            index + value - 1\n                        ],\n                        'column': [\n                            0,\n                            d[0].length - 1\n                        ]\n                    }];\n            } else {\n                range = [{\n                        'row': [\n                            index + 1,\n                            index + value\n                        ],\n                        'column': [\n                            0,\n                            d[0].length - 1\n                        ]\n                    }];\n            }\n        } else {\n            if (direction == 'lefttop') {\n                range = [{\n                        'row': [\n                            0,\n                            d.length - 1\n                        ],\n                        'column': [\n                            index,\n                            index + value - 1\n                        ]\n                    }];\n            } else {\n                range = [{\n                        'row': [\n                            0,\n                            d.length - 1\n                        ],\n                        'column': [\n                            index + 1,\n                            index + value\n                        ]\n                    }];\n            }\n        }\n        file.luckysheet_select_save = range;\n        if (file.index == Store.currentSheetIndex) {\n            Store.luckysheet_select_save = range;\n            selectHightlightShow();\n        }\n        if (type == 'row') {\n            let scrollLeft = $('#luckysheet-cell-main').scrollLeft(), scrollTop = $('#luckysheet-cell-main').scrollTop();\n            let winH = $('#luckysheet-cell-main').height(), winW = $('#luckysheet-cell-main').width();\n            let row = Store.visibledatarow[range[0].row[1]], row_pre = range[0].row[0] - 1 == -1 ? 0 : Store.visibledatarow[range[0].row[0] - 1];\n            if (row - scrollTop - winH + 20 > 0) {\n                $('#luckysheet-scrollbar-y').scrollTop(row - winH + 20);\n            } else if (row_pre - scrollTop - 20 < 0) {\n                $('#luckysheet-scrollbar-y').scrollTop(row_pre - 20);\n            }\n            if (value > 30) {\n                $('#luckysheet-row-count-show').hide();\n                $('#luckysheet-column-count-show').hide();\n            }\n        }\n    }\n  \n    //删除行列\n    function luckysheetdeletetable(type, st, ed, sheetIndex) {\n        sheetIndex = sheetIndex || Store.currentSheetIndex;\n        if (type == 'row' && !checkProtectionAuthorityNormal(sheetIndex, 'deleteRows')) {\n            return;\n        } else if (type == 'column' && !checkProtectionAuthorityNormal(sheetIndex, 'deleteColumns')) {\n            return;\n        }\n        let curOrder = getSheetIndex(sheetIndex);\n        let file = Store.luckysheetfile[curOrder];\n        let d = $.extend(true, [], file.data);\n        if (st < 0) {\n            st = 0;\n        }\n        if (ed < 0) {\n            ed = 0;\n        }\n        if (type == 'row') {\n            if (st > d.length - 1) {\n                st = d.length - 1;\n            }\n            if (ed > d.length - 1) {\n                ed = d.length - 1;\n            }\n        } else {\n            if (st > d[0].length - 1) {\n                st = d[0].length - 1;\n            }\n            if (ed > d[0].length - 1) {\n                ed = d[0].length - 1;\n            }\n        }\n        if (st > ed) {\n            return;\n        }\n        let slen = ed - st + 1;\n        let cfg = $.extend(true, {}, file.config);    //合并单元格配置变动\n        //合并单元格配置变动\n        if (cfg['merge'] == null) {\n            cfg['merge'] = {};\n        }\n        let merge_new = {};\n        for (let m in cfg['merge']) {\n            let mc = cfg['merge'][m];\n            let r = mc.r, c = mc.c, rs = mc.rs, cs = mc.cs;\n            if (type == 'row') {\n                if (r < st) {\n                    if (r + rs - 1 < st) {\n                        merge_new[r + '_' + c] = {\n                            'r': r,\n                            'c': c,\n                            'rs': rs,\n                            'cs': cs\n                        };\n                    } else if (r + rs - 1 >= st && r + rs - 1 < ed) {\n                        merge_new[r + '_' + c] = {\n                            'r': r,\n                            'c': c,\n                            'rs': st - r,\n                            'cs': cs\n                        };\n                    } else if (r + rs - 1 >= ed) {\n                        merge_new[r + '_' + c] = {\n                            'r': r,\n                            'c': c,\n                            'rs': rs - slen,\n                            'cs': cs\n                        };\n                    }\n                } else if (r >= st && r <= ed) {\n                    if (r + rs - 1 > ed) {\n                        merge_new[st + '_' + c] = {\n                            'r': st,\n                            'c': c,\n                            'rs': r + rs - 1 - ed,\n                            'cs': cs\n                        };\n                    }\n                } else if (r > ed) {\n                    merge_new[r - slen + '_' + c] = {\n                        'r': r - slen,\n                        'c': c,\n                        'rs': rs,\n                        'cs': cs\n                    };\n                }\n            } else if (type == 'column') {\n                if (c < st) {\n                    if (c + cs - 1 < st) {\n                        merge_new[r + '_' + c] = {\n                            'r': r,\n                            'c': c,\n                            'rs': rs,\n                            'cs': cs\n                        };\n                    } else if (c + cs - 1 >= st && c + cs - 1 < ed) {\n                        merge_new[r + '_' + c] = {\n                            'r': r,\n                            'c': c,\n                            'rs': rs,\n                            'cs': st - c\n                        };\n                    } else if (c + cs - 1 >= ed) {\n                        merge_new[r + '_' + c] = {\n                            'r': r,\n                            'c': c,\n                            'rs': rs,\n                            'cs': cs - slen\n                        };\n                    }\n                } else if (c >= st && c <= ed) {\n                    if (c + cs - 1 > ed) {\n                        merge_new[r + '_' + st] = {\n                            'r': r,\n                            'c': st,\n                            'rs': rs,\n                            'cs': c + cs - 1 - ed\n                        };\n                    }\n                } else if (c > ed) {\n                    merge_new[r + '_' + (c - slen)] = {\n                        'r': r,\n                        'c': c - slen,\n                        'rs': rs,\n                        'cs': cs\n                    };\n                }\n            }\n        }\n        cfg['merge'] = merge_new;    //公式配置变动\n        //公式配置变动\n        let calcChain = file.calcChain;\n        let newCalcChain = [];\n        if (calcChain != null && calcChain.length > 0) {\n            for (let i = 0; i < calcChain.length; i++) {\n                let calc = $.extend(true, {}, calcChain[i]);\n                let calc_r = calc.r, calc_c = calc.c, calc_i = calc.index, calc_funcStr = getcellFormula(calc_r, calc_c, calc_i);\n                if (type == 'row') {\n                    if (calc_r < st || calc_r > ed) {\n                        let functionStr = '=' + formula.functionStrChange(calc_funcStr, 'del', 'row', null, st, slen);\n                        if (d[calc_r][calc_c] && d[calc_r][calc_c].f == calc_funcStr) {\n                            d[calc_r][calc_c].f = functionStr;\n                        }\n                        if (calc_r > ed) {\n                            calc.r = calc_r - slen;\n                        }\n                        newCalcChain.push(calc);\n                    }\n                } else if (type == 'column') {\n                    if (calc_c < st || calc_c > ed) {\n                        let functionStr = '=' + formula.functionStrChange(calc_funcStr, 'del', 'col', null, st, slen);\n                        if (d[calc_r][calc_c] && d[calc_r][calc_c].f == calc_funcStr) {\n                            d[calc_r][calc_c].f = functionStr;\n                        }\n                        if (calc_c > ed) {\n                            calc.c = calc_c - slen;\n                        }\n                        newCalcChain.push(calc);\n                    }\n                }\n            }\n        }    //筛选配置变动\n        //筛选配置变动\n        let filter_select = file.filter_select;\n        let filter = file.filter;\n        let newFilterObj = null;\n        if (filter_select != null && JSON.stringify(filter_select) != '{}') {\n            newFilterObj = {\n                'filter_select': null,\n                'filter': null\n            };\n            let f_r1 = filter_select.row[0], f_r2 = filter_select.row[1];\n            let f_c1 = filter_select.column[0], f_c2 = filter_select.column[1];\n            if (type == 'row') {\n                if (f_r1 > ed) {\n                    f_r1 -= slen;\n                    f_r2 -= slen;\n                    newFilterObj.filter_select = {\n                        'row': [\n                            f_r1,\n                            f_r2\n                        ],\n                        'column': [\n                            f_c1,\n                            f_c2\n                        ]\n                    };\n                } else if (f_r1 < st) {\n                    if (f_r2 < st) {\n                    } else if (f_r2 <= ed) {\n                        f_r2 = st - 1;\n                    } else {\n                        f_r2 -= slen;\n                    }\n                    newFilterObj.filter_select = {\n                        'row': [\n                            f_r1,\n                            f_r2\n                        ],\n                        'column': [\n                            f_c1,\n                            f_c2\n                        ]\n                    };\n                }\n                if (newFilterObj.filter_select != null && filter != null) {\n                    for (let k in filter) {\n                        let f_rowhidden = filter[k].rowhidden;\n                        let f_rowhidden_new = {};\n                        for (let n in f_rowhidden) {\n                            if (n < st) {\n                                f_rowhidden_new[n] = 0;\n                            } else if (n > ed) {\n                                f_rowhidden_new[n - slen] = 0;\n                            }\n                        }\n                        if (JSON.stringify(f_rowhidden_new) != '{}') {\n                            if (newFilterObj.filter == null) {\n                                newFilterObj.filter = {};\n                            }\n                            newFilterObj.filter[k] = $.extend(true, {}, filter[k]);\n                            newFilterObj.filter[k].rowhidden = f_rowhidden_new;\n                            newFilterObj.filter[k].str = f_r1;\n                            newFilterObj.filter[k].edr = f_r2;\n                        }\n                    }\n                }\n            } else if (type == 'column') {\n                if (f_c1 > ed) {\n                    f_c1 -= slen;\n                    f_c2 -= slen;\n                    newFilterObj.filter_select = {\n                        'row': [\n                            f_r1,\n                            f_r2\n                        ],\n                        'column': [\n                            f_c1,\n                            f_c2\n                        ]\n                    };\n                } else if (f_c1 < st) {\n                    if (f_c2 < st) {\n                    } else if (f_c2 <= ed) {\n                        f_c2 = st - 1;\n                    } else {\n                        f_c2 -= slen;\n                    }\n                    newFilterObj.filter_select = {\n                        'row': [\n                            f_r1,\n                            f_r2\n                        ],\n                        'column': [\n                            f_c1,\n                            f_c2\n                        ]\n                    };\n                } else {\n                    if (f_c2 > ed) {\n                        f_c1 = st;\n                        f_c2 -= slen;\n                        newFilterObj.filter_select = {\n                            'row': [\n                                f_r1,\n                                f_r2\n                            ],\n                            'column': [\n                                f_c1,\n                                f_c2\n                            ]\n                        };\n                    }\n                }\n                if (newFilterObj.filter_select != null && filter != null) {\n                    for (let k in filter) {\n                        let f_cindex = filter[k].cindex;\n                        if (f_cindex < st) {\n                            if (newFilterObj.filter == null) {\n                                newFilterObj.filter = {};\n                            }\n                            newFilterObj.filter[f_cindex - f_c1] = $.extend(true, {}, filter[k]);\n                            newFilterObj.filter[f_cindex - f_c1].edc = f_c2;\n                        } else if (f_cindex > ed) {\n                            f_cindex -= slen;\n                            if (newFilterObj.filter == null) {\n                                newFilterObj.filter = {};\n                            }\n                            newFilterObj.filter[f_cindex - f_c1] = $.extend(true, {}, filter[k]);\n                            newFilterObj.filter[f_cindex - f_c1].cindex = f_cindex;\n                            newFilterObj.filter[f_cindex - f_c1].stc = f_c1;\n                            newFilterObj.filter[f_cindex - f_c1].edc = f_c2;\n                        }\n                    }\n                }\n            }\n        }\n        if (newFilterObj != null && newFilterObj.filter != null) {\n            if (cfg['rowhidden'] == null) {\n                cfg['rowhidden'] = {};\n            }\n            for (let k in newFilterObj.filter) {\n                let f_rowhidden = newFilterObj.filter[k].rowhidden;\n                for (let n in f_rowhidden) {\n                    cfg['rowhidden'][n] = 0;\n                }\n            }\n        }    //条件格式配置变动\n        //条件格式配置变动\n        let CFarr = file.luckysheet_conditionformat_save;\n        let newCFarr = [];\n        if (CFarr != null && CFarr.length > 0) {\n            for (let i = 0; i < CFarr.length; i++) {\n                let cf_range = CFarr[i].cellrange;\n                let cf_new_range = [];\n                for (let j = 0; j < cf_range.length; j++) {\n                    let CFr1 = cf_range[j].row[0], CFr2 = cf_range[j].row[1], CFc1 = cf_range[j].column[0], CFc2 = cf_range[j].column[1];\n                    if (type == 'row') {\n                        if (!(CFr1 >= st && CFr2 <= ed)) {\n                            if (CFr1 > ed) {\n                                CFr1 -= slen;\n                                CFr2 -= slen;\n                            } else if (CFr1 < st) {\n                                if (CFr2 < st) {\n                                } else if (CFr2 <= ed) {\n                                    CFr2 = st - 1;\n                                } else {\n                                    CFr2 -= slen;\n                                }\n                            } else {\n                                if (CFr2 > ed) {\n                                    CFr1 = st;\n                                    CFr2 -= slen;\n                                }\n                            }\n                            cf_new_range.push({\n                                'row': [\n                                    CFr1,\n                                    CFr2\n                                ],\n                                'column': [\n                                    CFc1,\n                                    CFc2\n                                ]\n                            });\n                        }\n                    } else if (type == 'column') {\n                        if (!(CFc1 >= st && CFc2 <= ed)) {\n                            if (CFc1 > ed) {\n                                CFc1 -= slen;\n                                CFc2 -= slen;\n                            } else if (CFc1 < st) {\n                                if (CFc2 < st) {\n                                } else if (CFc2 <= ed) {\n                                    CFc2 = st - 1;\n                                } else {\n                                    CFc2 -= slen;\n                                }\n                            } else {\n                                if (CFc2 > ed) {\n                                    CFc1 = st;\n                                    CFc2 -= slen;\n                                }\n                            }\n                            cf_new_range.push({\n                                'row': [\n                                    CFr1,\n                                    CFr2\n                                ],\n                                'column': [\n                                    CFc1,\n                                    CFc2\n                                ]\n                            });\n                        }\n                    }\n                }\n                if (cf_new_range.length > 0) {\n                    let cf = $.extend(true, {}, CFarr[i]);\n                    cf.cellrange = cf_new_range;\n                    newCFarr.push(cf);\n                }\n            }\n        }    //交替颜色配置变动\n        //交替颜色配置变动\n        let AFarr = file.luckysheet_alternateformat_save;\n        let newAFarr = [];\n        if (AFarr != null && AFarr.length > 0) {\n            for (let i = 0; i < AFarr.length; i++) {\n                let AFr1 = AFarr[i].cellrange.row[0], AFr2 = AFarr[i].cellrange.row[1], AFc1 = AFarr[i].cellrange.column[0], AFc2 = AFarr[i].cellrange.column[1];\n                if (type == 'row') {\n                    if (!(AFr1 >= st && AFr2 <= ed)) {\n                        let af = $.extend(true, {}, AFarr[i]);\n                        if (AFr1 > ed) {\n                            AFr1 -= slen;\n                            AFr2 -= slen;\n                        } else if (AFr1 < st) {\n                            if (AFr2 < st) {\n                            } else if (AFr2 <= ed) {\n                                AFr2 = st - 1;\n                            } else {\n                                AFr2 -= slen;\n                            }\n                        } else {\n                            if (AFr2 > ed) {\n                                AFr1 = st;\n                                AFr2 -= slen;\n                            }\n                        }\n                        af.cellrange = {\n                            'row': [\n                                AFr1,\n                                AFr2\n                            ],\n                            'column': [\n                                AFc1,\n                                AFc2\n                            ]\n                        };\n                        newAFarr.push(af);\n                    }\n                } else if (type == 'column') {\n                    if (!(AFc1 >= st && AFc2 <= ed)) {\n                        let af = $.extend(true, {}, AFarr[i]);\n                        if (AFc1 > ed) {\n                            AFc1 -= slen;\n                            AFc2 -= slen;\n                        } else if (AFc1 < st) {\n                            if (AFc2 < st) {\n                            } else if (AFc2 <= ed) {\n                                AFc2 = st - 1;\n                            } else {\n                                AFc2 -= slen;\n                            }\n                        } else {\n                            if (AFc2 > ed) {\n                                AFc1 = st;\n                                AFc2 -= slen;\n                            }\n                        }\n                        af.cellrange = {\n                            'row': [\n                                AFr1,\n                                AFr2\n                            ],\n                            'column': [\n                                AFc1,\n                                AFc2\n                            ]\n                        };\n                        newAFarr.push(af);\n                    }\n                }\n            }\n        }    //冻结配置变动\n        //冻结配置变动\n        let newFreezen = {\n            'freezenhorizontaldata': null,\n            'freezenverticaldata': null\n        };\n        if (Store.freezenhorizontaldata != null && type == 'row') {\n            let freezen_scrollTop = Store.freezenhorizontaldata[2];\n            let freezen_st = luckysheet_searcharray(Store.visibledatarow, freezen_scrollTop);\n            if (freezen_st == -1) {\n                freezen_st = 0;\n            }\n            let freezen_row_st = Store.freezenhorizontaldata[1] - 1;\n            if (freezen_row_st >= st) {\n                if (freezen_row_st < ed) {\n                    freezen_row_st = st - 1;\n                } else {\n                    freezen_row_st -= slen;\n                }\n            }\n            if (freezen_row_st < freezen_st) {\n                freezen_row_st = freezen_st;\n            }\n            let freezen_top = Store.visibledatarow[freezen_row_st] - 2 - freezen_scrollTop + Store.columnHeaderHeight;\n            newFreezen.freezenhorizontaldata = [\n                Store.visibledatarow[freezen_row_st],\n                freezen_row_st + 1,\n                freezen_scrollTop,\n                luckysheetFreezen.cutVolumn(Store.visibledatarow, freezen_row_st + 1),\n                freezen_top\n            ];\n        } else {\n            newFreezen.freezenhorizontaldata = Store.freezenhorizontaldata;\n        }\n        if (Store.freezenverticaldata != null && type == 'column') {\n            let freezen_scrollLeft = Store.freezenverticaldata[2];\n            let freezen_st2 = luckysheet_searcharray(Store.visibledatacolumn, freezen_scrollLeft);\n            if (freezen_st2 == -1) {\n                freezen_st2 = 0;\n            }\n            let freezen_col_st = Store.freezenverticaldata[1] - 1;\n            if (freezen_col_st >= st) {\n                if (freezen_col_st < ed) {\n                    freezen_col_st = st - 1;\n                } else {\n                    freezen_col_st -= slen;\n                }\n            }\n            if (freezen_col_st < freezen_st2) {\n                freezen_col_st = freezen_st2;\n            }\n            let freezen_left = Store.visibledatacolumn[freezen_col_st] - 2 - freezen_scrollLeft + Store.rowHeaderWidth;\n            newFreezen.freezenverticaldata = [\n                Store.visibledatacolumn[freezen_col_st],\n                freezen_col_st + 1,\n                freezen_scrollLeft,\n                luckysheetFreezen.cutVolumn(Store.visibledatacolumn, freezen_col_st + 1),\n                freezen_left\n            ];\n        } else {\n            newFreezen.freezenverticaldata = Store.freezenverticaldata;\n        }    //数据验证配置变动\n        //数据验证配置变动\n        let dataVerification = file.dataVerification;\n        let newDataVerification = {};\n        if (dataVerification != null) {\n            for (let key in dataVerification) {\n                let r = Number(key.split('_')[0]), c = Number(key.split('_')[1]);\n                let item = dataVerification[key];\n                if (type == 'row') {\n                    if (r < st) {\n                        newDataVerification[r + '_' + c] = item;\n                    } else if (r > ed) {\n                        newDataVerification[r - slen + '_' + c] = item;\n                    }\n                } else if (type == 'column') {\n                    if (c < st) {\n                        newDataVerification[r + '_' + c] = item;\n                    } else if (c > ed) {\n                        newDataVerification[r + '_' + (c - slen)] = item;\n                    }\n                }\n            }\n        }    //超链接配置变动\n        //超链接配置变动\n        let hyperlink = file.hyperlink;\n        let newHyperlink = {};\n        if (hyperlink != null) {\n            for (let key in hyperlink) {\n                let r = Number(key.split('_')[0]), c = Number(key.split('_')[1]);\n                let item = hyperlink[key];\n                if (type == 'row') {\n                    if (r < st) {\n                        newHyperlink[r + '_' + c] = item;\n                    } else if (r > ed) {\n                        newHyperlink[r - slen + '_' + c] = item;\n                    }\n                } else if (type == 'column') {\n                    if (c < st) {\n                        newHyperlink[r + '_' + c] = item;\n                    } else if (c > ed) {\n                        newHyperlink[r + '_' + (c - slen)] = item;\n                    }\n                }\n            }\n        }    //主逻辑\n        //主逻辑\n        let type1;\n        if (type == 'row') {\n            type1 = 'r';    //行高配置变动\n            //行高配置变动\n            if (cfg['rowlen'] == null) {\n                cfg['rowlen'] = {};\n            }\n            let rowlen_new = {};\n            for (let r in cfg['rowlen']) {\n                if (r < st) {\n                    rowlen_new[r] = cfg['rowlen'][r];\n                } else if (r > ed) {\n                    rowlen_new[r - slen] = cfg['rowlen'][r];\n                }\n            }\n            cfg['rowlen'] = rowlen_new;    //隐藏行配置变动\n            //隐藏行配置变动\n            if (cfg['rowhidden'] == null) {\n                cfg['rowhidden'] = {};\n            }\n            let rowhidden_new = {};\n            for (let r in cfg['rowhidden']) {\n                if (r < st) {\n                    rowhidden_new[r] = cfg['rowhidden'][r];\n                } else if (r > ed) {\n                    rowhidden_new[r - slen] = cfg['rowhidden'][r];\n                }\n            }\n            cfg['rowhidden'] = rowhidden_new;    //边框配置变动\n            //边框配置变动\n            if (cfg['borderInfo'] && cfg['borderInfo'].length > 0) {\n                let borderInfo = [];\n                for (let i = 0; i < cfg['borderInfo'].length; i++) {\n                    let rangeType = cfg['borderInfo'][i].rangeType;\n                    if (rangeType == 'range') {\n                        let borderRange = cfg['borderInfo'][i].range;\n                        let emptyRange = [];\n                        for (let j = 0; j < borderRange.length; j++) {\n                            let bd_r1 = borderRange[j].row[0], bd_r2 = borderRange[j].row[1];\n                            for (let r = st; r <= ed; r++) {\n                                if (r < borderRange[j].row[0]) {\n                                    bd_r1 -= 1;\n                                    bd_r2 -= 1;\n                                } else if (r <= borderRange[j].row[1]) {\n                                    bd_r2 -= 1;\n                                }\n                            }\n                            if (bd_r2 >= bd_r1) {\n                                emptyRange.push({\n                                    'row': [\n                                        bd_r1,\n                                        bd_r2\n                                    ],\n                                    'column': borderRange[j].column\n                                });\n                            }\n                        }\n                        if (emptyRange.length > 0) {\n                            let bd_obj = {\n                                'rangeType': 'range',\n                                'borderType': cfg['borderInfo'][i].borderType,\n                                'style': cfg['borderInfo'][i].style,\n                                'color': cfg['borderInfo'][i].color,\n                                'range': emptyRange\n                            };\n                            borderInfo.push(bd_obj);\n                        }\n                    } else if (rangeType == 'cell') {\n                        let row_index = cfg['borderInfo'][i].value.row_index;\n                        if (row_index < st) {\n                            borderInfo.push(cfg['borderInfo'][i]);\n                        } else if (row_index > ed) {\n                            cfg['borderInfo'][i].value.row_index = row_index - (ed - st + 1);\n                            borderInfo.push(cfg['borderInfo'][i]);\n                        }\n                    }\n                }\n                cfg['borderInfo'] = borderInfo;\n            }    // 备注：该处理方式会在删除多行的时候会存在bug\n                 // 说明：删除多行后，会把同一个row空数组(引用类型)添加成为data多行的数据源，导致设置这些行数据时产生错误。\n                 //空白行模板\n                 // let row = [];\n                 // for (let c = 0; c < d[0].length; c++) {\n                 //     row.push(null);\n                 // }\n                 // //删除选中行\n                 // d.splice(st, slen);\n                 // //删除多少行，增加多少行空白行                \n                 // for (let r = 0; r < slen; r++) {\n                 //     d.push(row);\n                 // }\n                 //删除选中行\n            // 备注：该处理方式会在删除多行的时候会存在bug\n            // 说明：删除多行后，会把同一个row空数组(引用类型)添加成为data多行的数据源，导致设置这些行数据时产生错误。\n            //空白行模板\n            // let row = [];\n            // for (let c = 0; c < d[0].length; c++) {\n            //     row.push(null);\n            // }\n            // //删除选中行\n            // d.splice(st, slen);\n            // //删除多少行，增加多少行空白行                \n            // for (let r = 0; r < slen; r++) {\n            //     d.push(row);\n            // }\n            //删除选中行\n            d.splice(st, slen);    //删除多少行，增加多少行空白行                \n            //删除多少行，增加多少行空白行                \n            for (let r = 0; r < slen; r++) {\n                let row = [];\n                for (let c = 0; c < d[0].length; c++) {\n                    row.push(null);\n                }\n                d.push(row);\n            }\n        } else {\n            type1 = 'c';    //列宽配置变动\n            //列宽配置变动\n            if (cfg['columnlen'] == null) {\n                cfg['columnlen'] = {};\n            }\n            let columnlen_new = {};\n            for (let c in cfg['columnlen']) {\n                if (c < st) {\n                    columnlen_new[c] = cfg['columnlen'][c];\n                } else if (c > ed) {\n                    columnlen_new[c - slen] = cfg['columnlen'][c];\n                }\n            }\n            cfg['columnlen'] = columnlen_new;    //隐藏列配置变动\n            //隐藏列配置变动\n            if (cfg['colhidden'] == null) {\n                cfg['colhidden'] = {};\n            }\n            let colhidden_new = {};\n            for (let c in cfg['colhidden']) {\n                if (c < st) {\n                    colhidden_new[c] = cfg['colhidden'][c];\n                } else if (c > ed) {\n                    colhidden_new[c - slen] = cfg['colhidden'][c];\n                }\n            }\n            cfg['colhidden'] = colhidden_new;    //边框配置变动\n            //边框配置变动\n            if (cfg['borderInfo'] && cfg['borderInfo'].length > 0) {\n                let borderInfo = [];\n                for (let i = 0; i < cfg['borderInfo'].length; i++) {\n                    let rangeType = cfg['borderInfo'][i].rangeType;\n                    if (rangeType == 'range') {\n                        let borderRange = cfg['borderInfo'][i].range;\n                        let emptyRange = [];\n                        for (let j = 0; j < borderRange.length; j++) {\n                            let bd_c1 = borderRange[j].column[0], bd_c2 = borderRange[j].column[1];\n                            for (let c = st; c <= ed; c++) {\n                                if (c < borderRange[j].column[0]) {\n                                    bd_c1 -= 1;\n                                    bd_c2 -= 1;\n                                } else if (c <= borderRange[j].column[1]) {\n                                    bd_c2 -= 1;\n                                }\n                            }\n                            if (bd_c2 >= bd_c1) {\n                                emptyRange.push({\n                                    'row': borderRange[j].row,\n                                    'column': [\n                                        bd_c1,\n                                        bd_c2\n                                    ]\n                                });\n                            }\n                        }\n                        if (emptyRange.length > 0) {\n                            let bd_obj = {\n                                'rangeType': 'range',\n                                'borderType': cfg['borderInfo'][i].borderType,\n                                'style': cfg['borderInfo'][i].style,\n                                'color': cfg['borderInfo'][i].color,\n                                'range': emptyRange\n                            };\n                            borderInfo.push(bd_obj);\n                        }\n                    } else if (rangeType == 'cell') {\n                        let col_index = cfg['borderInfo'][i].value.col_index;\n                        if (col_index < st) {\n                            borderInfo.push(cfg['borderInfo'][i]);\n                        } else if (col_index > ed) {\n                            cfg['borderInfo'][i].value.col_index = col_index - (ed - st + 1);\n                            borderInfo.push(cfg['borderInfo'][i]);\n                        }\n                    }\n                }\n                cfg['borderInfo'] = borderInfo;\n            }    //空白列模板\n            //空白列模板\n            let addcol = [];\n            for (let r = 0; r < slen; r++) {\n                addcol.push(null);\n            }\n            for (let r = 0; r < d.length; r++) {\n                let row = [].concat(d[r]);    //删除选中列\n                //删除选中列\n                row.splice(st, slen);\n                d[r] = row.concat(addcol);\n            }\n        }    // 修改当前sheet页时刷新\n        // 修改当前sheet页时刷新\n        if (file.index == Store.currentSheetIndex) {\n            ///jfrefreshgrid_adRC(d, cfg, 'delRC', {\n            Store.refreshGrid_adRC(d, cfg, 'delRC', {\n                'index': st,\n                'len': ed - st + 1,\n                'rc': type1\n            }, newCalcChain, newFilterObj, newCFarr, newAFarr, newFreezen, newDataVerification, newHyperlink);\n        } else {\n            file.data = d;\n            file.config = cfg;\n            file.calcChain = newCalcChain;\n            file.filter = newFilterObj.filter;\n            file.filter_select = newFilterObj.filter_select;\n            file.luckysheet_conditionformat_save = newCFarr;\n            file.luckysheet_alternateformat_save = newAFarr;\n            file.dataVerification = newDataVerification;\n            file.hyperlink = newHyperlink;\n        }\n    }   \n    //删除单元格\n    function luckysheetDeleteCell(type, str, edr, stc, edc, sheetIndex) {\n        sheetIndex = sheetIndex || Store.currentSheetIndex;\n        if (!checkProtectionNotEnable(sheetIndex)) {\n            return;\n        }\n        let curOrder = getSheetIndex(sheetIndex);\n        let file = Store.luckysheetfile[curOrder];\n        let d = $.extend(true, [], file.data);\n        let rlen = edr - str + 1;\n        let clen = edc - stc + 1;\n        let cfg = $.extend(true, {}, Store.config);    //合并单元格配置变动\n        //合并单元格配置变动\n        if (cfg['merge'] == null) {\n            cfg['merge'] = {};\n        }\n        let merge_new = {};\n        for (let m in cfg['merge']) {\n            let mc = cfg['merge'][m];\n            let r = mc.r, c = mc.c, rs = mc.rs, cs = mc.cs;\n            if (type == 'moveLeft') {\n                if (str > r + rs - 1 || edr < r || stc > c + cs - 1) {\n                    merge_new[r + '_' + c] = {\n                        'r': r,\n                        'c': c,\n                        'rs': rs,\n                        'cs': cs\n                    };\n                } else if (str <= r && edr >= r + rs - 1 && edc < c) {\n                    merge_new[r + '_' + (c - clen)] = {\n                        'r': r,\n                        'c': c - clen,\n                        'rs': rs,\n                        'cs': cs\n                    };\n                } else {\n                    for (let r_i = r; r_i <= r + rs - 1; r_i++) {\n                        for (let c_i = c; c_i <= c + cs - 1; c_i++) {\n                            delete d[r_i][c_i].mc;\n                        }\n                    }\n                }\n            } else if (type == 'moveUp') {\n                if (stc > c + cs - 1 || edc < c || str > r + rs - 1) {\n                    merge_new[r + '_' + c] = {\n                        'r': r,\n                        'c': c,\n                        'rs': rs,\n                        'cs': cs\n                    };\n                } else if (stc <= c && edc >= c + cs - 1 && edr < r) {\n                    merge_new[r - rlen + '_' + c] = {\n                        'r': r - rlen,\n                        'c': c,\n                        'rs': rs,\n                        'cs': cs\n                    };\n                } else {\n                    for (let r_i = r; r_i <= r + rs - 1; r_i++) {\n                        for (let c_i = c; c_i <= c + cs - 1; c_i++) {\n                            delete d[r_i][c_i].mc;\n                        }\n                    }\n                }\n            }\n        }\n        cfg['merge'] = merge_new;    //公式配置变动\n        //公式配置变动\n        let calcChain = file.calcChain;\n        let newCalcChain = [];\n        if (calcChain != null && calcChain.length > 0) {\n            for (let i = 0; i < calcChain.length; i++) {\n                let calc = $.extend(true, {}, calcChain[i]);\n                let calc_r = calc.r, calc_c = calc.c, calc_i = calc.index, calc_funcStr = getcellFormula(calc_r, calc_c, calc_i);\n                if (calc_r < str || calc_r > edr || calc_c < stc || calc_c > edc) {\n                    let functionStr;\n                    if (type == 'moveLeft') {\n                        functionStr = '=' + formula.functionStrChange(calc_funcStr, 'del', 'col', null, stc, clen);\n                        if (calc_c > edc && calc_r >= str && calc_r <= edr) {\n                            calc.c = calc_c - clen;\n                        }\n                    } else if (type == 'moveUp') {\n                        functionStr = '=' + formula.functionStrChange(calc_funcStr, 'del', 'row', null, str, rlen);\n                        if (calc_r > edr && calc_c >= stc && calc_c <= edc) {\n                            calc.r = calc_r - rlen;\n                        }\n                    }\n                    if (d[calc_r][calc_c] && d[calc_r][calc_c].f == calc_funcStr) {\n                        d[calc_r][calc_c].f = functionStr;\n                    }\n                    newCalcChain.push(calc);\n                }\n            }\n        }    //筛选配置变动\n        //筛选配置变动\n        let filter_select = file.filter_select;\n        let filter = file.filter;\n        let newFilterObj = null;\n        if (filter_select != null && JSON.stringify(filter_select) != '{}') {\n            newFilterObj = {\n                'filter_select': null,\n                'filter': null\n            };\n            let f_r1 = filter_select.row[0], f_r2 = filter_select.row[1];\n            let f_c1 = filter_select.column[0], f_c2 = filter_select.column[1];\n            if (type == 'moveUp') {\n                if (f_c1 >= stc && f_c2 <= edc) {\n                    if (f_r1 > edr) {\n                        newFilterObj.filter_select = {\n                            'row': [\n                                f_r1 - rlen,\n                                f_r2 - rlen\n                            ],\n                            'column': [\n                                f_c1,\n                                f_c2\n                            ]\n                        };\n                    } else if (f_r2 < str) {\n                        newFilterObj.filter_select = {\n                            'row': [\n                                f_r1,\n                                f_r2\n                            ],\n                            'column': [\n                                f_c1,\n                                f_c2\n                            ]\n                        };\n                    } else if (f_r1 < str) {\n                        if (f_r2 > edr) {\n                            newFilterObj.filter_select = {\n                                'row': [\n                                    f_r1,\n                                    f_r2 - rlen\n                                ],\n                                'column': [\n                                    f_c1,\n                                    f_c2\n                                ]\n                            };\n                        } else {\n                            newFilterObj.filter_select = {\n                                'row': [\n                                    f_r1,\n                                    str - 1\n                                ],\n                                'column': [\n                                    f_c1,\n                                    f_c2\n                                ]\n                            };\n                        }\n                    }\n                    if (newFilterObj.filter_select != null && filter != null) {\n                        for (let k in filter) {\n                            let f_rowhidden = filter[k].rowhidden;\n                            let f_rowhidden_new = {};\n                            for (let n in f_rowhidden) {\n                                if (n < str) {\n                                    f_rowhidden_new[n] = 0;\n                                } else if (n > edr) {\n                                    f_rowhidden_new[n - slen] = 0;\n                                }\n                            }\n                            if (newFilterObj.filter == null) {\n                                newFilterObj.filter = {};\n                            }\n                            newFilterObj.filter[k] = $.extend(true, {}, filter[k]);\n                            if (JSON.stringify(f_rowhidden_new) != '{}') {\n                                newFilterObj.filter[k].rowhidden = f_rowhidden_new;\n                            }\n                            newFilterObj.filter[k].str = newFilterObj.filter_select.row[0];\n                            newFilterObj.filter[k].edr = newFilterObj.filter_select.row[1];\n                        }\n                    }\n                } else if (f_r1 >= str && f_r2 <= edr) {\n                    if (f_c1 > edc) {\n                        newFilterObj.filter_select = {\n                            'row': [\n                                f_r1,\n                                f_r2\n                            ],\n                            'column': [\n                                f_c1,\n                                f_c2\n                            ]\n                        };\n                    } else if (f_c1 >= stc) {\n                        if (f_c2 > edc) {\n                            newFilterObj.filter_select = {\n                                'row': [\n                                    f_r1,\n                                    f_r2\n                                ],\n                                'column': [\n                                    stc,\n                                    f_c2 - clen\n                                ]\n                            };\n                        }\n                    } else {\n                        if (f_c2 < stc) {\n                            newFilterObj.filter_select = {\n                                'row': [\n                                    f_r1,\n                                    f_r2\n                                ],\n                                'column': [\n                                    f_c1,\n                                    f_c2\n                                ]\n                            };\n                        } else if (f_c2 <= edc) {\n                            newFilterObj.filter_select = {\n                                'row': [\n                                    f_r1,\n                                    f_r2\n                                ],\n                                'column': [\n                                    f_c1,\n                                    stc - 1\n                                ]\n                            };\n                        } else {\n                            newFilterObj.filter_select = {\n                                'row': [\n                                    f_r1,\n                                    f_r2\n                                ],\n                                'column': [\n                                    f_c1,\n                                    f_c2 - clen\n                                ]\n                            };\n                        }\n                    }\n                    if (newFilterObj.filter_select != null && filter != null) {\n                        for (let k in filter) {\n                            let f_stc = newFilterObj.filter_select.column[0];\n                            let f_edc = newFilterObj.filter_select.column[1];\n                            let f_cindex = filter[k].cindex;\n                            if (f_cindex < stc || f_cindex > edc) {\n                                if (newFilterObj.filter == null) {\n                                    newFilterObj.filter = {};\n                                }\n                                if (f_cindex > edc) {\n                                    f_cindex -= clen;\n                                }\n                                let k2 = f_cindex - f_stc;\n                                newFilterObj.filter[k2] = $.extend(true, {}, filter[k]);\n                                newFilterObj.filter[k2].cindex = f_cindex;\n                                newFilterObj.filter[k2].stc = f_stc;\n                                newFilterObj.filter[k2].edc = f_edc;\n                            }\n                        }\n                    }\n                } else {\n                    newFilterObj.filter_select = {\n                        'row': [\n                            f_r1,\n                            f_r2\n                        ],\n                        'column': [\n                            f_c1,\n                            f_c2\n                        ]\n                    };\n                    if (filter != null) {\n                        newFilterObj.filter = filter;\n                    }\n                }\n            } else if (type == 'moveLeft') {\n                if (f_r1 >= str && f_r2 <= edr) {\n                    if (f_c1 > edc) {\n                        newFilterObj.filter_select = {\n                            'row': [\n                                f_r1,\n                                f_r2\n                            ],\n                            'column': [\n                                f_c1 - clen,\n                                f_c2 - clen\n                            ]\n                        };\n                    } else if (f_c2 < stc) {\n                        newFilterObj.filter_select = {\n                            'row': [\n                                f_r1,\n                                f_r2\n                            ],\n                            'column': [\n                                f_c1,\n                                f_c2\n                            ]\n                        };\n                    } else if (f_c1 < stc) {\n                        if (f_c2 > edc) {\n                            newFilterObj.filter_select = {\n                                'row': [\n                                    f_r1,\n                                    f_r2\n                                ],\n                                'column': [\n                                    f_c1,\n                                    f_c2 - clen\n                                ]\n                            };\n                        } else {\n                            newFilterObj.filter_select = {\n                                'row': [\n                                    f_r1,\n                                    f_r2\n                                ],\n                                'column': [\n                                    f_c1,\n                                    stc - 1\n                                ]\n                            };\n                        }\n                    }\n                    if (newFilterObj.filter_select != null && filter != null) {\n                        for (let k in filter) {\n                            let f_stc = newFilterObj.filter_select.column[0];\n                            let f_edc = newFilterObj.filter_select.column[1];\n                            let f_cindex = filter[k].cindex;\n                            if (f_cindex < stc || f_cindex > edc) {\n                                if (newFilterObj.filter == null) {\n                                    newFilterObj.filter = {};\n                                }\n                                if (f_cindex > edc) {\n                                    f_cindex -= clen;\n                                }\n                                let k2 = f_cindex - f_stc;\n                                newFilterObj.filter[k2] = $.extend(true, {}, filter[k]);\n                                newFilterObj.filter[k2].cindex = f_cindex;\n                                newFilterObj.filter[k2].stc = f_stc;\n                                newFilterObj.filter[k2].edc = f_edc;\n                            }\n                        }\n                    }\n                } else if (f_c1 >= stc && f_c2 <= edc) {\n                    if (f_r1 < str || f_r1 > edr) {\n                        newFilterObj.filter_select = {\n                            'row': [\n                                f_r1,\n                                f_r2\n                            ],\n                            'column': [\n                                f_c1,\n                                f_c2\n                            ]\n                        };\n                        if (filter != null) {\n                            newFilterObj.filter = filter;\n                        }\n                    }\n                } else {\n                    newFilterObj.filter_select = {\n                        'row': [\n                            f_r1,\n                            f_r2\n                        ],\n                        'column': [\n                            f_c1,\n                            f_c2\n                        ]\n                    };\n                    if (filter != null) {\n                        newFilterObj.filter = filter;\n                    }\n                }\n            }\n        }\n        if (newFilterObj != null && newFilterObj.filter != null) {\n            if (cfg['rowhidden'] == null) {\n                cfg['rowhidden'] = {};\n            }\n            for (let k in newFilterObj.filter) {\n                let f_rowhidden = newFilterObj.filter[k].rowhidden;\n                for (let n in f_rowhidden) {\n                    cfg['rowhidden'][n] = 0;\n                }\n            }\n        }    //条件格式配置变动\n        //条件格式配置变动\n        let CFarr = file.luckysheet_conditionformat_save;\n        let newCFarr = [];\n        if (CFarr != null && CFarr.length > 0) {\n            for (let i = 0; i < CFarr.length; i++) {\n                let cf_range = CFarr[i].cellrange;\n                let cf_new_range = [];\n                for (let j = 0; j < cf_range.length; j++) {\n                    let CFr1 = cf_range[j].row[0], CFr2 = cf_range[j].row[1], CFc1 = cf_range[j].column[0], CFc2 = cf_range[j].column[1];\n                    if (!(str <= CFr1 && edr >= CFr2 && stc <= CFc1 && edc >= CFc2)) {\n                        cf_new_range = getMoveRange(type, str, edr, stc, edc, CFr1, CFr2, CFc1, CFc2, rlen, clen);\n                    }\n                }\n                if (cf_new_range.length > 0) {\n                    let cf = $.extend(true, {}, CFarr[i]);\n                    cf.cellrange = cf_new_range;\n                    newCFarr.push(cf);\n                }\n            }\n        }    //数据验证配置变动\n        //数据验证配置变动\n        let dataVerification = file.dataVerification;\n        let newDataVerification = {};\n        if (dataVerification != null) {\n            for (let key in dataVerification) {\n                let r = Number(key.split('_')[0]), c = Number(key.split('_')[1]);\n                let item = dataVerification[key];\n                if (r < str || r > edr || c < stc || c > edc) {\n                    if (type == 'moveLeft') {\n                        if (c > edc && r >= str && r <= edr) {\n                            newDataVerification[r + '_' + (c - clen)] = item;\n                        } else {\n                            newDataVerification[r + '_' + c] = item;\n                        }\n                    } else if (type == 'moveUp') {\n                        if (r > edr && c >= stc && c <= edc) {\n                            newDataVerification[r - rlen + '_' + c] = item;\n                        } else {\n                            newDataVerification[r + '_' + c] = item;\n                        }\n                    }\n                }\n            }\n        }    //超链接配置变动\n        //超链接配置变动\n        let hyperlink = file.hyperlink;\n        let newHyperlink = {};\n        if (hyperlink != null) {\n            for (let key in hyperlink) {\n                let r = Number(key.split('_')[0]), c = Number(key.split('_')[1]);\n                let item = hyperlink[key];\n                if (r < str || r > edr || c < stc || c > edc) {\n                    if (type == 'moveLeft') {\n                        if (c > edc && r >= str && r <= edr) {\n                            newHyperlink[r + '_' + (c - clen)] = item;\n                        } else {\n                            newHyperlink[r + '_' + c] = item;\n                        }\n                    } else if (type == 'moveUp') {\n                        if (r > edr && c >= stc && c <= edc) {\n                            newHyperlink[r - rlen + '_' + c] = item;\n                        } else {\n                            newHyperlink[r + '_' + c] = item;\n                        }\n                    }\n                }\n            }\n        }    //边框配置变动\n        //边框配置变动\n        if (cfg['borderInfo'] && cfg['borderInfo'].length > 0) {\n            let borderInfo = [];\n            for (let i = 0; i < cfg['borderInfo'].length; i++) {\n                let rangeType = cfg['borderInfo'][i].rangeType;\n                if (rangeType == 'range') {\n                    let borderRange = cfg['borderInfo'][i].range;\n                    let emptyRange = [];\n                    for (let j = 0; j < borderRange.length; j++) {\n                        let bd_r1 = borderRange[j].row[0], bd_r2 = borderRange[j].row[1], bd_c1 = borderRange[j].column[0], bd_c2 = borderRange[j].column[1];\n                        if (!(str <= bd_r1 && edr >= bd_r2 && stc <= bd_c1 && edc >= bd_c2)) {\n                            emptyRange = getMoveRange(type, str, edr, stc, edc, bd_r1, bd_r2, bd_c1, bd_c2, rlen, clen);\n                        }\n                    }\n                    if (emptyRange.length > 0) {\n                        let bd_obj = {\n                            'rangeType': 'range',\n                            'borderType': cfg['borderInfo'][i].borderType,\n                            'style': cfg['borderInfo'][i].style,\n                            'color': cfg['borderInfo'][i].color,\n                            'range': emptyRange\n                        };\n                        borderInfo.push(bd_obj);\n                    }\n                } else if (rangeType == 'cell') {\n                    let row_index = cfg['borderInfo'][i].value.row_index;\n                    let col_index = cfg['borderInfo'][i].value.col_index;\n                    if (row_index < str || row_index > edr || col_index < stc || col_index > edc) {\n                        if (type == 'moveLeft') {\n                            if (col_index > edc && row_index >= str && row_index <= edr) {\n                                col_index -= clen;\n                                cfg['borderInfo'][i].value.col_index = col_index;\n                            }\n                        } else if (type == 'moveUp') {\n                            if (row_index > edr && col_index >= stc && col_index <= edc) {\n                                row_index -= rlen;\n                                cfg['borderInfo'][i].value.row_index = row_index;\n                            }\n                        }\n                        borderInfo.push(cfg['borderInfo'][i]);\n                    }\n                }\n            }\n            cfg['borderInfo'] = borderInfo;\n        }    //空白列模板\n        //空白列模板\n        let addcol = [];\n        for (let c = stc; c <= edc; c++) {\n            addcol.push(null);\n        }\n        if (type == 'moveUp') {\n            //上移\n            let data = [];\n            for (let r = str; r <= d.length - 1; r++) {\n                let row = [];\n                for (let c = stc; c <= edc; c++) {\n                    row.push(d[r][c]);\n                }\n                data.push(row);\n            }\n            data.splice(0, rlen);    //空白行模板\n            //空白行模板\n            let addrow = [];\n            for (let r = str; r <= edr; r++) {\n                addrow.push(addcol);\n            }\n            data = data.concat(addrow);\n            for (let r = str; r <= d.length - 1; r++) {\n                for (let c = stc; c <= edc; c++) {\n                    d[r][c] = data[r - str][c - stc];\n                }\n            }\n        } else if (type == 'moveLeft') {\n            //左移\n            for (let r = str; r <= edr; r++) {\n                d[r].splice(stc, clen);\n                d[r] = d[r].concat(addcol);\n            }\n        }\n        if (file.index == Store.currentSheetIndex) {\n            ///jfrefreshgrid_deleteCell(d, cfg, {\n            Store.refreshGrid_deleteCell(d, cfg, {\n                type: type,\n                'str': str,\n                'edr': edr,\n                'stc': stc,\n                'edc': edc\n            }, newCalcChain, newFilterObj, newCFarr, newDataVerification, newHyperlink);\n        } else {\n            file.data = d;\n            file.config = cfg;\n            file.calcChain = newCalcChain;\n            file.filter = newFilterObj.filter;\n            file.filter_select = newFilterObj.filter_select;\n            file.luckysheet_conditionformat_save = newCFarr;\n            file.dataVerification = newDataVerification;\n            file.hyperlink = newHyperlink;\n        }\n    }\n\n    return {\n        luckysheetextendtable,\n        luckysheetextendData,\n        luckysheetdeletetable,\n        luckysheetDeleteCell\n    };\n});"]}